{"ast":null,"code":"var _jsxFileName = \"E:\\\\Smart Tech Solution\\\\React JS\\\\react-project\\\\src\\\\core\\\\Public\\\\Service\\\\WaterTestResults\\\\VisualizationGraphThisYear.tsx\",\n    _s = $RefreshSig$();\n\nimport GeneralChart from \"components/UI/Charts/General\";\nimport CustomCheckBox from \"components/UI/CustomCheckbox\";\nimport { getMonthByLanguageAndScheme, getNumberByLanguage } from \"i18n/i18n\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { chartConfig } from \"./configData\";\n\nconst LineChart = props => {\n  _s();\n\n  const [testParams, setTestParams] = useState();\n  const [selected, setSelected] = useState(props.defaultSelected);\n  const [chartData, setChartData] = useState();\n  const [seriesData, setSeriesData] = useState();\n  const [otherSeriesData, setOtherSeriesData] = useState(); // const [tableData, setTableData] = useState<any>();\n\n  useEffect(() => {\n    if (props.testParams) {\n      const params = {\n        chemical: props.testParams.filter(item => item.types === \"Chemical\"),\n        others: props.testParams.filter(item => item.types === \"Other\")\n      };\n      setTestParams(params);\n    }\n  }, [props.testParams]);\n  useEffect(() => {\n    if (props.testResult && props.testResult[0]) {\n      const newData = {\n        xAxis: props.testResult.map(item => {\n          var _props$scheme;\n\n          return `${getNumberByLanguage(item[\"year\"])} ${getMonthByLanguageAndScheme(item[\"month\"], (_props$scheme = props.scheme) === null || _props$scheme === void 0 ? void 0 : _props$scheme.system_date_format)}`;\n        })\n      };\n      setChartData(newData);\n    }\n  }, [props.testResult]);\n\n  const handleSelect = name => {\n    if (selected !== null && selected !== void 0 && selected.includes(name)) {\n      const filteredData = selected.filter(item => item !== name);\n      setSelected(filteredData);\n    } else {\n      setSelected([...selected, name]);\n    }\n  };\n\n  useEffect(() => {\n    const chemicalSeries = [];\n    const otherCharts = [];\n    selected.forEach((item, index) => {\n      var _props$testParams;\n\n      const testParam = (_props$testParams = props.testParams) === null || _props$testParams === void 0 ? void 0 : _props$testParams.find(param => param.parameter_name === item);\n\n      if ((testParam === null || testParam === void 0 ? void 0 : testParam.types) === \"Chemical\") {\n        chemicalSeries.push({\n          name: testParam === null || testParam === void 0 ? void 0 : testParam.parameter_name,\n          type: \"line\",\n          smooth: true,\n          data: props.testResult.map(item => {\n            var _item$data, _item$data$find;\n\n            return ((_item$data = item.data) === null || _item$data === void 0 ? void 0 : (_item$data$find = _item$data.find(single => single.parameter__parameter_name === (testParam === null || testParam === void 0 ? void 0 : testParam.parameter_name))) === null || _item$data$find === void 0 ? void 0 : _item$data$find.total_value) || 0;\n          })\n        });\n      } else {\n        const newChart = Object.assign({}, { ...chartConfig,\n          xAxis: {\n            type: \"category\",\n            boundaryGap: false,\n            data: chartData === null || chartData === void 0 ? void 0 : chartData.xAxis,\n            axisLabel: {\n              formatter: function (name) {\n                return name === null || name === void 0 ? void 0 : name.replace(props.type, \"\");\n              }\n            }\n          },\n          series: [{\n            name: testParam === null || testParam === void 0 ? void 0 : testParam.parameter_name,\n            type: \"line\",\n            smooth: true,\n            data: props.testResult.map(item => {\n              var _item$data2, _item$data2$find;\n\n              return ((_item$data2 = item.data) === null || _item$data2 === void 0 ? void 0 : (_item$data2$find = _item$data2.find(single => single.parameter__parameter_name === (testParam === null || testParam === void 0 ? void 0 : testParam.parameter_name))) === null || _item$data2$find === void 0 ? void 0 : _item$data2$find.total_value) || 0;\n            })\n          }]\n        });\n        otherCharts.push(newChart);\n      }\n    });\n    setSeriesData(chemicalSeries);\n    setOtherSeriesData(otherCharts); // const selectedData = selected.map((item) => ({\n    //   ...config,\n    //   name: props.options.find((opt) => opt.id === item)?.name || \"\",\n    //   data: chartData && chartData[item],\n    //   itemStyle: {\n    //     color: props.options.find((opt) => opt.id === item)?.color || \"\",\n    //   },\n    // }));\n    // const tableData = selected.map((item) => ({\n    //   name: props.options.find((opt) => opt.id === item)?.name || \"\",\n    //   color: props.options.find((opt) => opt.id === item)?.color || \"\",\n    //   data: chartData && chartData[item],\n    // }));\n    // setSeriesData(selectedData);\n    // setTableData(tableData);\n  }, [chartData, selected]);\n  const chemicalSeriesOptionData = {\n    tooltip: {\n      trigger: \"axis\",\n      axisPointer: {\n        type: \"shadow\"\n      }\n    },\n    legend: {\n      show: true\n    },\n    grid: {\n      left: \"3%\",\n      right: \"5%\",\n      bottom: \"3%\",\n      //   top: \"6%\",\n      containLabel: true\n    },\n    xAxis: {\n      type: \"category\",\n      boundaryGap: false,\n      data: chartData === null || chartData === void 0 ? void 0 : chartData.xAxis,\n      axisLabel: {\n        formatter: function (name) {\n          return name === null || name === void 0 ? void 0 : name.replace(props.type, \"\");\n        }\n      }\n    },\n    yAxis: {\n      type: \"value\"\n    },\n    series: seriesData\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GeneralChart, {\n    minHeight: 400,\n    options: chemicalSeriesOptionData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }), otherSeriesData && otherSeriesData.map(item => /*#__PURE__*/React.createElement(GeneralChart, {\n    minHeight: 400,\n    options: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 41\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-3 chartOptions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, \"Select\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, \"Chemicals\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }, testParams === null || testParams === void 0 ? void 0 : testParams.chemical.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CustomCheckBox, {\n    id: \"\" + item.id,\n    label: item.parameter_name,\n    onChange: e => handleSelect(\"\" + item.parameter_name),\n    checked: selected.includes(\"\" + item.parameter_name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }\n  }, \"Others\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, testParams === null || testParams === void 0 ? void 0 : testParams.others.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CustomCheckBox, {\n    id: \"\" + item.id,\n    label: item.parameter_name,\n    onChange: e => handleSelect(\"\" + item.parameter_name),\n    checked: selected.includes(\"\" + item.parameter_name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }))))));\n};\n\n_s(LineChart, \"wm3OaEDT6qkuhsBSCa2woUEN4P4=\");\n\n_c = LineChart;\n\nconst mapStateToProps = state => ({\n  language: state.i18nextData.languageType,\n  testParams: state.testParamtersData.testParametersData.data,\n  testResult: state.reportData.waterTestResultsData.data,\n  scheme: state.waterSchemeData.waterSchemeDetailsData.data\n});\n\nconst mapDispatchToProps = {};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(LineChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LineChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["E:/Smart Tech Solution/React JS/react-project/src/core/Public/Service/WaterTestResults/VisualizationGraphThisYear.tsx"],"names":["GeneralChart","CustomCheckBox","getMonthByLanguageAndScheme","getNumberByLanguage","React","useEffect","useState","connect","chartConfig","LineChart","props","testParams","setTestParams","selected","setSelected","defaultSelected","chartData","setChartData","seriesData","setSeriesData","otherSeriesData","setOtherSeriesData","params","chemical","filter","item","types","others","testResult","newData","xAxis","map","scheme","system_date_format","handleSelect","name","includes","filteredData","chemicalSeries","otherCharts","forEach","index","testParam","find","param","parameter_name","push","type","smooth","data","single","parameter__parameter_name","total_value","newChart","Object","assign","boundaryGap","axisLabel","formatter","replace","series","chemicalSeriesOptionData","tooltip","trigger","axisPointer","legend","show","grid","left","right","bottom","containLabel","yAxis","id","e","mapStateToProps","state","language","i18nextData","languageType","testParamtersData","testParametersData","reportData","waterTestResultsData","waterSchemeData","waterSchemeDetailsData","mapDispatchToProps","connector"],"mappings":"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","sourcesContent":["import GeneralChart from \"components/UI/Charts/General\";\r\nimport CustomCheckBox from \"components/UI/CustomCheckbox\";\r\nimport { getMonthByLanguage, getMonthByLanguageAndScheme, getNumberByLanguage } from \"i18n/i18n\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { TestParametersType } from \"store/modules/testParamters/getTestParameters\";\r\nimport { RootState } from \"store/root-reducer\";\r\nimport { chartConfig } from \"./configData\";\r\n\r\ntype SeriesConfig = {\r\n  name: string;\r\n  type: string;\r\n  smooth: boolean;\r\n  data: (string | number)[];\r\n};\r\n\r\ntype ChartDataType = {\r\n  xAxis: (string | number)[];\r\n};\r\n\r\ninterface Props extends PropsFromRedux {\r\n  type?: string;\r\n  compareKey: string;\r\n  defaultSelected: string[];\r\n}\r\n\r\nconst LineChart = (props: Props) => {\r\n  const [testParams, setTestParams] = useState<{\r\n    chemical: TestParametersType;\r\n    others: TestParametersType;\r\n  }>();\r\n\r\n  const [selected, setSelected] = useState<string[]>(props.defaultSelected);\r\n  const [chartData, setChartData] = useState<ChartDataType>();\r\n\r\n  const [seriesData, setSeriesData] = useState<SeriesConfig[]>();\r\n  const [otherSeriesData, setOtherSeriesData] = useState<any[]>();\r\n\r\n  // const [tableData, setTableData] = useState<any>();\r\n\r\n  useEffect(() => {\r\n    if (props.testParams) {\r\n      const params = {\r\n        chemical: props.testParams.filter((item) => item.types === \"Chemical\"),\r\n        others: props.testParams.filter((item) => item.types === \"Other\"),\r\n      };\r\n      setTestParams(params);\r\n    }\r\n  }, [props.testParams]);\r\n\r\n  useEffect(() => {\r\n    if (props.testResult && props.testResult[0]) {\r\n      const newData: ChartDataType = {\r\n        xAxis: props.testResult.map(\r\n          (item) =>\r\n            `${getNumberByLanguage(item[\"year\"])} ${getMonthByLanguageAndScheme(\r\n              item[\"month\"],\r\n              props.scheme?.system_date_format\r\n            )}`\r\n        ),\r\n      };\r\n      setChartData(newData);\r\n    }\r\n  }, [props.testResult]);\r\n\r\n  const handleSelect = (name: string) => {\r\n    if (selected?.includes(name)) {\r\n      const filteredData = selected.filter((item) => item !== name);\r\n      setSelected(filteredData);\r\n    } else {\r\n      setSelected([...selected, name]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const chemicalSeries: any = [];\r\n    const otherCharts: any = [];\r\n\r\n    selected.forEach((item, index) => {\r\n      const testParam = props.testParams?.find((param) => param.parameter_name === item);\r\n      if (testParam?.types === \"Chemical\") {\r\n        chemicalSeries.push({\r\n          name: testParam?.parameter_name,\r\n          type: \"line\",\r\n          smooth: true,\r\n          data: props.testResult.map((item) => {\r\n            return (\r\n              item.data?.find(\r\n                (single) => single.parameter__parameter_name === testParam?.parameter_name\r\n              )?.total_value || 0\r\n            );\r\n          }),\r\n        });\r\n      } else {\r\n        const newChart = Object.assign(\r\n          {},\r\n          {\r\n            ...chartConfig,\r\n            xAxis: {\r\n              type: \"category\",\r\n              boundaryGap: false,\r\n              data: chartData?.xAxis,\r\n              axisLabel: {\r\n                formatter: function (name) {\r\n                  return name?.replace(props.type, \"\");\r\n                },\r\n              },\r\n            },\r\n\r\n            series: [\r\n              {\r\n                name: testParam?.parameter_name,\r\n                type: \"line\",\r\n                smooth: true,\r\n                data: props.testResult.map((item) => {\r\n                  return (\r\n                    item.data?.find(\r\n                      (single) => single.parameter__parameter_name === testParam?.parameter_name\r\n                    )?.total_value || 0\r\n                  );\r\n                }),\r\n              },\r\n            ],\r\n          }\r\n        );\r\n        otherCharts.push(newChart);\r\n      }\r\n    });\r\n\r\n    setSeriesData(chemicalSeries);\r\n    setOtherSeriesData(otherCharts); \r\n\r\n    // const selectedData = selected.map((item) => ({\r\n    //   ...config,\r\n    //   name: props.options.find((opt) => opt.id === item)?.name || \"\",\r\n    //   data: chartData && chartData[item],\r\n    //   itemStyle: {\r\n    //     color: props.options.find((opt) => opt.id === item)?.color || \"\",\r\n    //   },\r\n    // }));\r\n    // const tableData = selected.map((item) => ({\r\n    //   name: props.options.find((opt) => opt.id === item)?.name || \"\",\r\n    //   color: props.options.find((opt) => opt.id === item)?.color || \"\",\r\n    //   data: chartData && chartData[item],\r\n    // }));\r\n    // setSeriesData(selectedData);\r\n    // setTableData(tableData);\r\n  }, [chartData, selected]);\r\n\r\n  const chemicalSeriesOptionData = {\r\n    tooltip: {\r\n      trigger: \"axis\",\r\n      axisPointer: {\r\n        type: \"shadow\",\r\n      },\r\n    },\r\n    legend: {\r\n      show: true,\r\n    },\r\n    grid: {\r\n      left: \"3%\",\r\n      right: \"5%\",\r\n      bottom: \"3%\",\r\n      //   top: \"6%\",\r\n      containLabel: true,\r\n    },\r\n    xAxis: {\r\n      type: \"category\",\r\n      boundaryGap: false,\r\n      data: chartData?.xAxis,\r\n      axisLabel: {\r\n        formatter: function (name) {\r\n          return name?.replace(props.type, \"\");\r\n        },\r\n      },\r\n    },\r\n    yAxis: {\r\n      type: \"value\",\r\n    },\r\n    series: seriesData,\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-9\">\r\n        <GeneralChart minHeight={400} options={chemicalSeriesOptionData} />\r\n\r\n        {otherSeriesData &&\r\n          otherSeriesData.map((item) => <GeneralChart minHeight={400} options={item} />)}\r\n        {/* {tableData?.length > 0 && props.type && (\r\n          <DataTable\r\n            years={chartData?.xAxis}\r\n            tableData={tableData}\r\n            type={props.type}\r\n          />\r\n        )} */}\r\n      </div>\r\n      <div className=\"col-md-3 chartOptions\">\r\n        <h6>Select</h6>\r\n\r\n        <p>Chemicals</p>\r\n\r\n        <ul>\r\n          {testParams?.chemical.map((item) => (\r\n            <li key={item.id}>\r\n              <CustomCheckBox\r\n                id={\"\" + item.id}\r\n                label={item.parameter_name}\r\n                onChange={(e) => handleSelect(\"\" + item.parameter_name)}\r\n                checked={selected.includes(\"\" + item.parameter_name)}\r\n              />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"mt-3\">Others</p>\r\n\r\n        <ul>\r\n          {testParams?.others.map((item) => (\r\n            <li key={item.id}>\r\n              <CustomCheckBox\r\n                id={\"\" + item.id}\r\n                label={item.parameter_name}\r\n                onChange={(e) => handleSelect(\"\" + item.parameter_name)}\r\n                checked={selected.includes(\"\" + item.parameter_name)}\r\n              />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  language: state.i18nextData.languageType,\r\n  testParams: state.testParamtersData.testParametersData.data,\r\n  testResult: state.reportData.waterTestResultsData.data,\r\n  scheme: state.waterSchemeData.waterSchemeDetailsData.data,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(LineChart);\r\n"]},"metadata":{},"sourceType":"module"}