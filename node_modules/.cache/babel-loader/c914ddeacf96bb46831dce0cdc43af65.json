{"ast":null,"code":"export const calendarData = {\n  bsMonths: [\"बैशाख\", \"जेठ\", \"आषाढ\", \"श्रावण\", \"भदौ\", \"असोज\", \"कार्तिक\", \"मंसिर\", \"पौष\", \"माघ\", \"फाल्गुन\", \"चैत्र\"],\n  bsDays: [\"आईत\", \"सोम\", \"मंगल\", \"बुध\", \"बिही\", \"शुक्र\", \"शनि\"],\n  bsDaysFull: [\"आइतवार\", \"सोमवार\", \"मंगलवार\", \"बुधवार\", \"बिहिवार\", \"शुक्रवार\", \"शनिवार\"],\n  nepaliNumbers: [\"०\", \"१\", \"२\", \"३\", \"४\", \"५\", \"६\", \"७\", \"८\", \"९\"],\n  bsMonthUpperDays: [[30, 31], [31, 32], [31, 32], [31, 32], [31, 32], [30, 31], [29, 30], [29, 30], [29, 30], [29, 30], [29, 30], [30, 31]],\n  extractedBsMonthData: [[0, 1, 1, 22, 1, 3, 1, 1, 1, 3, 1, 22, 1, 3, 1, 3, 1, 22, 1, 3, 1, 19, 1, 3, 1, 1, 3, 1, 2, 2, 1, 3, 1], [1, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 3, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 3, 1, 1, 2], [0, 1, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 3, 1, 1, 2], [1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 2, 1, 3, 1, 2, 2, 2, 1, 2], [59, 1, 26, 1, 28, 1, 2, 1, 12], [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 1, 1, 2, 2, 1, 3, 1, 2, 1, 2], [0, 12, 1, 3, 1, 3, 1, 5, 1, 11, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 27, 1, 2], [1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 3, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 15, 2, 4], [0, 1, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 3, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 15, 2, 4], [1, 1, 3, 1, 3, 1, 14, 1, 3, 1, 1, 1, 3, 1, 14, 1, 3, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 3, 1, 14, 1, 3, 15, 1, 2, 1, 1], [0, 1, 1, 3, 1, 3, 1, 10, 1, 3, 1, 3, 1, 1, 1, 3, 1, 3, 1, 10, 1, 3, 1, 3, 1, 3, 1, 3, 1, 14, 1, 3, 1, 3, 1, 3, 1, 3, 1, 10, 1, 20, 1, 1, 1], [1, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 20, 3]],\n  minBsYear: 1970,\n  maxBsYear: 2100,\n  minAdDateEqBsDate: {\n    \"ad\": {\n      \"year\": 1913,\n      \"month\": 3,\n      \"date\": 13\n    },\n    \"bs\": {\n      \"year\": 1970,\n      \"month\": 1,\n      \"date\": 1\n    }\n  }\n}; //import calendarData from './calendarData';\n// const toDevanagariDigits = (number: any) => {\n//     return String(number).split('').map((ed) => calendarData.nepaliNumbers[Number(ed)]).join('');\n// }\n\nconst getTotalDaysNumFromMinBsYear = (bsYear, bsMonth, bsDate) => {\n  if (bsYear < calendarData.minBsYear || bsYear > calendarData.maxBsYear) {\n    return null;\n  }\n\n  let daysNumFromMinBsYear = 0;\n  const diffYears = bsYear - calendarData.minBsYear;\n\n  for (let month = 1; month <= 12; month++) {\n    if (month < bsMonth) {\n      daysNumFromMinBsYear += getMonthDaysNumFormMinBsYear(month, diffYears + 1);\n    } else {\n      daysNumFromMinBsYear += getMonthDaysNumFormMinBsYear(month, diffYears);\n    }\n  }\n\n  if (bsYear > 2085 && bsYear < 2088) {\n    daysNumFromMinBsYear += bsDate - 2;\n  } else if (bsYear === 2085 && bsMonth > 5) {\n    daysNumFromMinBsYear += bsDate - 2;\n  } else if (bsYear > 2088) {\n    daysNumFromMinBsYear += bsDate - 4;\n  } else if (bsYear === 2088 && bsMonth > 5) {\n    daysNumFromMinBsYear += bsDate - 4;\n  } else {\n    daysNumFromMinBsYear += bsDate;\n  }\n\n  return daysNumFromMinBsYear;\n};\n\nconst getMonthDaysNumFormMinBsYear = (bsMonth, yearDiff) => {\n  let yearCount = 0;\n  let monthDaysFromMinBsYear = 0;\n  if (yearDiff === 0) return 0;\n  const bsMonthData = calendarData.extractedBsMonthData[bsMonth - 1];\n\n  for (let i = 0; i < bsMonthData.length; i++) {\n    if (bsMonthData[i] === 0) {\n      continue;\n    }\n\n    const bsMonthUpperDaysIndex = i % 2;\n\n    if (yearDiff > yearCount + bsMonthData[i]) {\n      yearCount += bsMonthData[i];\n      monthDaysFromMinBsYear += calendarData.bsMonthUpperDays[bsMonth - 1][bsMonthUpperDaysIndex] * bsMonthData[i];\n    } else {\n      monthDaysFromMinBsYear += calendarData.bsMonthUpperDays[bsMonth - 1][bsMonthUpperDaysIndex] * (yearDiff - yearCount);\n      yearCount = yearDiff - yearCount;\n      break;\n    }\n  }\n\n  return monthDaysFromMinBsYear;\n};\n\nconst getBsMonthDays = (bsYear, bsMonth) => {\n  let yearCount = 0;\n  const totalYears = bsYear + 1 - calendarData.minBsYear;\n  const bsMonthData = calendarData.extractedBsMonthData[bsMonth - 1];\n\n  for (let i = 0; i < bsMonthData.length; i++) {\n    if (bsMonthData[i] === 0) {\n      continue;\n    }\n\n    const bsMonthUpperDaysIndex = i % 2;\n    yearCount += bsMonthData[i];\n\n    if (totalYears <= yearCount) {\n      if (bsYear === 2085 && bsMonth === 5 || bsYear === 2088 && bsMonth === 5) {\n        return +calendarData.bsMonthUpperDays[bsMonth - 1][bsMonthUpperDaysIndex] - 2;\n      } else {\n        return +calendarData.bsMonthUpperDays[bsMonth - 1][bsMonthUpperDaysIndex];\n      }\n    }\n  }\n\n  return null;\n};\n\nexport const convertADtoBS = (adYear, adMonth, adDate) => {\n  let bsYear = adYear + 57;\n  let bsMonth = (adMonth + 9) % 12;\n  bsMonth = bsMonth === 0 ? 12 : bsMonth;\n  let bsDate = 1;\n\n  if (adMonth < 4) {\n    bsYear -= 1;\n  }\n\n  const bsMonthFirstAdDate = convertBStoAD(bsYear, bsMonth, 1);\n\n  if (adDate >= 1 && adDate < bsMonthFirstAdDate.getDate()) {\n    if (adMonth === 4) {\n      const bsYearFirstAdDate = convertBStoAD(bsYear, 1, 1);\n\n      if (adDate < bsYearFirstAdDate.getDate()) {\n        bsYear -= 1;\n      }\n    }\n\n    bsMonth = bsMonth !== 1 ? bsMonth - 1 : 12;\n    const bsMonthDays = getBsMonthDays(bsYear, bsMonth);\n    bsDate = bsMonthDays - (bsMonthFirstAdDate.getDate() - adDate) + 1;\n  } else {\n    bsDate = adDate - bsMonthFirstAdDate.getDate() + 1;\n  }\n\n  return {\n    bsYear,\n    bsMonth,\n    bsDate\n  };\n};\nexport const convertBStoAD = (bsYear, bsMonth, bsDate) => {\n  const daysNumFromMinBsYear = getTotalDaysNumFromMinBsYear(bsYear, bsMonth, bsDate);\n  const adDate = new Date(calendarData.minAdDateEqBsDate.ad.year, calendarData.minAdDateEqBsDate.ad.month, calendarData.minAdDateEqBsDate.ad.date - 1);\n  adDate.setDate(adDate.getDate() + daysNumFromMinBsYear);\n  return adDate;\n};","map":{"version":3,"sources":["C:/Users/S.K. COMPUTER/OneDrive/Desktop/react-project/src/components/React/Datepicker/Dateconverter.ts"],"names":["calendarData","bsMonths","bsDays","bsDaysFull","nepaliNumbers","bsMonthUpperDays","extractedBsMonthData","minBsYear","maxBsYear","minAdDateEqBsDate","getTotalDaysNumFromMinBsYear","bsYear","bsMonth","bsDate","daysNumFromMinBsYear","diffYears","month","getMonthDaysNumFormMinBsYear","yearDiff","yearCount","monthDaysFromMinBsYear","bsMonthData","i","length","bsMonthUpperDaysIndex","getBsMonthDays","totalYears","convertADtoBS","adYear","adMonth","adDate","bsMonthFirstAdDate","convertBStoAD","getDate","bsYearFirstAdDate","bsMonthDays","Date","ad","year","date","setDate"],"mappings":"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","sourcesContent":["export const calendarData = {\r\n    bsMonths: [\"बैशाख\", \"जेठ\", \"आषाढ\", \"श्रावण\", \"भदौ\", \"असोज\", \"कार्तिक\", \"मंसिर\", \"पौष\", \"माघ\", \"फाल्गुन\", \"चैत्र\"],\r\n    bsDays: [\"आईत\", \"सोम\", \"मंगल\", \"बुध\", \"बिही\", \"शुक्र\", \"शनि\"],\r\n    bsDaysFull: [\"आइतवार\", \"सोमवार\", \"मंगलवार\", \"बुधवार\", \"बिहिवार\", \"शुक्रवार\", \"शनिवार\"],\r\n    nepaliNumbers: [\"०\", \"१\", \"२\", \"३\", \"४\", \"५\", \"६\", \"७\", \"८\", \"९\"],\r\n    bsMonthUpperDays: [\r\n        [30, 31],\r\n        [31, 32],\r\n        [31, 32],\r\n        [31, 32],\r\n        [31, 32],\r\n        [30, 31],\r\n        [29, 30],\r\n        [29, 30],\r\n        [29, 30],\r\n        [29, 30],\r\n        [29, 30],\r\n        [30, 31]\r\n    ],\r\n    extractedBsMonthData: [\r\n        [0, 1, 1, 22, 1, 3, 1, 1, 1, 3, 1, 22, 1, 3, 1, 3, 1, 22, 1, 3, 1, 19, 1, 3, 1, 1, 3, 1, 2, 2, 1, 3, 1],\r\n        [1, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 3, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 3, 1, 1, 2],\r\n        [0, 1, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 3, 1, 1, 2],\r\n        [1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 2, 1, 3, 1, 2, 2, 2, 1, 2],\r\n        [59, 1, 26, 1, 28, 1, 2, 1, 12],\r\n        [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 1, 1, 2, 2, 1, 3, 1, 2, 1, 2],\r\n        [0, 12, 1, 3, 1, 3, 1, 5, 1, 11, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 27, 1, 2],\r\n        [1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 3, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 15, 2, 4],\r\n        [0, 1, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 3, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 15, 2, 4],\r\n        [1, 1, 3, 1, 3, 1, 14, 1, 3, 1, 1, 1, 3, 1, 14, 1, 3, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 3, 1, 14, 1, 3, 15, 1, 2, 1, 1],\r\n        [0, 1, 1, 3, 1, 3, 1, 10, 1, 3, 1, 3, 1, 1, 1, 3, 1, 3, 1, 10, 1, 3, 1, 3, 1, 3, 1, 3, 1, 14, 1, 3, 1, 3, 1, 3, 1, 3, 1, 10, 1, 20, 1, 1, 1],\r\n        [1, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 20, 3]\r\n    ],\r\n    minBsYear: 1970,\r\n    maxBsYear: 2100,\r\n    minAdDateEqBsDate: {\r\n        \"ad\": {\r\n            \"year\": 1913, \"month\": 3, \"date\": 13\r\n        },\r\n        \"bs\": {\r\n            \"year\": 1970, \"month\": 1, \"date\": 1\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//import calendarData from './calendarData';\r\n\r\n// const toDevanagariDigits = (number: any) => {\r\n//     return String(number).split('').map((ed) => calendarData.nepaliNumbers[Number(ed)]).join('');\r\n// }\r\n\r\nconst getTotalDaysNumFromMinBsYear = (bsYear: any, bsMonth: any, bsDate: any) => {\r\n    if (bsYear < calendarData.minBsYear || bsYear > calendarData.maxBsYear) {\r\n        return null;\r\n    }\r\n\r\n    let daysNumFromMinBsYear = 0;\r\n    const diffYears = bsYear - calendarData.minBsYear;\r\n    for (let month = 1; month <= 12; month++) {\r\n        if (month < bsMonth) {\r\n            daysNumFromMinBsYear += getMonthDaysNumFormMinBsYear(month, diffYears + 1);\r\n        } else {\r\n            daysNumFromMinBsYear += getMonthDaysNumFormMinBsYear(month, diffYears);\r\n        }\r\n    }\r\n\r\n    if (bsYear > 2085 && bsYear < 2088) {\r\n        daysNumFromMinBsYear += bsDate - 2;\r\n    } else if (bsYear === 2085 && bsMonth > 5) {\r\n        daysNumFromMinBsYear += bsDate - 2;\r\n    } else if (bsYear > 2088) {\r\n        daysNumFromMinBsYear += bsDate - 4;\r\n    } else if (bsYear === 2088 && bsMonth > 5) {\r\n        daysNumFromMinBsYear += bsDate - 4;\r\n    } else {\r\n        daysNumFromMinBsYear += bsDate;\r\n    }\r\n\r\n    return daysNumFromMinBsYear;\r\n}\r\n\r\nconst getMonthDaysNumFormMinBsYear = (bsMonth: any, yearDiff: any) => {\r\n    let yearCount = 0;\r\n    let monthDaysFromMinBsYear = 0;\r\n    if (yearDiff === 0) return 0;\r\n\r\n    const bsMonthData = calendarData.extractedBsMonthData[bsMonth - 1];\r\n    for (let i = 0; i < bsMonthData.length; i++) {\r\n        if (bsMonthData[i] === 0) {\r\n            continue;\r\n        }\r\n        const bsMonthUpperDaysIndex = i % 2;\r\n        if (yearDiff > yearCount + bsMonthData[i]) {\r\n            yearCount += bsMonthData[i];\r\n            monthDaysFromMinBsYear += calendarData.bsMonthUpperDays[bsMonth - 1][bsMonthUpperDaysIndex] * bsMonthData[i];\r\n        } else {\r\n            monthDaysFromMinBsYear += calendarData.bsMonthUpperDays[bsMonth - 1][bsMonthUpperDaysIndex] * (yearDiff - yearCount);\r\n            yearCount = yearDiff - yearCount;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return monthDaysFromMinBsYear;\r\n}\r\n\r\nconst getBsMonthDays = (bsYear: any, bsMonth: any) => {\r\n    let yearCount = 0;\r\n    const totalYears = (bsYear + 1) - calendarData.minBsYear;\r\n    const bsMonthData = calendarData.extractedBsMonthData[bsMonth - 1];\r\n    for (let i = 0; i < bsMonthData.length; i++) {\r\n        if (bsMonthData[i] === 0) {\r\n            continue;\r\n        }\r\n\r\n        const bsMonthUpperDaysIndex = i % 2;\r\n        yearCount += bsMonthData[i];\r\n        if (totalYears <= yearCount) {\r\n            if ((bsYear === 2085 && bsMonth === 5) || (bsYear === 2088 && bsMonth === 5)) {\r\n                return +calendarData.bsMonthUpperDays[bsMonth - 1][bsMonthUpperDaysIndex] - 2;\r\n            } else {\r\n                return +calendarData.bsMonthUpperDays[bsMonth - 1][bsMonthUpperDaysIndex];\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport const convertADtoBS = (adYear: any, adMonth: any, adDate: any) => {\r\n\r\n    let bsYear = adYear + 57;\r\n    let bsMonth = (adMonth + 9) % 12;\r\n    bsMonth = bsMonth === 0 ? 12 : bsMonth;\r\n    let bsDate = 1;\r\n\r\n    if (adMonth < 4) {\r\n        bsYear -= 1;\r\n    }\r\n\r\n    const bsMonthFirstAdDate = convertBStoAD(bsYear, bsMonth, 1);\r\n    if (adDate >= 1 && adDate < bsMonthFirstAdDate.getDate()) {\r\n        if (adMonth === 4) {\r\n            const bsYearFirstAdDate = convertBStoAD(bsYear, 1, 1);\r\n            if (adDate < bsYearFirstAdDate.getDate()) {\r\n                bsYear -= 1;\r\n            }\r\n        }\r\n        bsMonth = (bsMonth !== 1) ? bsMonth - 1 : 12;\r\n        const bsMonthDays: any = getBsMonthDays(bsYear, bsMonth);\r\n        bsDate = bsMonthDays - (bsMonthFirstAdDate.getDate() - adDate) + 1;\r\n    } else {\r\n        bsDate = adDate - bsMonthFirstAdDate.getDate() + 1;\r\n    }\r\n\r\n    return { bsYear, bsMonth, bsDate };\r\n}\r\n\r\n\r\nexport const convertBStoAD = (bsYear: any, bsMonth: any, bsDate: any) => {\r\n    const daysNumFromMinBsYear: any = getTotalDaysNumFromMinBsYear(bsYear, bsMonth, bsDate);\r\n    const adDate = new Date(calendarData.minAdDateEqBsDate.ad.year, calendarData.minAdDateEqBsDate.ad.month, calendarData.minAdDateEqBsDate.ad.date - 1);\r\n    adDate.setDate(adDate.getDate() + daysNumFromMinBsYear);\r\n    return adDate;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}