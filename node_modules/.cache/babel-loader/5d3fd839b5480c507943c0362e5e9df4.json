{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\S.K. COMPUTER\\\\OneDrive\\\\Desktop\\\\react-project\\\\src\\\\core\\\\Public\\\\Finance\\\\Visualization\\\\LineChart\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport GeneralChart from \"components/UI/Charts/General\";\nimport CustomCheckBox from \"components/UI/CustomCheckbox\";\nimport { getNumberByLanguage } from \"i18n/i18n\";\nimport React, { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { getYearFromDate } from \"utils/utilsFunction/date-converter\";\nimport DataTable from \"./DataTable\";\nconst config = {\n  name: \"\",\n  type: \"line\",\n  smooth: true,\n  data: []\n};\n\nconst LineChart = props => {\n  _s();\n\n  const {\n    selected,\n    setSelected\n  } = props;\n  const {\n    t\n  } = useTranslation();\n  const [chartData, setChartData] = useState();\n  const [seriesData, setSeriesData] = useState();\n  const [tableData, setTableData] = useState();\n  const options = [{\n    id: \"actual_income\",\n    name: `${t(\"home:actual\")} ${t(\"home:income\")}`,\n    color: \"#4DFFFF\"\n  }, {\n    id: \"actual_expense\",\n    name: `${t(\"home:actual\")} ${t(\"home:expense\")}`,\n    color: \"#FF4D4D\"\n  }, {\n    id: \"actual_cf\",\n    name: `${t(\"home:accf\")}`,\n    color: \"#c47df7\"\n  }, {\n    id: \"expected_income\",\n    name: `${t(\"home:expected\")} ${t(\"home:income\")}`,\n    color: \"#fbc757\"\n  }, {\n    id: \"expected_expense\",\n    name: `${t(\"home:expected\")} ${t(\"home:expense\")}`,\n    color: \"#041C44\"\n  }, {\n    id: \"expected_cf\",\n    name: `${t(\"home:eccf\")}`,\n    color: \"#1d9a36\"\n  }];\n  useEffect(() => {\n    var _props$incomeExpenseD, _props$incomeExpenseD2, _props$incomeExpenseD3, _props$incomeExpenseD4, _props$incomeExpenseD5, _props$incomeExpenseD6, _props$incomeExpenseD7, _props$incomeExpenseD8, _props$expenseCF, _props$expenseCF$expe, _props$expenseCF2, _props$expenseCF2$exp, _props$expenseCF3, _props$expenseCF3$exp;\n\n    const newData = {\n      years: (_props$incomeExpenseD = props.incomeExpenseData) === null || _props$incomeExpenseD === void 0 ? void 0 : (_props$incomeExpenseD2 = _props$incomeExpenseD.income) === null || _props$incomeExpenseD2 === void 0 ? void 0 : _props$incomeExpenseD2.map(item => `${t(\"home:year\")} ${getNumberByLanguage(item.year_num)} -  ${getNumberByLanguage(getYearFromDate(item.year_from))} - ${getNumberByLanguage(getYearFromDate(item.year_to))}`),\n      actual_income: (_props$incomeExpenseD3 = props.incomeExpenseData) === null || _props$incomeExpenseD3 === void 0 ? void 0 : (_props$incomeExpenseD4 = _props$incomeExpenseD3.income) === null || _props$incomeExpenseD4 === void 0 ? void 0 : _props$incomeExpenseD4.map(item => item.total_amount),\n      actual_expense: (_props$incomeExpenseD5 = props.incomeExpenseData) === null || _props$incomeExpenseD5 === void 0 ? void 0 : (_props$incomeExpenseD6 = _props$incomeExpenseD5.expense) === null || _props$incomeExpenseD6 === void 0 ? void 0 : _props$incomeExpenseD6.map(item => item.total_amount),\n      actual_cf: (_props$incomeExpenseD7 = props.incomeExpenseData) === null || _props$incomeExpenseD7 === void 0 ? void 0 : (_props$incomeExpenseD8 = _props$incomeExpenseD7.cf) === null || _props$incomeExpenseD8 === void 0 ? void 0 : _props$incomeExpenseD8.map(item => item.cf),\n      expected_income: (_props$expenseCF = props.expenseCF) === null || _props$expenseCF === void 0 ? void 0 : (_props$expenseCF$expe = _props$expenseCF.expected_income) === null || _props$expenseCF$expe === void 0 ? void 0 : _props$expenseCF$expe.map(item => item.income_amount),\n      expected_expense: (_props$expenseCF2 = props.expenseCF) === null || _props$expenseCF2 === void 0 ? void 0 : (_props$expenseCF2$exp = _props$expenseCF2.expected_expense) === null || _props$expenseCF2$exp === void 0 ? void 0 : _props$expenseCF2$exp.map(item => item.expense_amount),\n      expected_cf: (_props$expenseCF3 = props.expenseCF) === null || _props$expenseCF3 === void 0 ? void 0 : (_props$expenseCF3$exp = _props$expenseCF3.expected_cf) === null || _props$expenseCF3$exp === void 0 ? void 0 : _props$expenseCF3$exp.map(item => item.cf)\n    };\n    setChartData(newData);\n  }, [props.incomeExpenseData, props.actualCF, props.expenseCF]);\n\n  const handleSelect = name => {\n    if (selected !== null && selected !== void 0 && selected.includes(name)) {\n      const filteredData = selected.filter(item => item !== name);\n      setSelected(filteredData);\n    } else {\n      setSelected([...selected, name]);\n    }\n  };\n\n  useEffect(() => {\n    const selectedData = selected.map(item => {\n      var _options$find, _options$find2;\n\n      return { ...config,\n        name: ((_options$find = options.find(opt => opt.id === item)) === null || _options$find === void 0 ? void 0 : _options$find.name) || \"\",\n        data: chartData && chartData[item],\n        itemStyle: {\n          color: ((_options$find2 = options.find(opt => opt.id === item)) === null || _options$find2 === void 0 ? void 0 : _options$find2.color) || \"\"\n        }\n      };\n    });\n    const tableData = selected.map(item => {\n      var _options$find3, _options$find4;\n\n      return {\n        name: ((_options$find3 = options.find(opt => opt.id === item)) === null || _options$find3 === void 0 ? void 0 : _options$find3.name) || \"\",\n        color: ((_options$find4 = options.find(opt => opt.id === item)) === null || _options$find4 === void 0 ? void 0 : _options$find4.color) || \"\",\n        data: chartData && chartData[item]\n      };\n    });\n    setSeriesData(selectedData);\n    setTableData(tableData);\n  }, [chartData, selected]);\n  const optionData = {\n    tooltip: {\n      trigger: \"axis\",\n      axisPointer: {\n        type: \"shadow\"\n      }\n    },\n    legend: {\n      show: false\n    },\n    grid: {\n      left: \"3%\",\n      right: \"5%\",\n      bottom: \"3%\",\n      top: \"6%\",\n      containLabel: true\n    },\n    xAxis: {\n      type: \"category\",\n      boundaryGap: false,\n      data: chartData === null || chartData === void 0 ? void 0 : chartData.years,\n      axisLabel: {\n        formatter: function (name) {\n          var _name$split$;\n\n          return name === null || name === void 0 ? void 0 : (_name$split$ = name.split(\"-\")[0]) === null || _name$split$ === void 0 ? void 0 : _name$split$.replace(\"Year\", \"\");\n        }\n      }\n    },\n    yAxis: {\n      type: \"value\",\n      axisLabel: {\n        formatter: function (name) {\n          return getNumberByLanguage(name);\n        }\n      }\n    },\n    series: seriesData\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GeneralChart, {\n    minHeight: 300,\n    options: optionData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }), (tableData === null || tableData === void 0 ? void 0 : tableData.length) > 0 && /*#__PURE__*/React.createElement(DataTable, {\n    years: chartData === null || chartData === void 0 ? void 0 : chartData.years,\n    tableData: tableData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 35\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-3 chartOptions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, \"Select\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, \"Visualization Parameters\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, options.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CustomCheckBox, {\n    id: \"\" + item.id,\n    label: item.name,\n    onChange: e => handleSelect(item.id),\n    checked: selected.includes(item.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }))))));\n};\n\n_s(LineChart, \"jjiPfI2O0qjqui6f8kW3cEOEUvI=\", false, function () {\n  return [useTranslation];\n});\n\n_c = LineChart;\n\nconst mapStateToProps = state => ({\n  language: state.i18nextData.languageType,\n  incomeExpenseData: state.reportData.incomeExpenseData.data,\n  actualCF: state.reportData.actualCumulativeCashFlowData.data,\n  expenseCF: state.reportData.expenseCumulativeCashFlowData.data\n});\n\nconst mapDispatchToProps = {};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(LineChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LineChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/S.K. COMPUTER/OneDrive/Desktop/react-project/src/core/Public/Finance/Visualization/LineChart/index.tsx"],"names":["GeneralChart","CustomCheckBox","getNumberByLanguage","React","useState","useEffect","useTranslation","connect","getYearFromDate","DataTable","config","name","type","smooth","data","LineChart","props","selected","setSelected","t","chartData","setChartData","seriesData","setSeriesData","tableData","setTableData","options","id","color","newData","years","incomeExpenseData","income","map","item","year_num","year_from","year_to","actual_income","total_amount","actual_expense","expense","actual_cf","cf","expected_income","expenseCF","income_amount","expected_expense","expense_amount","expected_cf","actualCF","handleSelect","includes","filteredData","filter","selectedData","find","opt","itemStyle","optionData","tooltip","trigger","axisPointer","legend","show","grid","left","right","bottom","top","containLabel","xAxis","boundaryGap","axisLabel","formatter","split","replace","yAxis","series","length","e","mapStateToProps","state","language","i18nextData","languageType","reportData","actualCumulativeCashFlowData","expenseCumulativeCashFlowData","mapDispatchToProps","connector"],"mappings":"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","sourcesContent":["import GeneralChart from \"components/UI/Charts/General\";\r\nimport CustomCheckBox from \"components/UI/CustomCheckbox\";\r\nimport { getNumberByLanguage } from \"i18n/i18n\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { RootState } from \"store/root-reducer\";\r\nimport { getYearFromDate } from \"utils/utilsFunction/date-converter\";\r\nimport DataTable from \"./DataTable\";\r\n\r\nconst config = {\r\n  name: \"\",\r\n  type: \"line\",\r\n  smooth: true,\r\n  data: [],\r\n};\r\n\r\ntype SeriesConfig = {\r\n  name: string;\r\n  type: string;\r\n  smooth: boolean;\r\n  data: (string | number)[];\r\n};\r\n\r\ntype ChartDataType = {\r\n  years: (string | number)[];\r\n  actual_income?: (string | number)[];\r\n  actual_expense?: (string | number)[];\r\n  actual_cf?: (string | number)[];\r\n  expected_income?: (string | number)[];\r\n  expected_expense?: (string | number)[];\r\n  expected_cf?: (string | number)[];\r\n};\r\n\r\ninterface Props extends PropsFromRedux {\r\n  selected: string[];\r\n  setSelected: any\r\n}\r\n\r\nconst LineChart = (props: Props) => {\r\n  const { selected , setSelected} = props;\r\n  const { t } = useTranslation();\r\n  const [chartData, setChartData] = useState<ChartDataType>();\r\n\r\n  const [seriesData, setSeriesData] = useState<SeriesConfig[]>();\r\n\r\n  const [tableData, setTableData] = useState<any>();\r\n \r\n\r\n  const options = [\r\n    {\r\n      id: \"actual_income\",\r\n      name: `${t(\"home:actual\")} ${t(\"home:income\")}`,\r\n      color: \"#4DFFFF\",\r\n    },\r\n    {\r\n      id: \"actual_expense\",\r\n      name: `${t(\"home:actual\")} ${t(\"home:expense\")}`,\r\n      color: \"#FF4D4D\",\r\n    },\r\n    {\r\n      id: \"actual_cf\",\r\n      name: `${t(\"home:accf\")}`,\r\n      color: \"#c47df7\",\r\n    },\r\n    { id: \"expected_income\", name: `${t(\"home:expected\")} ${t(\"home:income\")}`, color: \"#fbc757\" },\r\n    {\r\n      id: \"expected_expense\",\r\n      name: `${t(\"home:expected\")} ${t(\"home:expense\")}`,\r\n      color: \"#041C44\",\r\n    },\r\n    {\r\n      id: \"expected_cf\",\r\n      name: `${t(\"home:eccf\")}`,\r\n      color: \"#1d9a36\",\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const newData: ChartDataType = {\r\n      years: props.incomeExpenseData?.income?.map(\r\n        (item) =>\r\n          `${t(\"home:year\")} ${getNumberByLanguage(item.year_num)} -  ${getNumberByLanguage(\r\n            getYearFromDate(item.year_from)\r\n          )} - ${getNumberByLanguage(getYearFromDate(item.year_to))}`\r\n      ),\r\n      actual_income: props.incomeExpenseData?.income?.map((item) => item.total_amount),\r\n      actual_expense: props.incomeExpenseData?.expense?.map((item) => item.total_amount),\r\n      actual_cf: props.incomeExpenseData?.cf?.map((item) => item.cf),\r\n      expected_income: props.expenseCF?.expected_income?.map((item) => item.income_amount),\r\n      expected_expense: props.expenseCF?.expected_expense?.map((item) => item.expense_amount),\r\n      expected_cf: props.expenseCF?.expected_cf?.map((item) => item.cf),\r\n    };\r\n    setChartData(newData);\r\n  }, [props.incomeExpenseData, props.actualCF, props.expenseCF]);\r\n\r\n  const handleSelect = (name: string) => {\r\n    if (selected?.includes(name)) {\r\n      const filteredData = selected.filter((item) => item !== name);\r\n      setSelected(filteredData);\r\n    } else {\r\n      setSelected([...selected, name]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const selectedData = selected.map((item) => ({\r\n      ...config,\r\n      name: options.find((opt) => opt.id === item)?.name || \"\",\r\n      data: chartData && chartData[item],\r\n      itemStyle: { color: options.find((opt) => opt.id === item)?.color || \"\" },\r\n    }));\r\n\r\n    const tableData = selected.map((item) => ({\r\n      name: options.find((opt) => opt.id === item)?.name || \"\",\r\n      color: options.find((opt) => opt.id === item)?.color || \"\",\r\n      data: chartData && chartData[item],\r\n    }));\r\n\r\n    setSeriesData(selectedData);\r\n    setTableData(tableData);\r\n  }, [chartData, selected]);\r\n\r\n  const optionData = {\r\n    tooltip: {\r\n      trigger: \"axis\",\r\n      axisPointer: {\r\n        type: \"shadow\",\r\n      },\r\n    },\r\n    legend: {\r\n      show: false,\r\n    },\r\n    grid: {\r\n      left: \"3%\",\r\n      right: \"5%\",\r\n      bottom: \"3%\",\r\n      top: \"6%\",\r\n      containLabel: true,\r\n    },\r\n    xAxis: {\r\n      type: \"category\",\r\n      boundaryGap: false,\r\n      data: chartData?.years,\r\n      axisLabel: {\r\n        formatter: function (name) {\r\n          return name?.split(\"-\")[0]?.replace(\"Year\", \"\");\r\n        },\r\n      },\r\n    },\r\n    yAxis: {\r\n      type: \"value\",\r\n      axisLabel: {\r\n        formatter: function (name) {\r\n          return getNumberByLanguage(name);\r\n        },\r\n      },\r\n    },\r\n    series: seriesData,\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-9\">\r\n        <GeneralChart minHeight={300} options={optionData} />\r\n        {tableData?.length > 0 && <DataTable years={chartData?.years} tableData={tableData} />}\r\n      </div>\r\n      <div className=\"col-md-3 chartOptions\">\r\n        <h6>Select</h6>\r\n        <p>Visualization Parameters</p>\r\n\r\n        <ul>\r\n          {options.map((item) => (\r\n            <li key={item.id}>\r\n              <CustomCheckBox\r\n                id={\"\" + item.id}\r\n                label={item.name}\r\n                onChange={(e) => handleSelect(item.id)}\r\n                checked={selected.includes(item.id)}\r\n              />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  language: state.i18nextData.languageType,\r\n  incomeExpenseData: state.reportData.incomeExpenseData.data,\r\n  actualCF: state.reportData.actualCumulativeCashFlowData.data,\r\n  expenseCF: state.reportData.expenseCumulativeCashFlowData.data,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(LineChart);\r\n"]},"metadata":{},"sourceType":"module"}