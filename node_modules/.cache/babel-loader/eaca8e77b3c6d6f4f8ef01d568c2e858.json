{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\S.K. COMPUTER\\\\OneDrive\\\\Desktop\\\\react-project\\\\src\\\\core\\\\Protected\\\\Maintainance\\\\ManageCategories\\\\ManageCategories\\\\Form.tsx\",\n    _s = $RefreshSig$();\n\nimport FormikValidationError from \"components/React/FormikValidationError/FormikValidationError\";\nimport toast from \"components/React/ToastNotifier/ToastNotifier\";\nimport Button from \"components/UI/Forms/Buttons\";\nimport { useFormik } from \"formik\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getComponentCategoriesAction } from \"store/modules/componentCategories/getComponentCategories\";\nimport { postComponentCategoriesAction } from \"store/modules/componentCategories/postComponentCategories\";\nimport { updateComponentCategoriesAction } from \"store/modules/componentCategories/updateComponentCategories\";\nimport * as Yup from \"yup\";\nimport { useTranslation } from \"react-i18next\";\nconst validationSchema = Yup.object({\n  name: Yup.string().required(\"This field is required\")\n});\n\nconst CategoriesForm = props => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [initialData, setInitialData] = React.useState({\n    name: \"\"\n  });\n  const {\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  } = useFormik({\n    enableReinitialize: true,\n    initialValues: initialData,\n    validationSchema: validationSchema,\n    onSubmit: async (values, _ref) => {\n      let {\n        resetForm\n      } = _ref;\n      let response;\n\n      if (props.editData) {\n        response = await props.updateComponentCategoriesAction(props.editData.id, values);\n      } else {\n        response = await props.postComponentCategoriesAction(values);\n      }\n\n      if (response.status === 201 || response.status === 200) {\n        if (response.status === 201) {\n          resetForm();\n          toast.success(t(\"home:postSuccess\"));\n          props.getComponentCategoriesAction();\n        } else {\n          setInitialData({\n            name: \"\"\n          });\n          props.getComponentCategoriesAction();\n          toast.success(t(\"home:updateSuccess\"));\n        }\n\n        props.setEditData(null);\n      }\n    }\n  });\n  React.useEffect(() => {\n    if (props.editData) {\n      setInitialData({ ...props.editData\n      });\n    }\n  }, [props.editData]);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      handleSubmit(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row rate_form align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"\",\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, t(\"maintainance:title\"), \" :\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"form-control\",\n    name: \"name\",\n    value: values.name,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormikValidationError, {\n    name: \"name\",\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12 mt-2 text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn custom-btn\",\n    text: t(\"home:save\"),\n    type: \"submit\",\n    disabled: props.postLoading || props.updateLoading,\n    loading: props.postLoading || props.updateLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(CategoriesForm, \"od0DrYg3pocwZuJen8+ENylrGNk=\", false, function () {\n  return [useTranslation, useFormik];\n});\n\n_c = CategoriesForm;\n\nconst mapStateToProps = state => ({\n  language: state.i18nextData.languageType,\n  postLoading: state.componentCategories.postComponentCategories.isFetching,\n  updateLoading: state.componentCategories.updateComponentCategories.isFetching\n});\n\nconst mapDispatchToProps = {\n  postComponentCategoriesAction: postComponentCategoriesAction,\n  updateComponentCategoriesAction: updateComponentCategoriesAction,\n  getComponentCategoriesAction: getComponentCategoriesAction\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(CategoriesForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CategoriesForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/S.K. COMPUTER/OneDrive/Desktop/react-project/src/core/Protected/Maintainance/ManageCategories/ManageCategories/Form.tsx"],"names":["FormikValidationError","toast","Button","useFormik","React","connect","getComponentCategoriesAction","postComponentCategoriesAction","updateComponentCategoriesAction","Yup","useTranslation","validationSchema","object","name","string","required","CategoriesForm","props","t","initialData","setInitialData","useState","values","errors","touched","handleChange","handleBlur","handleSubmit","enableReinitialize","initialValues","onSubmit","resetForm","response","editData","id","status","success","setEditData","useEffect","e","preventDefault","postLoading","updateLoading","mapStateToProps","state","language","i18nextData","languageType","componentCategories","postComponentCategories","isFetching","updateComponentCategories","mapDispatchToProps","connector"],"mappings":"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","sourcesContent":["import FormikValidationError from \"components/React/FormikValidationError/FormikValidationError\";\r\nimport toast from \"components/React/ToastNotifier/ToastNotifier\";\r\nimport Button from \"components/UI/Forms/Buttons\";\r\nimport { useFormik } from \"formik\";\r\nimport React from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { getComponentCategoriesAction } from \"store/modules/componentCategories/getComponentCategories\";\r\nimport { postComponentCategoriesAction } from \"store/modules/componentCategories/postComponentCategories\";\r\nimport { updateComponentCategoriesAction } from \"store/modules/componentCategories/updateComponentCategories\";\r\nimport { RootState } from \"store/root-reducer\";\r\nimport * as Yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string().required(\"This field is required\"),\r\n});\r\n\r\ninterface Props extends PropsFromRedux {\r\n  editData: any;\r\n  setEditData: any;\r\n}\r\n\r\nconst CategoriesForm = (props: Props) => {\r\n  const { t } = useTranslation();\r\n  const [initialData, setInitialData] = React.useState({\r\n    name: \"\",\r\n  });\r\n\r\n  const { values, errors, touched, handleChange, handleBlur, handleSubmit } = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: initialData,\r\n    validationSchema: validationSchema,\r\n    onSubmit: async (values, { resetForm }) => {\r\n      let response;\r\n\r\n      if (props.editData) {\r\n        response = await props.updateComponentCategoriesAction(props.editData.id, values);\r\n      } else {\r\n        response = await props.postComponentCategoriesAction(values);\r\n      }\r\n\r\n      if (response.status === 201 || response.status === 200) {\r\n        if (response.status === 201) {\r\n          resetForm();\r\n          toast.success(t(\"home:postSuccess\"));\r\n          props.getComponentCategoriesAction();\r\n        } else {\r\n          setInitialData({\r\n            name: \"\",\r\n          });\r\n          props.getComponentCategoriesAction();\r\n          toast.success(t(\"home:updateSuccess\"));\r\n        }\r\n        props.setEditData(null);\r\n      }\r\n    },\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (props.editData) {\r\n      setInitialData({\r\n        ...props.editData,\r\n      });\r\n    }\r\n  }, [props.editData]);\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        handleSubmit(e);\r\n      }}\r\n    >\r\n      <div className=\"row rate_form align-items-center\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"form-group \">\r\n            <label htmlFor=\"\" className=\"mr-1\">\r\n              {t(\"maintainance:title\")} :\r\n            </label>\r\n\r\n            <textarea\r\n              className=\"form-control\"\r\n              name=\"name\"\r\n              value={values.name}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            />\r\n            <FormikValidationError name=\"name\" errors={errors} touched={touched} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col-md-12 mt-2 text-right\">\r\n          <Button\r\n            className=\"btn custom-btn\"\r\n            text={t(\"home:save\")}\r\n            type=\"submit\"\r\n            disabled={props.postLoading || props.updateLoading}\r\n            loading={props.postLoading || props.updateLoading}\r\n          />\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  language: state.i18nextData.languageType,\r\n  postLoading: state.componentCategories.postComponentCategories.isFetching,\r\n  updateLoading: state.componentCategories.updateComponentCategories.isFetching,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  postComponentCategoriesAction: postComponentCategoriesAction,\r\n  updateComponentCategoriesAction: updateComponentCategoriesAction,\r\n  getComponentCategoriesAction: getComponentCategoriesAction,\r\n};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(CategoriesForm);\r\n"]},"metadata":{},"sourceType":"module"}