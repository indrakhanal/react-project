{"ast":null,"code":"import { apiList } from \"../../actionNames\";\nimport initDispatchTypes from \"../../helper/default-action-type\";\nvar i18nLanguage;\n\n(function (i18nLanguage) {\n  i18nLanguage[\"EN\"] = \"en\";\n  i18nLanguage[\"NE\"] = \"nep\";\n})(i18nLanguage || (i18nLanguage = {}));\n\nconst i18nextActions = {\n  LANG_CHANGE_INIT: 'I18N_INIT',\n  LANG_CHANGE_SUCCESS: 'I18N_SUCCESS',\n  LANG_CHANGE_FAIL: 'I18N_FAIL'\n};\nconst i18nextObject = {\n  languageType: i18nLanguage.EN\n};\n\nconst seti18nLanguage = language => {\n  return localStorage.setItem(btoa(btoa(\"i18n\")), btoa(btoa(language)));\n};\n\nexport const geti18nLanguage = () => {\n  try {\n    return atob(atob(localStorage.getItem(btoa(btoa(\"i18n\"))) || \"\"));\n  } catch (e) {\n    console.error(\"Error getting language\", e);\n    return \"\";\n  }\n};\nexport const switchI18nLanguage = payload => async dispatch => {\n  const apiDetails = apiList.local.i18n; // Init dispatch type\n\n  const dispatchTypes = initDispatchTypes(apiDetails.actionName);\n\n  try {\n    // Store in redux\n    seti18nLanguage(payload);\n    dispatch({\n      type: dispatchTypes.successDispatch,\n      payload: payload\n    });\n  } catch (e) {\n    console.error(\"Error switching language\", e);\n    dispatch({\n      type: dispatchTypes.failureDispatch,\n      payload: payload\n    });\n    return;\n  }\n};\nexport default function i18nextReducer() {\n  let store = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { ...i18nextObject\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const state = Object.assign({}, store);\n\n  switch (action.type) {\n    case i18nextActions.LANG_CHANGE_SUCCESS:\n      {\n        return { ...state,\n          languageType: action.payload\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["C:/Users/S.K. COMPUTER/OneDrive/Desktop/react-project/src/store/modules/i18n/i18n.ts"],"names":["apiList","initDispatchTypes","i18nLanguage","i18nextActions","LANG_CHANGE_INIT","LANG_CHANGE_SUCCESS","LANG_CHANGE_FAIL","i18nextObject","languageType","EN","seti18nLanguage","language","localStorage","setItem","btoa","geti18nLanguage","atob","getItem","e","console","error","switchI18nLanguage","payload","dispatch","apiDetails","local","i18n","dispatchTypes","actionName","type","successDispatch","failureDispatch","i18nextReducer","store","action","state","Object","assign"],"mappings":"AAEA,SAASA,OAAT,QAAwB,mBAAxB;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;IAEKC,Y;;WAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y;;AASL,MAAMC,cAAc,GAAG;AACnBC,EAAAA,gBAAgB,EAAE,WADC;AAEnBC,EAAAA,mBAAmB,EAAE,cAFF;AAGnBC,EAAAA,gBAAgB,EAAE;AAHC,CAAvB;AAMA,MAAMC,aAAgC,GAAG;AACrCC,EAAAA,YAAY,EAAEN,YAAY,CAACO;AADU,CAAzC;;AAIA,MAAMC,eAAe,GAAIC,QAAD,IAAsB;AAC1C,SAAOC,YAAY,CAACC,OAAb,CAAqBC,IAAI,CAACA,IAAI,CAAC,MAAD,CAAL,CAAzB,EAAyCA,IAAI,CAACA,IAAI,CAACH,QAAD,CAAL,CAA7C,CAAP;AACH,CAFD;;AAIA,OAAO,MAAMI,eAAe,GAAG,MAAM;AACjC,MAAI;AACA,WAAOC,IAAI,CAACA,IAAI,CAACJ,YAAY,CAACK,OAAb,CAAsBH,IAAI,CAACA,IAAI,CAAC,MAAD,CAAL,CAA1B,KAA8C,EAA/C,CAAL,CAAX;AACH,GAFD,CAEE,OAAOI,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd,EAAwCF,CAAxC;AACA,WAAO,EAAP;AACH;AACJ,CAPM;AASP,OAAO,MAAMG,kBAAkB,GAAIC,OAAD,IAA+B,MAAOC,QAAP,IAA8B;AAC3F,QAAMC,UAAU,GAAGxB,OAAO,CAACyB,KAAR,CAAcC,IAAjC,CAD2F,CAG3F;;AACA,QAAMC,aAAa,GAAG1B,iBAAiB,CAACuB,UAAU,CAACI,UAAZ,CAAvC;;AAEA,MAAI;AACA;AACAlB,IAAAA,eAAe,CAACY,OAAD,CAAf;AACAC,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAEF,aAAa,CAACG,eAAtB;AAAuCR,MAAAA,OAAO,EAAEA;AAAhD,KAAD,CAAR;AACH,GAJD,CAIE,OAAOJ,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAc,0BAAd,EAA0CF,CAA1C;AACAK,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAEF,aAAa,CAACI,eAAtB;AAAuCT,MAAAA,OAAO,EAAEA;AAAhD,KAAD,CAAR;AACA;AACH;AACJ,CAfM;AAiBP,eAAe,SAASU,cAAT,GAAmH;AAAA,MAA3FC,KAA2F,uEAAhE,EAAE,GAAG1B;AAAL,GAAgE;AAAA,MAA1C2B,MAA0C;AAC9H,QAAMC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,CAAd;;AAEA,UAAQC,MAAM,CAACL,IAAf;AACI,SAAK1B,cAAc,CAACE,mBAApB;AAAyC;AACrC,eAAO,EACH,GAAG8B,KADA;AAEH3B,UAAAA,YAAY,EAAE0B,MAAM,CAACZ;AAFlB,SAAP;AAIH;;AACD;AAAS;AACL,eAAOa,KAAP;AACH;AATL;AAWH","sourcesContent":["import { Dispatch } from \"redux\";\r\nimport { AppThunk } from \"../..\";\r\nimport { apiList } from \"../../actionNames\";\r\nimport initDispatchTypes from \"../../helper/default-action-type\";\r\n\r\nenum i18nLanguage {\r\n    EN = \"en\",\r\n    NE = \"nep\"\r\n}\r\nexport interface i18nextReduxState {\r\n    /** Current selected language 'en' or 'nep' */\r\n    languageType: i18nLanguage;\r\n}\r\n\r\nconst i18nextActions = {\r\n    LANG_CHANGE_INIT: 'I18N_INIT',\r\n    LANG_CHANGE_SUCCESS: 'I18N_SUCCESS',\r\n    LANG_CHANGE_FAIL: 'I18N_FAIL'\r\n}\r\n\r\nconst i18nextObject: i18nextReduxState = {\r\n    languageType: i18nLanguage.EN\r\n};\r\n\r\nconst seti18nLanguage = (language: string) => {\r\n    return localStorage.setItem(btoa(btoa(\"i18n\")), btoa(btoa(language)))\r\n}\r\n\r\nexport const geti18nLanguage = () => {\r\n    try {\r\n        return atob(atob(localStorage.getItem((btoa(btoa(\"i18n\")))) || \"\"));\r\n    } catch (e) {\r\n        console.error(\"Error getting language\", e);\r\n        return \"\"\r\n    }\r\n}\r\n\r\nexport const switchI18nLanguage = (payload: string): AppThunk => async (dispatch: Dispatch) => {\r\n    const apiDetails = apiList.local.i18n;\r\n\r\n    // Init dispatch type\r\n    const dispatchTypes = initDispatchTypes(apiDetails.actionName);\r\n\r\n    try {\r\n        // Store in redux\r\n        seti18nLanguage(payload);\r\n        dispatch({ type: dispatchTypes.successDispatch, payload: payload });\r\n    } catch (e) {\r\n        console.error(\"Error switching language\", e);\r\n        dispatch({ type: dispatchTypes.failureDispatch, payload: payload });\r\n        return\r\n    }\r\n}\r\n\r\nexport default function i18nextReducer(store: i18nextReduxState = { ...i18nextObject }, action: DefaultAction): i18nextReduxState {\r\n    const state = Object.assign({}, store);\r\n\r\n    switch (action.type) {\r\n        case i18nextActions.LANG_CHANGE_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                languageType: action.payload,\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}