{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\S.K. COMPUTER\\\\OneDrive\\\\Desktop\\\\react-project\\\\src\\\\core\\\\Public\\\\Home\\\\IncomeExpend\\\\IncomeExpendGraphThisYear.tsx\",\n    _s = $RefreshSig$();\n\nimport GeneralChart from \"components/UI/Charts/General\";\nimport { getFiscalYearData, getMonthByLanguageAndScheme, getNumberByLanguage } from \"i18n/i18n\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport IncomeExpendTable from \"./IncomeExpendTable\";\nimport { useTranslation } from \"react-i18next\";\n\nconst IncomeExpendGraphThisYear = props => {\n  _s();\n\n  const {\n    incomeExpenseData\n  } = props;\n  const {\n    t\n  } = useTranslation([\"home\"]);\n  const [months, setMonths] = useState([]);\n  const [income, setIncome] = useState([]);\n  const [expense, setExpense] = useState([]);\n  useEffect(() => {\n    if (incomeExpenseData && props.intervalData) {\n      var _props$schemeDetails;\n\n      const fiscalYearArray = getFiscalYearData(props.intervalData, (_props$schemeDetails = props.schemeDetails) === null || _props$schemeDetails === void 0 ? void 0 : _props$schemeDetails.system_date_format);\n      const yearArray = fiscalYearArray === null || fiscalYearArray === void 0 ? void 0 : fiscalYearArray.map(item => {\n        var _props$schemeDetails2;\n\n        return getMonthByLanguageAndScheme(item, (_props$schemeDetails2 = props.schemeDetails) === null || _props$schemeDetails2 === void 0 ? void 0 : _props$schemeDetails2.system_date_format);\n      });\n      const incomeArray = fiscalYearArray === null || fiscalYearArray === void 0 ? void 0 : fiscalYearArray.map(item => {\n        var _incomeExpenseData$in, _incomeExpenseData$in2;\n\n        return ((_incomeExpenseData$in = incomeExpenseData.income) === null || _incomeExpenseData$in === void 0 ? void 0 : (_incomeExpenseData$in2 = _incomeExpenseData$in.find(inc => {\n          var _inc$date__month, _inc$date__month$toSt;\n\n          return +inc.date__month < 10 ? +((_inc$date__month = inc.date__month) === null || _inc$date__month === void 0 ? void 0 : (_inc$date__month$toSt = _inc$date__month.toString()) === null || _inc$date__month$toSt === void 0 ? void 0 : _inc$date__month$toSt.replace(\"0\", \"\")) === item : +inc.date__month === item;\n        })) === null || _incomeExpenseData$in2 === void 0 ? void 0 : _incomeExpenseData$in2.total_amount) || 0;\n      });\n      const expenseArray = fiscalYearArray === null || fiscalYearArray === void 0 ? void 0 : fiscalYearArray.map(item => {\n        var _incomeExpenseData$ex, _incomeExpenseData$ex2;\n\n        return ((_incomeExpenseData$ex = incomeExpenseData.expense) === null || _incomeExpenseData$ex === void 0 ? void 0 : (_incomeExpenseData$ex2 = _incomeExpenseData$ex.find(inc => {\n          var _inc$date__month2, _inc$date__month2$toS;\n\n          return +inc.date__month < 10 ? +((_inc$date__month2 = inc.date__month) === null || _inc$date__month2 === void 0 ? void 0 : (_inc$date__month2$toS = _inc$date__month2.toString()) === null || _inc$date__month2$toS === void 0 ? void 0 : _inc$date__month2$toS.replace(\"0\", \"\")) === item : +inc.date__month === item;\n        })) === null || _incomeExpenseData$ex2 === void 0 ? void 0 : _incomeExpenseData$ex2.total_amount) || 0;\n      });\n      setMonths(yearArray);\n      setIncome(incomeArray || []);\n      setExpense(expenseArray || []);\n    }\n  }, [incomeExpenseData, props.intervalData]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GeneralChart, {\n    minHeight: 350,\n    options: {\n      tooltip: {\n        trigger: \"axis\",\n        axisPointer: {\n          type: \"shadow\"\n        } // formatter: handleCustomTooltip,\n\n      },\n      legend: {\n        show: false\n      },\n      grid: {\n        left: \"3%\",\n        right: \"4%\",\n        bottom: \"3%\",\n        top: \"8%\",\n        containLabel: true\n      },\n      xAxis: {\n        type: \"category\",\n        boundaryGap: false,\n        data: months,\n        axisLabel: {\n          formatter: function (name) {\n            return (name === null || name === void 0 ? void 0 : name.replace(\"Year\", \"\")) || \"\";\n          }\n        }\n      },\n      yAxis: {\n        type: \"value\",\n        axisLabel: {\n          formatter: function (name) {\n            return getNumberByLanguage(name);\n          }\n        }\n      },\n      series: [{\n        name: `${t(\"home:total\")} ${t(\"home:income\")} `,\n        type: \"line\",\n        smooth: true,\n        data: income,\n        lineStyle: {\n          color: \"#4DFFFF\"\n        }\n      }, {\n        name: `${t(\"home:total\")} ${t(\"home:expense\")} `,\n        type: \"line\",\n        smooth: true,\n        data: expense,\n        lineStyle: {\n          color: \"#ff4D4D\"\n        }\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(IncomeExpendTable, {\n    months: true,\n    heading: months,\n    income: income,\n    expense: expense,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(IncomeExpendGraphThisYear, \"KtXdN744UMNNTAzuwsonK0bghCI=\", false, function () {\n  return [useTranslation];\n});\n\n_c = IncomeExpendGraphThisYear;\n\nconst mapStateToProps = state => ({\n  schemeDetails: state.waterSchemeData.waterSchemeDetailsData.data,\n  incomeExpenseData: state.reportData.incomeExpenseData.data,\n  intervalData: state.waterSchemeData.getYearIntervals.data\n});\n\nconst mapDispatchToProps = {};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(IncomeExpendGraphThisYear);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IncomeExpendGraphThisYear\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/S.K. COMPUTER/OneDrive/Desktop/react-project/src/core/Public/Home/IncomeExpend/IncomeExpendGraphThisYear.tsx"],"names":["GeneralChart","getFiscalYearData","getMonthByLanguageAndScheme","getNumberByLanguage","React","useEffect","useState","connect","IncomeExpendTable","useTranslation","IncomeExpendGraphThisYear","props","incomeExpenseData","t","months","setMonths","income","setIncome","expense","setExpense","intervalData","fiscalYearArray","schemeDetails","system_date_format","yearArray","map","item","incomeArray","find","inc","date__month","toString","replace","total_amount","expenseArray","tooltip","trigger","axisPointer","type","legend","show","grid","left","right","bottom","top","containLabel","xAxis","boundaryGap","data","axisLabel","formatter","name","yAxis","series","smooth","lineStyle","color","mapStateToProps","state","waterSchemeData","waterSchemeDetailsData","reportData","getYearIntervals","mapDispatchToProps","connector"],"mappings":"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","sourcesContent":["import GeneralChart from \"components/UI/Charts/General\";\r\nimport { getFiscalYearData, getMonthByLanguageAndScheme, getNumberByLanguage } from \"i18n/i18n\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { RootState } from \"store/root-reducer\";\r\nimport IncomeExpendTable from \"./IncomeExpendTable\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface Props extends PropsFromRedux {}\r\n\r\nconst IncomeExpendGraphThisYear = (props: Props) => {\r\n  const { incomeExpenseData } = props;\r\n  const { t } = useTranslation([\"home\"]);\r\n\r\n  const [months, setMonths] = useState<(string | number)[]>([]);\r\n  const [income, setIncome] = useState<(string | number)[]>([]);\r\n  const [expense, setExpense] = useState<(string | number)[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (incomeExpenseData && props.intervalData) {\r\n      const fiscalYearArray = getFiscalYearData(\r\n        props.intervalData,\r\n        props.schemeDetails?.system_date_format\r\n      );\r\n\r\n      const yearArray = fiscalYearArray?.map((item) => {\r\n        return getMonthByLanguageAndScheme(item, props.schemeDetails?.system_date_format);\r\n      });\r\n\r\n      const incomeArray = fiscalYearArray?.map((item) => {\r\n        return (\r\n          incomeExpenseData.income?.find((inc) => {\r\n            return +inc.date__month < 10\r\n              ? +inc.date__month?.toString()?.replace(\"0\", \"\") === item\r\n              : +inc.date__month === item;\r\n          })?.total_amount || 0\r\n        );\r\n      });\r\n\r\n      const expenseArray = fiscalYearArray?.map((item) => {\r\n        return (\r\n          incomeExpenseData.expense?.find((inc) => {\r\n            return +inc.date__month < 10\r\n              ? +inc.date__month?.toString()?.replace(\"0\", \"\") === item\r\n              : +inc.date__month === item;\r\n          })?.total_amount || 0\r\n        );\r\n      });\r\n\r\n      setMonths(yearArray);\r\n      setIncome(incomeArray || []);\r\n      setExpense(expenseArray || []);\r\n    }\r\n  }, [incomeExpenseData, props.intervalData]);\r\n\r\n  return (\r\n    <>\r\n      <GeneralChart\r\n        minHeight={350}\r\n        options={{\r\n          tooltip: {\r\n            trigger: \"axis\",\r\n            axisPointer: {\r\n              type: \"shadow\",\r\n            },\r\n            // formatter: handleCustomTooltip,\r\n          },\r\n          legend: {\r\n            show: false,\r\n          },\r\n          grid: {\r\n            left: \"3%\",\r\n            right: \"4%\",\r\n            bottom: \"3%\",\r\n            top: \"8%\",\r\n            containLabel: true,\r\n          },\r\n          xAxis: {\r\n            type: \"category\",\r\n            boundaryGap: false,\r\n            data: months,\r\n            axisLabel: {\r\n              formatter: function (name) {\r\n                return name?.replace(\"Year\", \"\") || \"\";\r\n              },\r\n            },\r\n          },\r\n          yAxis: {\r\n            type: \"value\",\r\n            axisLabel: {\r\n              formatter: function (name) {\r\n                return getNumberByLanguage(name);\r\n              },\r\n            },\r\n          },\r\n          series: [\r\n            {\r\n              name: `${t(\"home:total\")} ${t(\"home:income\")} `,\r\n              type: \"line\",\r\n              smooth: true,\r\n              data: income,\r\n              lineStyle: { color: \"#4DFFFF\" },\r\n            },\r\n            {\r\n              name: `${t(\"home:total\")} ${t(\"home:expense\")} `,\r\n              type: \"line\",\r\n              smooth: true,\r\n              data: expense,\r\n              lineStyle: { color: \"#ff4D4D\" },\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n\r\n      <IncomeExpendTable months heading={months} income={income} expense={expense} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  schemeDetails: state.waterSchemeData.waterSchemeDetailsData.data,\r\n  incomeExpenseData: state.reportData.incomeExpenseData.data,\r\n  intervalData: state.waterSchemeData.getYearIntervals.data,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(IncomeExpendGraphThisYear);\r\n"]},"metadata":{},"sourceType":"module"}