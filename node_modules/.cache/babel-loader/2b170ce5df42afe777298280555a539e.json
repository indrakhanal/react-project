{"ast":null,"code":"var _jsxFileName = \"E:\\\\Smart Tech Solution\\\\React JS\\\\react-project\\\\src\\\\core\\\\Protected\\\\Service\\\\QualityTestParameters\\\\ManageQTParameters\\\\Form.tsx\",\n    _s = $RefreshSig$();\n\nimport FormikValidationError from \"components/React/FormikValidationError/FormikValidationError\";\nimport toast from \"components/React/ToastNotifier/ToastNotifier\";\nimport Button from \"components/UI/Forms/Buttons\";\nimport { useFormik } from \"formik\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getTestParametersAction } from \"store/modules/testParamters/getTestParameters\";\nimport { postTestParametersAction } from \"store/modules/testParamters/postTestParameters\";\nimport { updateTestParametersAction } from \"store/modules/testParamters/updateTestParameters\";\nimport { testParametersInitialValues, testParametersValidationSchema } from \"./schema\";\nimport { useTranslation } from \"react-i18next\";\nimport { PARAMETER_TYPES_OPTIONS } from \"constants/constants\";\nimport StyledSelect from \"components/React/StyledSelect/StyledSelect\";\nimport TooltipLabel from \"components/UI/TooltipLabel\";\n\nconst Form = props => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [initialData, seetInitialData] = React.useState(testParametersInitialValues);\n  React.useEffect(() => {\n    if (props.editData) {\n      seetInitialData({ ...props.editData,\n        types: PARAMETER_TYPES_OPTIONS.find(item => item.value === props.editData.types) || null\n      });\n    }\n  }, [props.editData]);\n  const {\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    setFieldTouched,\n    setFieldValue\n  } = useFormik({\n    enableReinitialize: true,\n    initialValues: initialData,\n    validationSchema: testParametersValidationSchema,\n    onSubmit: async (submitValue, _ref) => {\n      let {\n        resetForm\n      } = _ref;\n      let res;\n\n      if (props.editData) {\n        var _submitValue$types;\n\n        res = await props.updateTestParametersAction(props.editData.id, { ...submitValue,\n          types: (_submitValue$types = submitValue.types) === null || _submitValue$types === void 0 ? void 0 : _submitValue$types.value\n        });\n      } else {\n        var _submitValue$types2;\n\n        res = await props.postTestParametersAction({ ...submitValue,\n          types: (_submitValue$types2 = submitValue.types) === null || _submitValue$types2 === void 0 ? void 0 : _submitValue$types2.value\n        });\n      }\n\n      if (res.status === 201 || res.status === 200) {\n        if (res.status === 201) {\n          resetForm();\n          toast.success(t(\"home:postSuccess\"));\n        } else {\n          props.setEditData(null);\n          seetInitialData(testParametersInitialValues);\n          toast.success(t(\"home:updateSuccess\"));\n        }\n\n        props.getTestParametersAction();\n      } else {\n        var _Object$values;\n\n        const errors = (_Object$values = Object.values(res.data)) === null || _Object$values === void 0 ? void 0 : _Object$values.map(item => {\n          toast.error(item[0]);\n        });\n      }\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      handleSubmit(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"\",\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, t(\"home:parameter\"), \" \", t(\"home:name\"), \":\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form-control\",\n    name: \"parameter_name\",\n    value: values.parameter_name,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormikValidationError, {\n    name: \"parameter_name\",\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"\",\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, t(\"home:unit\"), \":\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form-control\",\n    name: \"unit\",\n    value: values.unit,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormikValidationError, {\n    name: \"unit\",\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"\",\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, t(\"home:ndwq\"), \" \", /*#__PURE__*/React.createElement(TooltipLabel, {\n    id: \"NDWQ\",\n    text: `The quality standards for drinking water`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 32\n    }\n  }), \":\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form-control\",\n    name: \"NDWQS_standard\",\n    value: values.NDWQS_standard,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormikValidationError, {\n    name: \"NDWQS_standard\",\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"\",\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, t(\"home:types\"), \":\"), /*#__PURE__*/React.createElement(StyledSelect, {\n    name: \"types\",\n    value: values === null || values === void 0 ? void 0 : values.types,\n    options: PARAMETER_TYPES_OPTIONS,\n    onChange: _ref2 => {\n      let {\n        name,\n        value\n      } = _ref2;\n      setFieldValue(name, value);\n    },\n    onBlur: () => {\n      setFieldTouched(\"types\", true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormikValidationError, {\n    name: \"types\",\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12 text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn custom-btn  mr-3\",\n    text: t(\"home:save\"),\n    disabled: props.loading,\n    loading: props.loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(Form, \"qpQvQwu4rtArVmcP8S87SFw4xX0=\", false, function () {\n  return [useTranslation, useFormik];\n});\n\n_c = Form;\n\nconst mapStateToProps = state => ({\n  language: state.i18nextData.languageType,\n  loading: state.testParamtersData.postTestParameters.isFetching || state.testParamtersData.updateTestParameters.isFetching\n});\n\nconst mapDispatchToProps = {\n  getTestParametersAction,\n  updateTestParametersAction,\n  postTestParametersAction\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(Form);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Form\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["E:/Smart Tech Solution/React JS/react-project/src/core/Protected/Service/QualityTestParameters/ManageQTParameters/Form.tsx"],"names":["FormikValidationError","toast","Button","useFormik","React","connect","getTestParametersAction","postTestParametersAction","updateTestParametersAction","testParametersInitialValues","testParametersValidationSchema","useTranslation","PARAMETER_TYPES_OPTIONS","StyledSelect","TooltipLabel","Form","props","t","initialData","seetInitialData","useState","useEffect","editData","types","find","item","value","values","errors","touched","handleChange","handleBlur","handleSubmit","setFieldTouched","setFieldValue","enableReinitialize","initialValues","validationSchema","onSubmit","submitValue","resetForm","res","id","status","success","setEditData","Object","data","map","error","e","preventDefault","parameter_name","unit","NDWQS_standard","name","loading","mapStateToProps","state","language","i18nextData","languageType","testParamtersData","postTestParameters","isFetching","updateTestParameters","mapDispatchToProps","connector"],"mappings":"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","sourcesContent":["import FormikValidationError from \"components/React/FormikValidationError/FormikValidationError\";\r\nimport toast from \"components/React/ToastNotifier/ToastNotifier\";\r\nimport Button from \"components/UI/Forms/Buttons\";\r\nimport { useFormik } from \"formik\";\r\nimport React from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { getTestParametersAction } from \"store/modules/testParamters/getTestParameters\";\r\nimport { postTestParametersAction } from \"store/modules/testParamters/postTestParameters\";\r\nimport { updateTestParametersAction } from \"store/modules/testParamters/updateTestParameters\";\r\nimport { RootState } from \"store/root-reducer\";\r\nimport { testParametersInitialValues, testParametersValidationSchema } from \"./schema\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { PARAMETER_TYPES_OPTIONS } from \"constants/constants\";\r\nimport StyledSelect from \"components/React/StyledSelect/StyledSelect\";\r\nimport TooltipLabel from \"components/UI/TooltipLabel\";\r\n\r\ninterface Props extends PropsFromRedux {\r\n  editData: any;\r\n  toggle: any;\r\n  setEditData: any;\r\n}\r\n\r\nconst Form = (props: Props) => {\r\n  const { t } = useTranslation();\r\n\r\n  const [initialData, seetInitialData] = React.useState<typeof testParametersInitialValues>(\r\n    testParametersInitialValues\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (props.editData) {\r\n      seetInitialData({\r\n        ...props.editData,\r\n        types: PARAMETER_TYPES_OPTIONS.find((item) => item.value === props.editData.types) || null,\r\n      });\r\n    }\r\n  }, [props.editData]);\r\n\r\n  const {\r\n    values,\r\n    errors,\r\n    touched,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    setFieldTouched,\r\n    setFieldValue,\r\n  } = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: initialData,\r\n    validationSchema: testParametersValidationSchema,\r\n    onSubmit: async (submitValue, { resetForm }) => {\r\n      let res;\r\n      if (props.editData) {\r\n        res = await props.updateTestParametersAction(props.editData.id, {\r\n          ...submitValue,\r\n          types: submitValue.types?.value,\r\n        });\r\n      } else {\r\n        res = await props.postTestParametersAction({\r\n          ...submitValue,\r\n          types: submitValue.types?.value,\r\n        });\r\n      }\r\n      if (res.status === 201 || res.status === 200) {\r\n        if (res.status === 201) {\r\n          resetForm();\r\n          toast.success(t(\"home:postSuccess\"));\r\n        } else {\r\n          props.setEditData(null);\r\n          seetInitialData(testParametersInitialValues);\r\n          toast.success(t(\"home:updateSuccess\"));\r\n        }\r\n        props.getTestParametersAction();\r\n      } else {\r\n        const errors = Object.values(res.data)?.map((item: any) => {\r\n          toast.error(item[0]);\r\n        });\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        handleSubmit(e);\r\n      }}\r\n    >\r\n      <div className=\"row align-items-center\">\r\n        <div className=\"col-md-3\">\r\n          <div className=\"form-group \">\r\n            <label htmlFor=\"\" className=\"mr-1\">\r\n              {t(\"home:parameter\")} {t(\"home:name\")}:\r\n            </label>\r\n\r\n            <input\r\n              className=\"form-control\"\r\n              name=\"parameter_name\"\r\n              value={values.parameter_name}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            />\r\n            <FormikValidationError name=\"parameter_name\" errors={errors} touched={touched} />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <div className=\"form-group \">\r\n            <label htmlFor=\"\" className=\"mr-1\">\r\n              {t(\"home:unit\")}:\r\n            </label>\r\n\r\n            <input\r\n              className=\"form-control\"\r\n              name=\"unit\"\r\n              value={values.unit}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            />\r\n            <FormikValidationError name=\"unit\" errors={errors} touched={touched} />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <div className=\"form-group \">\r\n            <label htmlFor=\"\" className=\"mr-1\">\r\n              {t(\"home:ndwq\")} <TooltipLabel id={\"NDWQ\"} text={`The quality standards for drinking water`} />:\r\n            </label>\r\n\r\n            <input\r\n              className=\"form-control\"\r\n              name=\"NDWQS_standard\"\r\n              value={values.NDWQS_standard}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            />\r\n            <FormikValidationError name=\"NDWQS_standard\" errors={errors} touched={touched} />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <div className=\"form-group \">\r\n            <label htmlFor=\"\" className=\"mr-1\">\r\n              {t(\"home:types\")}:\r\n            </label>\r\n\r\n            <StyledSelect\r\n              name=\"types\"\r\n              value={values?.types}\r\n              options={PARAMETER_TYPES_OPTIONS}\r\n              onChange={({ name, value }) => {\r\n                setFieldValue(name, value);\r\n              }}\r\n              onBlur={() => {\r\n                setFieldTouched(\"types\", true);\r\n              }}\r\n            />\r\n            <FormikValidationError name=\"types\" errors={errors} touched={touched} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col-md-12 text-right\">\r\n          <Button\r\n            className=\"btn custom-btn  mr-3\"\r\n            text={t(\"home:save\")}\r\n            disabled={props.loading}\r\n            loading={props.loading}\r\n          />\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  language: state.i18nextData.languageType,\r\n  loading:\r\n    state.testParamtersData.postTestParameters.isFetching ||\r\n    state.testParamtersData.updateTestParameters.isFetching,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getTestParametersAction,\r\n  updateTestParametersAction,\r\n  postTestParametersAction,\r\n};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(Form);\r\n"]},"metadata":{},"sourceType":"module"}