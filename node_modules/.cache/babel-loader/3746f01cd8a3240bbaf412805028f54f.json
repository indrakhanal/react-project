{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\S.K. COMPUTER\\\\OneDrive\\\\Desktop\\\\react-project\\\\src\\\\core\\\\Protected\\\\Finance\\\\InflationParamters\\\\ManageOtherParameters\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport FormikValidationError from \"components/React/FormikValidationError/FormikValidationError\";\nimport toast from \"components/React/ToastNotifier/ToastNotifier\";\nimport Button from \"components/UI/Forms/Buttons\";\nimport { useFormik } from \"formik\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getInflationParametersAction } from \"store/modules/inflationParameters/getInflationParameters\";\nimport { postInflationParametersAction } from \"store/modules/inflationParameters/postInflationParameters\";\nimport { updateInflationparametersAction } from \"store/modules/inflationParameters/updateInflationParameters\";\nimport * as Yup from \"yup\";\nimport { useTranslation } from \"react-i18next\";\nconst validationSchema = Yup.object({\n  rate: Yup.string().required(\"This field is required\")\n});\n\nconst ManageOtherParamaters = props => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [initialData, setInitialData] = React.useState({\n    rate: 0\n  });\n  React.useEffect(() => {\n    if (props.language) {\n      props.getInflationParametersAction(props.language);\n    }\n  }, [props.language]);\n  const {\n    values,\n    errors,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  } = useFormik({\n    enableReinitialize: true,\n    initialValues: initialData,\n    validationSchema: validationSchema,\n    onSubmit: async (values, _ref) => {\n      var _props$inflationParam;\n\n      let {\n        resetForm\n      } = _ref;\n      let response;\n      const requestData = { ...values\n      };\n\n      if (props.inflationParametersList instanceof Array && ((_props$inflationParam = props.inflationParametersList) === null || _props$inflationParam === void 0 ? void 0 : _props$inflationParam.length) > 0) {\n        const editData = props.inflationParametersList[0];\n        response = await props.updateInflationparametersAction(props.language, editData.id, requestData);\n      } else {\n        response = await props.postInflationParametersAction(props.language, requestData);\n      }\n\n      if (response.status === 201 || response.status === 200) {\n        if (response.status === 201) {\n          resetForm();\n          toast.success(t(\"home:postSuccess\"));\n        } else {\n          setInitialData({\n            rate: 0\n          });\n          toast.success(t(\"home:updateSuccess\"));\n        }\n\n        props.getInflationParametersAction(props.language);\n      }\n    }\n  });\n  React.useEffect(() => {\n    var _props$inflationParam2;\n\n    if (props.inflationParametersList instanceof Array && ((_props$inflationParam2 = props.inflationParametersList) === null || _props$inflationParam2 === void 0 ? void 0 : _props$inflationParam2.length) > 0) {\n      const editData = props.inflationParametersList[0];\n      setInitialData({ ...editData\n      });\n    }\n  }, [props.inflationParametersList]);\n  console.log(props.inflationParametersList, \"inflationParametersList\");\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      handleSubmit(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row rate_form align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"\",\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, t(\"finance:inflation\"), \" :\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form-control\",\n    name: \"rate\",\n    value: values.rate,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormikValidationError, {\n    name: \"rate\",\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12 mt-2 text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn custom-btn\",\n    text: t(\"home:save\"),\n    type: \"submit\",\n    disabled: props.postLoading || props.updateLoading,\n    loading: props.postLoading || props.updateLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(ManageOtherParamaters, \"vUO5NBMtd5r+E1Uuyu61oJ69YPQ=\", false, function () {\n  return [useTranslation, useFormik];\n});\n\n_c = ManageOtherParamaters;\n\nconst mapStateToProps = state => ({\n  language: state.i18nextData.languageType,\n  postLoading: state.inflationParametersData.postInflationParameters.isFetching,\n  updateLoading: state.inflationParametersData.postInflationParameters.isFetching,\n  inflationParametersList: state.inflationParametersData.getInflationParameters.data\n});\n\nconst mapDispatchToProps = {\n  postInflationParametersAction: postInflationParametersAction,\n  updateInflationparametersAction: updateInflationparametersAction,\n  getInflationParametersAction: getInflationParametersAction\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(ManageOtherParamaters);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ManageOtherParamaters\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/S.K. COMPUTER/OneDrive/Desktop/react-project/src/core/Protected/Finance/InflationParamters/ManageOtherParameters/index.tsx"],"names":["FormikValidationError","toast","Button","useFormik","React","connect","getInflationParametersAction","postInflationParametersAction","updateInflationparametersAction","Yup","useTranslation","validationSchema","object","rate","string","required","ManageOtherParamaters","props","t","initialData","setInitialData","useState","useEffect","language","values","errors","touched","setFieldTouched","setFieldValue","handleChange","handleBlur","handleSubmit","enableReinitialize","initialValues","onSubmit","resetForm","response","requestData","inflationParametersList","Array","length","editData","id","status","success","console","log","e","preventDefault","postLoading","updateLoading","mapStateToProps","state","i18nextData","languageType","inflationParametersData","postInflationParameters","isFetching","getInflationParameters","data","mapDispatchToProps","connector"],"mappings":"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","sourcesContent":["import FormikValidationError from \"components/React/FormikValidationError/FormikValidationError\";\r\nimport StyledSelect from \"components/React/StyledSelect/StyledSelect\";\r\nimport toast from \"components/React/ToastNotifier/ToastNotifier\";\r\nimport Button from \"components/UI/Forms/Buttons\";\r\nimport { useFormik } from \"formik\";\r\nimport React from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { getInflationParametersAction } from \"store/modules/inflationParameters/getInflationParameters\";\r\nimport { postInflationParametersAction } from \"store/modules/inflationParameters/postInflationParameters\";\r\nimport { updateInflationparametersAction } from \"store/modules/inflationParameters/updateInflationParameters\";\r\nimport { RootState } from \"store/root-reducer\";\r\nimport * as Yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport TooltipLabel from \"components/UI/TooltipLabel\";\r\n\r\nconst validationSchema = Yup.object({\r\n  rate: Yup.string().required(\"This field is required\"),\r\n});\r\n\r\ninterface Props extends PropsFromRedux {}\r\n\r\nconst ManageOtherParamaters = (props: Props) => {\r\n  const { t } = useTranslation();\r\n  const [initialData, setInitialData] = React.useState({\r\n    rate: 0,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (props.language) {\r\n      props.getInflationParametersAction(props.language);\r\n    }\r\n  }, [props.language]);\r\n\r\n  const {\r\n    values,\r\n    errors,\r\n    touched,\r\n    setFieldTouched,\r\n    setFieldValue,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n  } = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: initialData,\r\n    validationSchema: validationSchema,\r\n    onSubmit: async (values, { resetForm }) => {\r\n      let response;\r\n      const requestData = {\r\n        ...values, \r\n      };\r\n\r\n      if (\r\n        props.inflationParametersList instanceof Array &&\r\n        props.inflationParametersList?.length > 0\r\n      ) {\r\n        const editData = props.inflationParametersList[0];\r\n        response = await props.updateInflationparametersAction(\r\n          props.language,\r\n          editData.id,\r\n          requestData\r\n        );\r\n      } else {\r\n        response = await props.postInflationParametersAction(props.language, requestData);\r\n      }\r\n\r\n      if (response.status === 201 || response.status === 200) {\r\n        if (response.status === 201) {\r\n          resetForm();\r\n          toast.success(t(\"home:postSuccess\"));\r\n        } else {\r\n          setInitialData({\r\n            rate: 0,\r\n          });\r\n          toast.success(t(\"home:updateSuccess\"));\r\n        }\r\n        props.getInflationParametersAction(props.language);\r\n      }\r\n    },\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (\r\n      props.inflationParametersList instanceof Array &&\r\n      props.inflationParametersList?.length > 0\r\n    ) {\r\n      const editData = props.inflationParametersList[0];\r\n      setInitialData({\r\n        ...editData,\r\n      });\r\n    }\r\n  }, [props.inflationParametersList]);\r\n\r\n  console.log(props.inflationParametersList, \"inflationParametersList\");\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        handleSubmit(e);\r\n      }}\r\n    >\r\n      <div className=\"row rate_form align-items-center\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"form-group \">\r\n            <label htmlFor=\"\" className=\"mr-1\">\r\n              {t(\"finance:inflation\")} :\r\n            </label>\r\n\r\n            <input\r\n              className=\"form-control\"\r\n              name=\"rate\"\r\n              value={values.rate}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            />\r\n            <FormikValidationError name=\"rate\" errors={errors} touched={touched} />\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"col-md-12 mt-2 text-right\">\r\n          <Button\r\n            className=\"btn custom-btn\"\r\n            text={t(\"home:save\")}\r\n            type=\"submit\"\r\n            disabled={props.postLoading || props.updateLoading}\r\n            loading={props.postLoading || props.updateLoading}\r\n          />\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  language: state.i18nextData.languageType,\r\n  postLoading: state.inflationParametersData.postInflationParameters.isFetching,\r\n  updateLoading: state.inflationParametersData.postInflationParameters.isFetching,\r\n  inflationParametersList: state.inflationParametersData.getInflationParameters.data,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  postInflationParametersAction: postInflationParametersAction,\r\n  updateInflationparametersAction: updateInflationparametersAction,\r\n  getInflationParametersAction: getInflationParametersAction,\r\n};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(ManageOtherParamaters);\r\n"]},"metadata":{},"sourceType":"module"}