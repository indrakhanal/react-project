{"ast":null,"code":"var _jsxFileName = \"E:\\\\Smart Tech Solution\\\\React JS\\\\react-project\\\\src\\\\core\\\\Public\\\\Finance\\\\Visualization\\\\LineChart\\\\LineChartThisYear.tsx\",\n    _s = $RefreshSig$();\n\nimport GeneralChart from \"components/UI/Charts/General\";\nimport CustomCheckBox from \"components/UI/CustomCheckbox\";\nimport { getFiscalYearData, getMonthByLanguageAndScheme, getNumberByLanguage } from \"i18n/i18n\";\nimport React, { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport DataTable from \"./DataTable\";\nconst config = {\n  name: \"\",\n  type: \"line\",\n  smooth: true,\n  data: []\n};\n\nconst LineChartThisYear = props => {\n  _s();\n\n  const {\n    selected,\n    setSelected\n  } = props;\n  const {\n    t\n  } = useTranslation();\n  const [chartData, setChartData] = useState();\n  const [seriesData, setSeriesData] = useState();\n  const [tableData, setTableData] = useState();\n  const options = [{\n    key: 1,\n    id: \"actual_income\",\n    name: `${t(\"home:actual\")} ${t(\"home:income\")}`,\n    color: \"#4DFFFF\"\n  }, {\n    key: 2,\n    id: \"actual_expense\",\n    name: `${t(\"home:actual\")} ${t(\"home:expense\")}`,\n    color: \"#FF4D4D\"\n  }, {\n    key: 3,\n    id: \"actual_cf\",\n    name: `${t(\"home:accf\")}`,\n    color: \"#c47df7\"\n  }, {\n    key: 4,\n    id: \"expected_income\",\n    name: `${t(\"home:expected\")} ${t(\"home:income\")}`,\n    color: \"#fbc757\"\n  }, {\n    key: 5,\n    id: \"expected_expense\",\n    name: `${t(\"home:expected\")} ${t(\"home:expense\")}`,\n    color: \"#041C44\"\n  }, {\n    key: 6,\n    id: \"expected_cf\",\n    name: `${t(\"home:eccf\")}`,\n    color: \"#1d9a36\"\n  }];\n  useEffect(() => {\n    if (props.schemeDetails && props.intervalData) {\n      var _props$schemeDetails, _props$incomeExpenseD, _props$incomeExpenseD2;\n\n      const fiscalYearArray = getFiscalYearData(props.intervalData, (_props$schemeDetails = props.schemeDetails) === null || _props$schemeDetails === void 0 ? void 0 : _props$schemeDetails.system_date_format);\n\n      const filterBasedOnkey = (array, monthKey, key, value) => {\n        return fiscalYearArray === null || fiscalYearArray === void 0 ? void 0 : fiscalYearArray.map(item => {\n          var _array$key;\n\n          const findValue = array && ((_array$key = array[key]) === null || _array$key === void 0 ? void 0 : _array$key.find(inc => {\n            var _inc$monthKey, _inc$monthKey$toStrin;\n\n            return +inc[monthKey] < 10 ? +((_inc$monthKey = inc[monthKey]) === null || _inc$monthKey === void 0 ? void 0 : (_inc$monthKey$toStrin = _inc$monthKey.toString()) === null || _inc$monthKey$toStrin === void 0 ? void 0 : _inc$monthKey$toStrin.replace(\"0\", \"\")) === +item : +inc[monthKey] === +item;\n          }));\n          return {\n            value: findValue ? findValue[value] : 0\n          };\n        });\n      };\n\n      const newData = {\n        years: fiscalYearArray === null || fiscalYearArray === void 0 ? void 0 : fiscalYearArray.map(item => {\n          var _props$schemeDetails2;\n\n          return getMonthByLanguageAndScheme(item, (_props$schemeDetails2 = props.schemeDetails) === null || _props$schemeDetails2 === void 0 ? void 0 : _props$schemeDetails2.system_date_format);\n        }),\n        actual_income: filterBasedOnkey(props.incomeExpenseData, \"date__month\", \"income\", \"total_amount\"),\n        actual_expense: filterBasedOnkey(props.incomeExpenseData, \"date__month\", \"expense\", \"total_amount\"),\n        actual_cf: (_props$incomeExpenseD = props.incomeExpenseData) === null || _props$incomeExpenseD === void 0 ? void 0 : (_props$incomeExpenseD2 = _props$incomeExpenseD.cf) === null || _props$incomeExpenseD2 === void 0 ? void 0 : _props$incomeExpenseD2.map(item => item.cf),\n        expected_income: filterBasedOnkey(props.expenseCF, \"month\", \"monthly_income\", \"income\"),\n        expected_expense: filterBasedOnkey(props.expenseCF, \"month\", \"monthly_expense\", \"expense\"),\n        expected_cf: filterBasedOnkey(props.expenseCF, \"month\", \"monthly_cf\", \"cf\")\n      };\n      setChartData(newData);\n    }\n  }, [props.incomeExpenseData, props.actualCF, props.expenseCF, props.schemeDetails, props.intervalData]);\n\n  const handleSelect = name => {\n    if (selected !== null && selected !== void 0 && selected.includes(name)) {\n      const filteredData = selected.filter(item => item !== name);\n      setSelected(filteredData);\n    } else {\n      setSelected([...selected, name]);\n    }\n  };\n\n  useEffect(() => {\n    const selectedData = selected.map(item => {\n      var _options$find, _options$find2;\n\n      return { ...config,\n        name: ((_options$find = options.find(opt => opt.id === item)) === null || _options$find === void 0 ? void 0 : _options$find.name) || \"\",\n        data: chartData && chartData[item],\n        itemStyle: {\n          color: ((_options$find2 = options.find(opt => opt.id === item)) === null || _options$find2 === void 0 ? void 0 : _options$find2.color) || \"\"\n        }\n      };\n    });\n    const tableData = selected.map(item => {\n      var _options$find3, _options$find4;\n\n      return {\n        name: ((_options$find3 = options.find(opt => opt.id === item)) === null || _options$find3 === void 0 ? void 0 : _options$find3.name) || \"\",\n        color: ((_options$find4 = options.find(opt => opt.id === item)) === null || _options$find4 === void 0 ? void 0 : _options$find4.color) || \"\",\n        data: chartData && chartData[item]\n      };\n    });\n    console.log(selected, chartData, \"dadadasdasda\");\n    setSeriesData(selectedData);\n    setTableData(tableData);\n  }, [chartData, selected]);\n  const optionData = {\n    tooltip: {\n      trigger: \"axis\",\n      axisPointer: {\n        type: \"shadow\"\n      }\n    },\n    legend: {\n      show: false\n    },\n    grid: {\n      left: \"3%\",\n      right: \"5%\",\n      bottom: \"3%\",\n      top: \"6%\",\n      containLabel: true\n    },\n    xAxis: {\n      type: \"category\",\n      boundaryGap: false,\n      data: chartData === null || chartData === void 0 ? void 0 : chartData.years,\n      axisLabel: {\n        formatter: function (name) {\n          var _name$split$;\n\n          return name === null || name === void 0 ? void 0 : (_name$split$ = name.split(\"-\")[0]) === null || _name$split$ === void 0 ? void 0 : _name$split$.replace(\"Year\", \"\");\n        }\n      }\n    },\n    yAxis: {\n      type: \"value\",\n      axisLabel: {\n        formatter: function (name) {\n          return getNumberByLanguage(name);\n        }\n      }\n    },\n    series: seriesData\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GeneralChart, {\n    minHeight: 300,\n    options: optionData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }), (tableData === null || tableData === void 0 ? void 0 : tableData.length) > 0 && /*#__PURE__*/React.createElement(DataTable, {\n    months: true,\n    years: chartData === null || chartData === void 0 ? void 0 : chartData.years,\n    tableData: tableData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 35\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-3 chartOptions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, \"Select\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, \"Visualization Parameters\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }, options.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CustomCheckBox, {\n    id: \"\" + item.key,\n    label: item.name,\n    onChange: e => handleSelect(item.id),\n    checked: selected.includes(item.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 15\n    }\n  }))))));\n};\n\n_s(LineChartThisYear, \"jjiPfI2O0qjqui6f8kW3cEOEUvI=\", false, function () {\n  return [useTranslation];\n});\n\n_c = LineChartThisYear;\n\nconst mapStateToProps = state => ({\n  language: state.i18nextData.languageType,\n  schemeDetails: state.waterSchemeData.waterSchemeDetailsData.data,\n  incomeExpenseData: state.reportData.incomeExpenseData.data,\n  actualCF: state.reportData.actualCumulativeCashFlowData.data,\n  expenseCF: state.reportData.expenseCumulativeCashFlowData.data,\n  intervalData: state.waterSchemeData.getYearIntervals.data\n});\n\nconst mapDispatchToProps = {};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(LineChartThisYear);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LineChartThisYear\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["E:/Smart Tech Solution/React JS/react-project/src/core/Public/Finance/Visualization/LineChart/LineChartThisYear.tsx"],"names":["GeneralChart","CustomCheckBox","getFiscalYearData","getMonthByLanguageAndScheme","getNumberByLanguage","React","useState","useEffect","useTranslation","connect","DataTable","config","name","type","smooth","data","LineChartThisYear","props","selected","setSelected","t","chartData","setChartData","seriesData","setSeriesData","tableData","setTableData","options","key","id","color","schemeDetails","intervalData","fiscalYearArray","system_date_format","filterBasedOnkey","array","monthKey","value","map","item","findValue","find","inc","toString","replace","newData","years","actual_income","incomeExpenseData","actual_expense","actual_cf","cf","expected_income","expenseCF","expected_expense","expected_cf","actualCF","handleSelect","includes","filteredData","filter","selectedData","opt","itemStyle","console","log","optionData","tooltip","trigger","axisPointer","legend","show","grid","left","right","bottom","top","containLabel","xAxis","boundaryGap","axisLabel","formatter","split","yAxis","series","length","e","mapStateToProps","state","language","i18nextData","languageType","waterSchemeData","waterSchemeDetailsData","reportData","actualCumulativeCashFlowData","expenseCumulativeCashFlowData","getYearIntervals","mapDispatchToProps","connector"],"mappings":"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","sourcesContent":["import GeneralChart from \"components/UI/Charts/General\";\r\nimport CustomCheckBox from \"components/UI/CustomCheckbox\";\r\nimport { getFiscalYearData, getMonthByLanguageAndScheme, getNumberByLanguage } from \"i18n/i18n\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { RootState } from \"store/root-reducer\";\r\nimport { getYearFromDate } from \"utils/utilsFunction/date-converter\";\r\nimport DataTable from \"./DataTable\";\r\n\r\nconst config = {\r\n  name: \"\",\r\n  type: \"line\",\r\n  smooth: true,\r\n  data: [],\r\n};\r\n\r\ntype SeriesConfig = {\r\n  name: string;\r\n  type: string;\r\n  smooth: boolean;\r\n  data: (string | number)[];\r\n};\r\n\r\ntype ChartDataType = {\r\n  years: (string | number)[];\r\n  actual_income?: (string | number)[];\r\n  actual_expense?: (string | number)[];\r\n  actual_cf?: (string | number)[];\r\n  expected_income?: (string | number)[];\r\n  expected_expense?: (string | number)[];\r\n  expected_cf?: (string | number)[];\r\n};\r\n\r\ninterface Props extends PropsFromRedux {\r\n  selected: string[];\r\n  setSelected: any\r\n}\r\n\r\nconst LineChartThisYear = (props: Props) => {\r\n  const { selected , setSelected} = props;\r\n  \r\n  const { t } = useTranslation();\r\n  const [chartData, setChartData] = useState<ChartDataType>();\r\n\r\n  const [seriesData, setSeriesData] = useState<SeriesConfig[]>();\r\n\r\n  const [tableData, setTableData] = useState<any>();\r\n\r\n  const options = [\r\n    {\r\n      key: 1,\r\n      id: \"actual_income\",\r\n      name: `${t(\"home:actual\")} ${t(\"home:income\")}`,\r\n      color: \"#4DFFFF\",\r\n    },\r\n    {\r\n      key: 2,\r\n      id: \"actual_expense\",\r\n      name: `${t(\"home:actual\")} ${t(\"home:expense\")}`,\r\n      color: \"#FF4D4D\",\r\n    },\r\n    {\r\n      key: 3,\r\n      id: \"actual_cf\",\r\n      name: `${t(\"home:accf\")}`,\r\n      color: \"#c47df7\",\r\n    },\r\n    {\r\n      key: 4,\r\n      id: \"expected_income\",\r\n      name: `${t(\"home:expected\")} ${t(\"home:income\")}`,\r\n      color: \"#fbc757\",\r\n    },\r\n    {\r\n      key: 5,\r\n      id: \"expected_expense\",\r\n      name: `${t(\"home:expected\")} ${t(\"home:expense\")}`,\r\n      color: \"#041C44\",\r\n    },\r\n    {\r\n      key: 6,\r\n      id: \"expected_cf\",\r\n      name: `${t(\"home:eccf\")}`,\r\n      color: \"#1d9a36\",\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (props.schemeDetails && props.intervalData) {\r\n      const fiscalYearArray = getFiscalYearData(\r\n        props.intervalData,\r\n        props.schemeDetails?.system_date_format\r\n      );\r\n\r\n      const filterBasedOnkey = (array: any, monthKey: string, key: string, value: string) => {\r\n        return fiscalYearArray?.map((item) => {\r\n          const findValue =\r\n            array &&\r\n            array[key]?.find((inc) => {\r\n              return +inc[monthKey] < 10\r\n                ? +inc[monthKey]?.toString()?.replace(\"0\", \"\") === +item\r\n                : +inc[monthKey] === +item;\r\n            });\r\n          return {\r\n            value: findValue ? findValue[value] : 0,\r\n          };\r\n        });\r\n      };\r\n\r\n      const newData: ChartDataType = {\r\n        years: fiscalYearArray?.map((item) => {\r\n          return getMonthByLanguageAndScheme(item, props.schemeDetails?.system_date_format);\r\n        }),\r\n        actual_income: filterBasedOnkey(\r\n          props.incomeExpenseData,\r\n          \"date__month\",\r\n          \"income\",\r\n          \"total_amount\"\r\n        ),\r\n        actual_expense: filterBasedOnkey(\r\n          props.incomeExpenseData,\r\n          \"date__month\",\r\n          \"expense\",\r\n          \"total_amount\"\r\n        ),\r\n        actual_cf: props.incomeExpenseData?.cf?.map((item) => item.cf),\r\n        expected_income: filterBasedOnkey(props.expenseCF, \"month\", \"monthly_income\", \"income\"),\r\n        expected_expense: filterBasedOnkey(props.expenseCF, \"month\", \"monthly_expense\", \"expense\"),\r\n        expected_cf: filterBasedOnkey(props.expenseCF, \"month\", \"monthly_cf\", \"cf\"),\r\n      };\r\n      setChartData(newData);\r\n    }\r\n  }, [\r\n    props.incomeExpenseData,\r\n    props.actualCF,\r\n    props.expenseCF,\r\n    props.schemeDetails,\r\n    props.intervalData,\r\n  ]);\r\n\r\n  const handleSelect = (name: string) => {\r\n    if (selected?.includes(name)) {\r\n      const filteredData = selected.filter((item) => item !== name);\r\n      setSelected(filteredData);\r\n    } else {\r\n      setSelected([...selected, name]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const selectedData = selected.map((item) => ({\r\n      ...config,\r\n      name: options.find((opt) => opt.id === item)?.name || \"\",\r\n      data: chartData && chartData[item],\r\n      itemStyle: { color: options.find((opt) => opt.id === item)?.color || \"\" },\r\n    }));\r\n\r\n    const tableData = selected.map((item) => ({\r\n      name: options.find((opt) => opt.id === item)?.name || \"\",\r\n      color: options.find((opt) => opt.id === item)?.color || \"\",\r\n      data: chartData && chartData[item],\r\n    }));\r\n\r\n    console.log(selected, chartData, \"dadadasdasda\");\r\n\r\n    setSeriesData(selectedData);\r\n    setTableData(tableData);\r\n  }, [chartData, selected]);\r\n\r\n  const optionData = {\r\n    tooltip: {\r\n      trigger: \"axis\",\r\n      axisPointer: {\r\n        type: \"shadow\",\r\n      },\r\n    },\r\n    legend: {\r\n      show: false,\r\n    },\r\n    grid: {\r\n      left: \"3%\",\r\n      right: \"5%\",\r\n      bottom: \"3%\",\r\n      top: \"6%\",\r\n      containLabel: true,\r\n    },\r\n    xAxis: {\r\n      type: \"category\",\r\n      boundaryGap: false,\r\n      data: chartData?.years,\r\n      axisLabel: {\r\n        formatter: function (name) {\r\n          return name?.split(\"-\")[0]?.replace(\"Year\", \"\");\r\n        },\r\n      },\r\n    },\r\n    yAxis: {\r\n      type: \"value\",\r\n      axisLabel: {\r\n        formatter: function (name) {\r\n          return getNumberByLanguage(name);\r\n        },\r\n      },\r\n    },\r\n    series: seriesData,\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-9\">\r\n        <GeneralChart minHeight={300} options={optionData} />\r\n        {tableData?.length > 0 && <DataTable months years={chartData?.years} tableData={tableData} />}\r\n      </div>\r\n      <div className=\"col-md-3 chartOptions\">\r\n        <h6>Select</h6>\r\n        <p>Visualization Parameters</p>\r\n\r\n        <ul>\r\n          {options.map((item) => (\r\n            <li key={item.id}>\r\n              <CustomCheckBox\r\n                id={\"\" + item.key}\r\n                label={item.name}\r\n                onChange={(e) => handleSelect(item.id)}\r\n                checked={selected.includes(item.id)}\r\n              />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  language: state.i18nextData.languageType,\r\n  schemeDetails: state.waterSchemeData.waterSchemeDetailsData.data,\r\n  incomeExpenseData: state.reportData.incomeExpenseData.data,\r\n  actualCF: state.reportData.actualCumulativeCashFlowData.data,\r\n  expenseCF: state.reportData.expenseCumulativeCashFlowData.data,\r\n  intervalData: state.waterSchemeData.getYearIntervals.data,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(LineChartThisYear);\r\n"]},"metadata":{},"sourceType":"module"}