{"ast":null,"code":"var _jsxFileName = \"E:\\\\Smart Tech Solution\\\\React JS\\\\react-project\\\\src\\\\core\\\\Public\\\\Home\\\\Maintainance\\\\MaintainanceCostChartThisYear.tsx\",\n    _s = $RefreshSig$();\n\nimport GeneralChart from \"components/UI/Charts/General\";\nimport { getFiscalYearData, getMonthByLanguageAndScheme, getNumberByLanguage } from \"i18n/i18n\";\nimport React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\n\nconst MaintainanceCostChartThisYear = props => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [year, setYear] = useState();\n  const [actualCost, setActualCost] = useState(null);\n  const [expectedCost, setExpectedCost] = useState(null);\n  useEffect(() => {\n    if (props.maintainanceCost && props.intervalData) {\n      var _props$schemeDetails;\n\n      const fiscalYearArray = getFiscalYearData(props.intervalData, (_props$schemeDetails = props.schemeDetails) === null || _props$schemeDetails === void 0 ? void 0 : _props$schemeDetails.system_date_format);\n\n      const sortAndMapArray = (array, monthKey, key, color) => {\n        return fiscalYearArray === null || fiscalYearArray === void 0 ? void 0 : fiscalYearArray.map(item => {\n          const findElement = array === null || array === void 0 ? void 0 : array.find(inc => {\n            var _inc$monthKey, _inc$monthKey$toStrin;\n\n            return +inc[monthKey] < 10 ? +((_inc$monthKey = inc[monthKey]) === null || _inc$monthKey === void 0 ? void 0 : (_inc$monthKey$toStrin = _inc$monthKey.toString()) === null || _inc$monthKey$toStrin === void 0 ? void 0 : _inc$monthKey$toStrin.replace(\"0\", \"\")) === +item : +inc[monthKey] === +item;\n          });\n          return {\n            value: findElement ? findElement[key] : 0,\n            itemStyle: {\n              color\n            }\n          };\n        });\n      };\n\n      const yearData = fiscalYearArray === null || fiscalYearArray === void 0 ? void 0 : fiscalYearArray.map(item => {\n        var _props$schemeDetails2;\n\n        return getMonthByLanguageAndScheme(item, (_props$schemeDetails2 = props.schemeDetails) === null || _props$schemeDetails2 === void 0 ? void 0 : _props$schemeDetails2.system_date_format);\n      });\n      const actualCost = {\n        unsegregated: sortAndMapArray(props.maintainanceCost.actual_cost, \"maintenance_date__month\", \"unsegregated_cost\", \"#e69f00\"),\n        material: sortAndMapArray(props.maintainanceCost.actual_cost, \"maintenance_date__month\", \"material_cost\", \"#56b4e9\"),\n        labor: sortAndMapArray(props.maintainanceCost.actual_cost, \"maintenance_date__month\", \"labour_cost\", \"#f0e442\"),\n        replacement: sortAndMapArray(props.maintainanceCost.actual_cost, \"maintenance_date__month\", \"replacement_cost\", \"#ea75b6\"),\n        total: props.maintainanceCost.actual_cost.map(item => ({\n          date: item.maintenance_date__month,\n          value: item.actual_cost_total || 0\n        }))\n      };\n      const expectedCost = {\n        unsegregated: sortAndMapArray(props.maintainanceCost.expected_cost, \"next_action__month\", \"unsegregated_cost\", \"#009e73\"),\n        material: sortAndMapArray(props.maintainanceCost.expected_cost, \"next_action__month\", \"material_cost\", \"#000000\"),\n        labor: sortAndMapArray(props.maintainanceCost.expected_cost, \"next_action__month\", \"labour_cost\", \"#d55e00\"),\n        replacement: sortAndMapArray(props.maintainanceCost.expected_cost, \"next_action__month\", \"replacement_cost\", \"#0072b2\"),\n        total: props.maintainanceCost.expected_cost.map(item => ({\n          date: item.maintenance_date__month,\n          value: item.actual_cost_total || 0\n        }))\n      };\n      setYear(yearData);\n      setActualCost(actualCost);\n      setExpectedCost(expectedCost);\n    }\n  }, [props.maintainanceCost, props.intervalData]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GeneralChart, {\n    minHeight: 350,\n    options: {\n      tooltip: {\n        trigger: \"axis\",\n        axisPointer: {\n          type: \"shadow\"\n        } // formatter: handleCustomTooltip,\n\n      },\n      legend: {\n        show: false\n      },\n      grid: {\n        left: \"3%\",\n        right: \"4%\",\n        bottom: \"3%\",\n        top: \"8%\",\n        containLabel: true\n      },\n      xAxis: {\n        type: \"category\",\n        data: year,\n        axisLabel: {\n          formatter: function (data) {\n            return (data === null || data === void 0 ? void 0 : data.replace(\"Year\", \"\")) || \" \";\n          }\n        }\n      },\n      yAxis: {\n        type: \"value\",\n        axisLabel: {\n          formatter: function (name) {\n            return getNumberByLanguage(name);\n          }\n        }\n      },\n      series: [{\n        name: `${t(\"home:expected\")} ${t(\"home:unsegregated\")}`,\n        type: \"bar\",\n        stack: \"bar\",\n        areaStyle: {\n          color: \"red\"\n        },\n        data: expectedCost === null || expectedCost === void 0 ? void 0 : expectedCost.unsegregated\n      }, {\n        name: `${t(\"home:expected\")} ${t(\"home:consumable\")}`,\n        type: \"bar\",\n        stack: \"bar\",\n        data: expectedCost === null || expectedCost === void 0 ? void 0 : expectedCost.material\n      }, {\n        name: `${t(\"home:expected\")} ${t(\"home:labour\")}`,\n        type: \"bar\",\n        stack: \"bar\",\n        data: expectedCost === null || expectedCost === void 0 ? void 0 : expectedCost.labor\n      }, {\n        name: `${t(\"home:expected\")} ${t(\"home:replacement\")}`,\n        type: \"bar\",\n        stack: \"bar\",\n        data: expectedCost === null || expectedCost === void 0 ? void 0 : expectedCost.labor\n      }, {\n        name: `${t(\"home:actual\")} ${t(\"home:unsegregated\")}`,\n        type: \"bar\",\n        stack: \"bar2\",\n        data: actualCost === null || actualCost === void 0 ? void 0 : actualCost.unsegregated\n      }, {\n        name: `${t(\"home:actual\")} ${t(\"home:consumable\")}`,\n        type: \"bar\",\n        stack: \"bar2\",\n        data: actualCost === null || actualCost === void 0 ? void 0 : actualCost.material\n      }, {\n        name: `${t(\"home:actual\")} ${t(\"home:labour\")}`,\n        type: \"bar\",\n        stack: \"bar2\",\n        data: actualCost === null || actualCost === void 0 ? void 0 : actualCost.labor\n      }, {\n        name: `${t(\"home:actual\")} ${t(\"home:replacement\")}`,\n        type: \"bar\",\n        stack: \"bar2\",\n        data: actualCost === null || actualCost === void 0 ? void 0 : actualCost.replacement\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cost-desc table-responsive mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    className: \"expected\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 15\n    }\n  }, t(\"home:expectedCost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"unseg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 17\n    }\n  }), t(\"home:unsegregated\"), \" \", t(\"home:cost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 17\n    }\n  }), t(\"home:maintainanceCost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"labour\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 17\n    }\n  }), t(\"home:labour\"), \" \", t(\"home:cost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"replacement\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 17\n    }\n  }), t(\"home:replacement\"), \" \", t(\"home:cost\")))), /*#__PURE__*/React.createElement(\"tr\", {\n    className: \"actual\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 15\n    }\n  }, t(\"home:actualCost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"unseg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 17\n    }\n  }), t(\"home:unsegregated\"), \" \", t(\"home:cost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 17\n    }\n  }), t(\"home:maintainanceCost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"labour\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }\n  }), t(\"home:labour\"), \" \", t(\"home:cost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"replacement\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }\n  }), t(\"home:replacement\"), \" \", t(\"home:cost\")))))));\n};\n\n_s(MaintainanceCostChartThisYear, \"yTTYw6oJMObqFlCnjYnrYRBBWGI=\", false, function () {\n  return [useTranslation];\n});\n\n_c = MaintainanceCostChartThisYear;\n\nconst mapStateToProps = state => ({\n  schemeDetails: state.waterSchemeData.waterSchemeDetailsData.data,\n  language: state.i18nextData.languageType,\n  maintainanceCost: state.reportData.maintainanceCostData.data,\n  waterTarrifs: state.waterTarrifsData.waterTarrifData.data,\n  intervalData: state.waterSchemeData.getYearIntervals.data\n});\n\nconst mapDispatchToProps = {};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(MaintainanceCostChartThisYear);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MaintainanceCostChartThisYear\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["E:/Smart Tech Solution/React JS/react-project/src/core/Public/Home/Maintainance/MaintainanceCostChartThisYear.tsx"],"names":["GeneralChart","getFiscalYearData","getMonthByLanguageAndScheme","getNumberByLanguage","React","useEffect","useState","useTranslation","connect","MaintainanceCostChartThisYear","props","t","year","setYear","actualCost","setActualCost","expectedCost","setExpectedCost","maintainanceCost","intervalData","fiscalYearArray","schemeDetails","system_date_format","sortAndMapArray","array","monthKey","key","color","map","item","findElement","find","inc","toString","replace","value","itemStyle","yearData","unsegregated","actual_cost","material","labor","replacement","total","date","maintenance_date__month","actual_cost_total","expected_cost","tooltip","trigger","axisPointer","type","legend","show","grid","left","right","bottom","top","containLabel","xAxis","data","axisLabel","formatter","yAxis","name","series","stack","areaStyle","mapStateToProps","state","waterSchemeData","waterSchemeDetailsData","language","i18nextData","languageType","reportData","maintainanceCostData","waterTarrifs","waterTarrifsData","waterTarrifData","getYearIntervals","mapDispatchToProps","connector"],"mappings":"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","sourcesContent":["import GeneralChart from \"components/UI/Charts/General\";\r\nimport { getFiscalYearData, getMonthByLanguageAndScheme, getNumberByLanguage } from \"i18n/i18n\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { MaintainanceCostSingleType } from \"store/modules/report/maintainanceCost\";\r\nimport { RootState } from \"store/root-reducer\";\r\n\r\nexport type TotalDataYear = {\r\n  date: number;\r\n  actualCost: number;\r\n  unsegregated: number;\r\n  material: number;\r\n  labour: number;\r\n  replacement: number;\r\n};\r\n\r\nexport type TotalYearType = {\r\n  date: number;\r\n  value: number | null;\r\n};\r\n\r\nexport type CustomSingleData = {\r\n  value: string | number;\r\n  itemStyle: { color: string };\r\n};\r\n\r\nexport type IncomeExpenseType = {\r\n  unsegregated: CustomSingleData[];\r\n  material: CustomSingleData[];\r\n  labor: CustomSingleData[];\r\n  replacement: CustomSingleData[];\r\n  total?: TotalYearType[];\r\n};\r\n\r\ninterface Props extends PropsFromRedux {}\r\n\r\nconst MaintainanceCostChartThisYear = (props: Props) => {\r\n  const { t } = useTranslation();\r\n\r\n  const [year, setYear] = useState<(string | number)[]>();\r\n  const [actualCost, setActualCost] = useState<IncomeExpenseType | null>(null);\r\n  const [expectedCost, setExpectedCost] = useState<IncomeExpenseType | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (props.maintainanceCost && props.intervalData) {\r\n      const fiscalYearArray = getFiscalYearData(\r\n        props.intervalData,\r\n        props.schemeDetails?.system_date_format\r\n      );\r\n\r\n      const sortAndMapArray = (\r\n        array: MaintainanceCostSingleType[],\r\n        monthKey: string,\r\n        key: string,\r\n        color: string\r\n      ) => {\r\n        return fiscalYearArray?.map((item) => {\r\n          const findElement = array?.find((inc) => {\r\n            return +inc[monthKey] < 10\r\n              ? +inc[monthKey]?.toString()?.replace(\"0\", \"\") === +item\r\n              : +inc[monthKey] === +item;\r\n          });\r\n          return {\r\n            value: findElement ? findElement[key] : 0,\r\n            itemStyle: { color },\r\n          };\r\n        });\r\n      };\r\n\r\n      const yearData = fiscalYearArray?.map((item) => {\r\n        return getMonthByLanguageAndScheme(item, props.schemeDetails?.system_date_format);\r\n      });\r\n\r\n      const actualCost = {\r\n        unsegregated: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"maintenance_date__month\",\r\n          \"unsegregated_cost\",\r\n          \"#e69f00\"\r\n        ),\r\n        material: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"maintenance_date__month\",\r\n          \"material_cost\",\r\n          \"#56b4e9\"\r\n        ),\r\n        labor: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"maintenance_date__month\",\r\n          \"labour_cost\",\r\n          \"#f0e442\"\r\n        ),\r\n        replacement: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"maintenance_date__month\",\r\n          \"replacement_cost\",\r\n          \"#ea75b6\"\r\n        ),\r\n\r\n        total: props.maintainanceCost.actual_cost.map((item) => ({\r\n          date: item.maintenance_date__month,\r\n          value: item.actual_cost_total || 0,\r\n        })),\r\n      };\r\n\r\n      const expectedCost = {\r\n        unsegregated: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"next_action__month\",\r\n          \"unsegregated_cost\",\r\n          \"#009e73\"\r\n        ),\r\n        material: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"next_action__month\",\r\n          \"material_cost\",\r\n          \"#000000\"\r\n        ),\r\n        labor: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"next_action__month\",\r\n          \"labour_cost\",\r\n          \"#d55e00\"\r\n        ),\r\n        replacement: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"next_action__month\",\r\n          \"replacement_cost\",\r\n          \"#0072b2\"\r\n        ),\r\n        total: props.maintainanceCost.expected_cost.map((item) => ({\r\n          date: item.maintenance_date__month,\r\n          value: item.actual_cost_total || 0,\r\n        })),\r\n      };\r\n\r\n      setYear(yearData);\r\n      setActualCost(actualCost);\r\n      setExpectedCost(expectedCost);\r\n    }\r\n  }, [props.maintainanceCost, props.intervalData]);\r\n\r\n  return (\r\n    <>\r\n      <GeneralChart\r\n        minHeight={350}\r\n        options={{\r\n          tooltip: {\r\n            trigger: \"axis\",\r\n            axisPointer: {\r\n              type: \"shadow\",\r\n            },\r\n            // formatter: handleCustomTooltip,\r\n          },\r\n          legend: {\r\n            show: false,\r\n          },\r\n          grid: {\r\n            left: \"3%\",\r\n            right: \"4%\",\r\n            bottom: \"3%\",\r\n            top: \"8%\",\r\n            containLabel: true,\r\n          },\r\n          xAxis: {\r\n            type: \"category\",\r\n            data: year,\r\n            axisLabel: {\r\n              formatter: function (data) {\r\n                return data?.replace(\"Year\", \"\") || \" \";\r\n              },\r\n            },\r\n          },\r\n          yAxis: {\r\n            type: \"value\",\r\n            axisLabel: {\r\n              formatter: function (name) {\r\n                return getNumberByLanguage(name);\r\n              },\r\n            },\r\n          },\r\n          series: [\r\n            {\r\n              name: `${t(\"home:expected\")} ${t(\"home:unsegregated\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar\",\r\n              areaStyle: {\r\n                color: \"red\",\r\n              },\r\n              data: expectedCost?.unsegregated,\r\n            },\r\n            {\r\n              name: `${t(\"home:expected\")} ${t(\"home:consumable\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar\",\r\n              data: expectedCost?.material,\r\n            },\r\n            {\r\n              name: `${t(\"home:expected\")} ${t(\"home:labour\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar\",\r\n              data: expectedCost?.labor,\r\n            },\r\n            {\r\n              name: `${t(\"home:expected\")} ${t(\"home:replacement\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar\",\r\n              data: expectedCost?.labor,\r\n            },\r\n            {\r\n              name: `${t(\"home:actual\")} ${t(\"home:unsegregated\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar2\",\r\n              data: actualCost?.unsegregated,\r\n            },\r\n            {\r\n              name: `${t(\"home:actual\")} ${t(\"home:consumable\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar2\",\r\n              data: actualCost?.material,\r\n            },\r\n            {\r\n              name: `${t(\"home:actual\")} ${t(\"home:labour\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar2\",\r\n              data: actualCost?.labor,\r\n            },\r\n            {\r\n              name: `${t(\"home:actual\")} ${t(\"home:replacement\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar2\",\r\n              data: actualCost?.replacement,\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n\r\n      <div className=\"cost-desc table-responsive mt-4\">\r\n        <table>\r\n          <tr className=\"expected\">\r\n            <td>\r\n              <h5>{t(\"home:expectedCost\")}</h5>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"unseg\"></span>\r\n                {t(\"home:unsegregated\")} {t(\"home:cost\")}\r\n              </h6>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"material\"></span>\r\n                {t(\"home:maintainanceCost\")}\r\n              </h6>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"labour\"></span>\r\n                {t(\"home:labour\")} {t(\"home:cost\")}\r\n              </h6>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"replacement\"></span>\r\n                {t(\"home:replacement\")} {t(\"home:cost\")}\r\n              </h6>\r\n            </td>\r\n          </tr>\r\n          <tr className=\"actual\">\r\n            <td>\r\n              <h5>{t(\"home:actualCost\")}</h5>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"unseg\"></span>\r\n                {t(\"home:unsegregated\")} {t(\"home:cost\")}\r\n              </h6>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"material\"></span>\r\n                {t(\"home:maintainanceCost\")}\r\n              </h6>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"labour\"></span>\r\n                {t(\"home:labour\")} {t(\"home:cost\")}\r\n              </h6>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"replacement\"></span>\r\n                {t(\"home:replacement\")} {t(\"home:cost\")}\r\n              </h6>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  schemeDetails: state.waterSchemeData.waterSchemeDetailsData.data,\r\n  language: state.i18nextData.languageType,\r\n  maintainanceCost: state.reportData.maintainanceCostData.data,\r\n  waterTarrifs: state.waterTarrifsData.waterTarrifData.data,\r\n  intervalData: state.waterSchemeData.getYearIntervals.data,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(MaintainanceCostChartThisYear);\r\n"]},"metadata":{},"sourceType":"module"}