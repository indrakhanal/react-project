{"ast":null,"code":"import { convertADtoBS, calendarData, convertBStoAD } from \"./Dateconverter\";\nconst nepaliCount = ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९'];\nexport const convertEngToNepNumber = number => {\n  return number ? number.toString().split(\"\").map(number => nepaliCount[number] ? nepaliCount[+number] : number).join(\"\") : number;\n};\nexport const convertNepToEngNumber = number => {\n  return number ? number.toString().split(\"\").map(number => nepaliCount.indexOf(number) > -1 ? nepaliCount.indexOf(number) : number).join(\"\") : number;\n};\nexport const zeroPad = num => `${num > 9 ? num : \"0\" + num}`;\nexport const childOf = (childNode, parentNode) => parentNode.contains(childNode);\nexport const stitchDate = function (date) {\n  let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"-\";\n  return `${date.year}${separator}${zeroPad(date.month)}${separator}${zeroPad(date.day)}`;\n};\nexport const range = function (start, end) {\n  let step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  const list = [];\n\n  for (let i = start; i <= end; i = i + step) {\n    list.push(i);\n  }\n\n  return list;\n};\nexport const getDateObject = date => {\n  const today = new Date(date);\n  let day = today.getDate();\n  let month = today.getMonth() + 1;\n  let year = today.getFullYear();\n  return {\n    year,\n    month,\n    day\n  };\n};\nexport const executionDelegation = (execution, delegatedExecution) => {\n  new Promise(resolve => {\n    execution();\n    resolve(null);\n  }).then(() => {\n    delegatedExecution();\n  });\n};\nexport const splitDate = function (date) {\n  let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"-\";\n  const [year, month, day] = date.split(separator);\n  return {\n    day: parseInt(day, 10),\n    month: parseInt(month, 10),\n    year: parseInt(year, 10)\n  };\n};\nexport const validateAdYear = year => {\n  const minAdYear = calendarData.minBsYear - 57;\n  const maxAdYear = calendarData.maxBsYear - 57;\n\n  if (year < minAdYear || year > maxAdYear) {\n    throw new RangeError(`AD year should be in range of ${minAdYear} to ${maxAdYear}`);\n  }\n};\nexport const validateAdMonth = month => {\n  if (month < 1 || month > 12) {\n    throw new RangeError(\"AD month should be in range of 1 to 12\");\n  }\n};\nexport const validateAdDay = day => {\n  if (day < 1 || day > 31) {\n    throw new RangeError(\"AD day should be in range of 1 to 31\");\n  }\n};\nexport const validateBsYear = year => {\n  const midBsYear = calendarData.minBsYear;\n  const maxBsYear = calendarData.maxBsYear;\n\n  if (year < midBsYear || year > maxBsYear) {\n    throw new RangeError(`BS year should be in range of ${midBsYear} to ${maxBsYear}`);\n  }\n};\nexport const validateBsMonth = month => {\n  if (month < 1 || month > 12) {\n    throw new RangeError(\"BS month should be in range of 1 to 12\");\n  }\n};\nexport const validateBsDay = day => {\n  if (day < 1 || day > 32) {\n    throw new RangeError(\"BS day should be in range of 1 to 32\");\n  }\n};\nexport const getNumberOfDaysInBSMonth = yearMonth => {\n  const {\n    year,\n    month\n  } = yearMonth;\n  validateBsYear(year);\n  validateBsMonth(month);\n  let yearCount = 0;\n  const totalYears = year + 1 - calendarData.minBsYear;\n  const bsMonthData = calendarData.extractedBsMonthData[month - 1];\n  return bsMonthData.reduce((numberOfDays, monthData, index) => {\n    if (monthData === 0 || numberOfDays !== 0) {\n      return numberOfDays;\n    }\n\n    const bsMonthUpperDaysIndex = index % 2;\n    yearCount += monthData;\n\n    if (totalYears > yearCount) {\n      return numberOfDays;\n    }\n\n    if (year === 2085 && month === 5 || year === 2088 && month === 5) {\n      return calendarData.bsMonthUpperDays[month - 1][bsMonthUpperDaysIndex] - 2;\n    }\n\n    return calendarData.bsMonthUpperDays[month - 1][bsMonthUpperDaysIndex];\n  }, 0);\n};\nexport const validateDateObject = function (date) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BS;\n  const {\n    year,\n    month,\n    day\n  } = date;\n\n  if (type === BS) {\n    validateBsYear(year);\n    validateBsMonth(month);\n    validateBsDay(day);\n    return;\n  }\n\n  validateAdYear(year);\n  validateAdMonth(month);\n  validateAdDay(day);\n};\nexport const parseBSDate = function (date) {\n  let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"-\";\n  const {\n    year,\n    month,\n    day\n  } = splitDate(date, separator);\n  validateDateObject({\n    year,\n    month,\n    day\n  });\n  const adDate = new Date(BSToAD(date));\n  const firstAdDateInBSMonth = new Date(BSToAD(stitchDate({\n    year,\n    month,\n    day: 1\n  }, separator)));\n  const numberOfDaysInMonth = getNumberOfDaysInBSMonth({\n    year,\n    month\n  });\n  return {\n    adDate,\n    bsDay: day,\n    bsMonth: month,\n    bsYear: year,\n    firstAdDayInBSMonth: firstAdDateInBSMonth,\n    numberOfDaysInBSMonth: numberOfDaysInMonth,\n    weekDay: adDate.getDay()\n  };\n};\nexport const ADToBS = date => {\n  const englishdate = getDateObject(date);\n  const nepaliDate = convertADtoBS(englishdate.year, englishdate.month, englishdate.day);\n  return stitchDate({\n    year: nepaliDate.bsYear,\n    month: nepaliDate.bsMonth,\n    day: nepaliDate.bsDate\n  });\n};\n_c = ADToBS;\nexport const BSToAD = date => {\n  const nepaliDate = date.split(\"-\");\n  const englishDate = convertBStoAD(+nepaliDate[0], +nepaliDate[1], +nepaliDate[2]);\n  return new Date(englishDate);\n}; // Datepicker Types\n\n_c2 = BSToAD;\nexport const ENGLISH = \"en\";\nexport const NEPALI = \"nep\";\nexport const BS = \"BS\";\nexport const AD = \"AD\";\nexport const parsedDateInitialValue = {\n  adDate: new Date(),\n  bsDay: 0,\n  bsMonth: 0,\n  bsYear: 0,\n  firstAdDayInBSMonth: new Date(),\n  numberOfDaysInBSMonth: 0,\n  weekDay: 0\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ADToBS\");\n$RefreshReg$(_c2, \"BSToAD\");","map":{"version":3,"sources":["E:/Smart Tech Solution/React JS/react-project/src/components/React/Datepicker/Datepickerutils.tsx"],"names":["convertADtoBS","calendarData","convertBStoAD","nepaliCount","convertEngToNepNumber","number","toString","split","map","join","convertNepToEngNumber","indexOf","zeroPad","num","childOf","childNode","parentNode","contains","stitchDate","date","separator","year","month","day","range","start","end","step","list","i","push","getDateObject","today","Date","getDate","getMonth","getFullYear","executionDelegation","execution","delegatedExecution","Promise","resolve","then","splitDate","parseInt","validateAdYear","minAdYear","minBsYear","maxAdYear","maxBsYear","RangeError","validateAdMonth","validateAdDay","validateBsYear","midBsYear","validateBsMonth","validateBsDay","getNumberOfDaysInBSMonth","yearMonth","yearCount","totalYears","bsMonthData","extractedBsMonthData","reduce","numberOfDays","monthData","index","bsMonthUpperDaysIndex","bsMonthUpperDays","validateDateObject","type","BS","parseBSDate","adDate","BSToAD","firstAdDateInBSMonth","numberOfDaysInMonth","bsDay","bsMonth","bsYear","firstAdDayInBSMonth","numberOfDaysInBSMonth","weekDay","getDay","ADToBS","englishdate","nepaliDate","bsDate","englishDate","ENGLISH","NEPALI","AD","parsedDateInitialValue"],"mappings":"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","sourcesContent":["import { HTMLAttributes } from \"react\"\r\nimport { convertADtoBS, calendarData, convertBStoAD } from \"./Dateconverter\";\r\n\r\n\r\nconst nepaliCount = ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९'];\r\n\r\nexport const convertEngToNepNumber = (number: any) => {\r\n    return number ? number.toString().split(\"\").map((number: number) => nepaliCount[number] ? nepaliCount[+number] : number).join(\"\") : number;\r\n}\r\nexport const convertNepToEngNumber = (number: any) => {\r\n    return number ? number.toString().split(\"\").map((number: string) => nepaliCount.indexOf(number) > -1 ? nepaliCount.indexOf(number) : number).join(\"\") : number;\r\n}\r\n\r\nexport const zeroPad = (num: number): string => `${num > 9 ? num : \"0\" + num}`\r\n\r\nexport const childOf = (childNode: any, parentNode: any): boolean => parentNode.contains(childNode)\r\n\r\nexport const stitchDate = (date: SplittedDate, separator: string = \"-\"): string => {\r\n    return `${date.year}${separator}${zeroPad(date.month)}${separator}${zeroPad(date.day)}`\r\n}\r\n\r\nexport const range = (start: number, end: number, step: number = 1): number[] => {\r\n    const list: number[] = []\r\n\r\n    for (let i = start; i <= end; i = i + step) {\r\n        list.push(i)\r\n    }\r\n\r\n    return list\r\n}\r\n\r\nexport const getDateObject = (date: string | Date) => {\r\n    const today: Date = new Date(date);\r\n    let day = today.getDate();\r\n    let month = today.getMonth() + 1;\r\n    let year = today.getFullYear();\r\n\r\n    return {year, month, day}\r\n}\r\n\r\nexport const executionDelegation = (execution: voidFunction, delegatedExecution: voidFunction) => {\r\n    new Promise((resolve) => {\r\n        execution()\r\n        resolve(null)\r\n    }).then(() => {\r\n        delegatedExecution()\r\n    })\r\n}\r\n\r\nexport const splitDate = (date: string, separator: string = \"-\"): SplittedDate => {\r\n    const [year, month, day] = date.split(separator)\r\n\r\n    return {\r\n        day: parseInt(day, 10),\r\n        month: parseInt(month, 10),\r\n        year: parseInt(year, 10),\r\n    }\r\n}\r\n\r\n\r\nexport const validateAdYear = (year: number) => {\r\n    const minAdYear = calendarData.minBsYear - 57\r\n    const maxAdYear = calendarData.maxBsYear - 57\r\n\r\n    if (year < minAdYear || year > maxAdYear) {\r\n        throw new RangeError(`AD year should be in range of ${minAdYear} to ${maxAdYear}`)\r\n    }\r\n}\r\n\r\nexport const validateAdMonth = (month: number) => {\r\n    if (month < 1 || month > 12) {\r\n        throw new RangeError(\"AD month should be in range of 1 to 12\")\r\n    }\r\n}\r\n\r\nexport const validateAdDay = (day: number) => {\r\n    if (day < 1 || day > 31) {\r\n        throw new RangeError(\"AD day should be in range of 1 to 31\")\r\n    }\r\n}\r\n\r\nexport const validateBsYear = (year: number) => {\r\n    const midBsYear = calendarData.minBsYear\r\n    const maxBsYear = calendarData.maxBsYear\r\n\r\n    if (year < midBsYear || year > maxBsYear) {\r\n        throw new RangeError(`BS year should be in range of ${midBsYear} to ${maxBsYear}`)\r\n    }\r\n}\r\n\r\nexport const validateBsMonth = (month: number) => {\r\n    if (month < 1 || month > 12) {\r\n        throw new RangeError(\"BS month should be in range of 1 to 12\")\r\n    }\r\n}\r\n\r\nexport const validateBsDay = (day: number) => {\r\n    if (day < 1 || day > 32) {\r\n        throw new RangeError(\"BS day should be in range of 1 to 32\")\r\n    }\r\n}\r\n\r\n\r\nexport const getNumberOfDaysInBSMonth = (yearMonth: { year: number; month: number }): number => {\r\n    const { year, month } = yearMonth\r\n    validateBsYear(year)\r\n    validateBsMonth(month)\r\n\r\n    let yearCount = 0\r\n    const totalYears = year + 1 - calendarData.minBsYear\r\n    const bsMonthData: number[] = calendarData.extractedBsMonthData[month - 1]\r\n\r\n    return bsMonthData.reduce((numberOfDays: number, monthData: number, index: number) => {\r\n        if (monthData === 0 || numberOfDays !== 0) {\r\n            return numberOfDays\r\n        }\r\n\r\n        const bsMonthUpperDaysIndex = index % 2\r\n        yearCount += monthData\r\n        if (totalYears > yearCount) {\r\n            return numberOfDays\r\n        }\r\n\r\n        if ((year === 2085 && month === 5) || (year === 2088 && month === 5)) {\r\n            return calendarData.bsMonthUpperDays[month - 1][bsMonthUpperDaysIndex] - 2\r\n        }\r\n\r\n        return calendarData.bsMonthUpperDays[month - 1][bsMonthUpperDaysIndex]\r\n    }, 0)\r\n}\r\n\r\nexport const validateDateObject = (date: SplittedDate, type: string = BS) => {\r\n    const { year, month, day } = date\r\n\r\n    if (type === BS) {\r\n        validateBsYear(year)\r\n        validateBsMonth(month)\r\n        validateBsDay(day)\r\n\r\n        return\r\n    }\r\n\r\n    validateAdYear(year)\r\n    validateAdMonth(month)\r\n    validateAdDay(day)\r\n}\r\n\r\nexport const parseBSDate = (date: string, separator: string = \"-\"): ParsedDate => {\r\n    const { year, month, day }: SplittedDate = splitDate(date, separator)\r\n\r\n    validateDateObject({ year, month, day })\r\n\r\n    const adDate = new Date(BSToAD(date))\r\n    const firstAdDateInBSMonth = new Date(BSToAD(stitchDate({ year, month, day: 1 }, separator)))\r\n    const numberOfDaysInMonth = getNumberOfDaysInBSMonth({ year, month })\r\n\r\n    return {\r\n        adDate,\r\n        bsDay: day,\r\n        bsMonth: month,\r\n        bsYear: year,\r\n        firstAdDayInBSMonth: firstAdDateInBSMonth,\r\n        numberOfDaysInBSMonth: numberOfDaysInMonth,\r\n        weekDay: adDate.getDay(),\r\n    }\r\n}\r\n\r\nexport const ADToBS = (date: Date) => {\r\n    const englishdate = getDateObject(date);\r\n    const nepaliDate = convertADtoBS(englishdate.year, englishdate.month, englishdate.day);\r\n    return stitchDate({year: nepaliDate.bsYear, month: nepaliDate.bsMonth, day: nepaliDate.bsDate});\r\n}\r\n\r\nexport const BSToAD = (date: string) => {\r\n    const nepaliDate = date.split(\"-\");\r\n    const englishDate = convertBStoAD(+nepaliDate[0], +nepaliDate[1], +nepaliDate[2]);\r\n    return new Date(englishDate);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Datepicker Types\r\nexport type voidFunction = () => void\r\n\r\nexport const ENGLISH = \"en\"\r\nexport const NEPALI = \"nep\"\r\nexport const BS = \"BS\"\r\nexport const AD = \"AD\"\r\n\r\nexport type localeType = \"en\" | \"nep\"\r\n\r\nexport interface NepaliDatePickerOptions {\r\n    closeOnSelect?: boolean\r\n    // calenderLocale: localeType\r\n    // valueLocale: localeType\r\n}\r\n\r\nexport interface INepaliDatePicker extends NepaliDatePickerOptions {\r\n    value?: string\r\n    engDate?: string\r\n    id?: string\r\n    name?: string\r\n    className?: HTMLAttributes<HTMLDivElement>[\"className\"]\r\n    wrapperClassName?: HTMLAttributes<HTMLInputElement>[\"className\"]\r\n    onChange?: (nepdate: string, engdate: Date | string) => void\r\n    onSelect?: (value: string) => void\r\n    options?: NepaliDatepickerEvents\r\n    maxDate?: string\r\n    maxDateToday?: boolean;\r\n    minDate?: string\r\n    minDateToday?: boolean;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport interface NepaliDatePickerProps {\r\n    value?: INepaliDatePicker[\"value\"]\r\n    className?: INepaliDatePicker[\"className\"]\r\n    wrapperClassName?: INepaliDatePicker[\"wrapperClassName\"]\r\n    onChange?: INepaliDatePicker[\"onChange\"]\r\n    onSelect?: INepaliDatePicker[\"onSelect\"]\r\n    options?: {\r\n        closeOnSelect?: NepaliDatePickerOptions[\"closeOnSelect\"]\r\n        // calenderLocale?: NepaliDatePickerOptions[\"calenderLocale\"]\r\n        // valueLocale?: NepaliDatePickerOptions[\"valueLocale\"]\r\n    }\r\n}\r\n\r\nexport interface NepaliDatepickerEvents {\r\n    change?: (value: string) => void\r\n    yearSelect?: (year: number) => void\r\n    monthSelect?: ({ year, month }: YearMonth) => void\r\n    daySelect?: ({ year, month, day }: YearMonthDate) => void\r\n    previousMonthSelect?: ({ month, year }: YearMonth) => void\r\n    nextMonthSelect?: ({ year, month }: YearMonth) => void\r\n    todaySelect?: ({ year, month, day }: YearMonthDate) => void\r\n}\r\n\r\nexport interface ParsedDate {\r\n    bsYear: number\r\n    bsMonth: number\r\n    bsDay: number\r\n    weekDay: number\r\n    adDate: Date\r\n    numberOfDaysInBSMonth: number\r\n    firstAdDayInBSMonth: Date\r\n}\r\n\r\nexport const parsedDateInitialValue: ParsedDate = {\r\n    adDate: new Date(),\r\n    bsDay: 0,\r\n    bsMonth: 0,\r\n    bsYear: 0,\r\n    firstAdDayInBSMonth: new Date(),\r\n    numberOfDaysInBSMonth: 0,\r\n    weekDay: 0,\r\n}\r\n\r\nexport interface SplittedDate {\r\n    year: number\r\n    month: number\r\n    day: number\r\n}\r\n\r\nexport type YearMonthDate = SplittedDate\r\n\r\nexport interface YearMonth {\r\n    year: number\r\n    month: number\r\n}"]},"metadata":{},"sourceType":"module"}