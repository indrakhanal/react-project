{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\S.K. COMPUTER\\\\OneDrive\\\\Desktop\\\\react-project\\\\src\\\\components\\\\React\\\\Datepicker\\\\Datepicker.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { Calender } from \"./Calender\";\nimport { childOf, stitchDate, ADToBS, BSToAD, validateBsYear, validateBsMonth, validateBsDay } from \"./Datepickerutils\";\nimport \"./Datepicker.scss\";\n\nconst NepaliDatePicker = props => {\n  _s();\n\n  const {\n    wrapperClassName,\n    className = \"form-control\",\n    value,\n    disabled = false,\n    engDate,\n    onChange,\n    onSelect,\n    options = {},\n    closeOnSelect = true,\n    maxDate,\n    maxDateToday,\n    minDate,\n    minDateToday,\n    id,\n    name\n  } = props; // DatePicker references\n\n  const nepaliDatePickerWrapper = useRef(null);\n  const nepaliDatePickerInput = useRef(null);\n  const [date, setDate] = useState(\"\");\n  const [showCalendar, setShowCalendar] = useState(false);\n  useEffect(() => {\n    if (value) {\n      // If invalid date\n      try {\n        if (value) {\n          const [year, month, day] = value.split(\"-\");\n\n          if (!(year && month && day)) {\n            throw new RangeError(\"Invalid BS date\");\n          }\n\n          validateBsYear(+year); //Throws Error if invalid\n\n          validateBsMonth(+month); //Throws Error if invalid\n\n          validateBsDay(+day); //Throws Error if invalid\n\n          setDate(value || \"\");\n        }\n      } catch (e) {\n        setDate(\"\");\n        onChange && onChange(\"\", \"\");\n      }\n    }\n  }, [value]);\n  useEffect(() => {\n    if (engDate) {\n      let nepDate = ADToBS(new Date(engDate));\n\n      if (!value || value !== nepDate) {\n        onChange && onChange(nepDate, new Date(engDate));\n      }\n    }\n  }, [engDate]);\n  const handleClickOutside = useCallback(event => {\n    if (nepaliDatePickerWrapper.current && childOf(event.target, nepaliDatePickerWrapper.current)) {\n      return;\n    }\n\n    setShowCalendar(false);\n  }, []);\n  useLayoutEffect(() => {\n    if (showCalendar) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [showCalendar]);\n  useLayoutEffect(() => {\n    if (showCalendar && nepaliDatePickerWrapper.current) {\n      const nepaliDatePicker = nepaliDatePickerWrapper.current.getBoundingClientRect();\n      const screenHeight = window.innerHeight;\n      const calender = nepaliDatePickerWrapper.current.querySelector(\".calender\");\n\n      if (calender) {\n        setTimeout(() => {\n          const calenderHeight = calender.clientHeight;\n\n          if (calenderHeight + nepaliDatePicker.bottom > screenHeight) {\n            if (calenderHeight < nepaliDatePicker.top) {\n              calender.style.bottom = `${nepaliDatePicker.height}px`;\n            }\n          }\n        }, 0);\n      }\n    }\n  }, [showCalendar]);\n  const handleOnChange = useCallback(changedDate => {\n    setDate(changedDate);\n\n    if (onChange) {\n      onChange(changedDate, BSToAD(changedDate));\n    }\n  }, []);\n  const handleOnDaySelect = useCallback(selectedDate => {\n    if (closeOnSelect) {\n      setShowCalendar(false);\n    }\n\n    if (onSelect) {\n      onSelect(stitchDate(selectedDate));\n    }\n  }, []);\n  const datepickerEvents = {\n    change: handleOnChange,\n    daySelect: handleOnDaySelect,\n    todaySelect: handleOnDaySelect,\n    yearSelect: options.yearSelect,\n    monthSelect: options.monthSelect,\n    previousMonthSelect: options.previousMonthSelect,\n    nextMonthSelect: options.nextMonthSelect\n  };\n  const [maxDateLimit, setmaxDateLimit] = useState({\n    year: 0,\n    month: 0,\n    day: 0\n  });\n  useEffect(() => {\n    if (maxDate || maxDateToday) {\n      let maxDateMapped;\n\n      if (maxDate) {\n        maxDateMapped = maxDate === null || maxDate === void 0 ? void 0 : maxDate.split(\"-\");\n      } else if (maxDateToday) {\n        maxDateMapped = ADToBS(new Date()).split(\"-\");\n      }\n\n      setmaxDateLimit({\n        year: +maxDateMapped[0],\n        month: +maxDateMapped[1],\n        day: +maxDateMapped[2]\n      });\n    } else {\n      setmaxDateLimit({\n        year: 0,\n        month: 0,\n        day: 0\n      });\n    }\n  }, [maxDate, maxDateToday]);\n  const [minDateLimit, setminDateLimit] = useState({\n    year: 0,\n    month: 0,\n    day: 0\n  });\n  useEffect(() => {\n    if (minDate || minDateToday) {\n      let minDateMapped;\n\n      if (minDate) {\n        minDateMapped = minDate === null || minDate === void 0 ? void 0 : minDate.split(\"-\");\n      } else if (minDateToday) {\n        minDateMapped = ADToBS(new Date()).split(\"-\");\n      }\n\n      setminDateLimit({\n        year: +minDateMapped[0],\n        month: +minDateMapped[1],\n        day: +minDateMapped[2]\n      });\n    } else {\n      setminDateLimit({\n        year: 0,\n        month: 0,\n        day: 0\n      });\n    }\n  }, [minDate, minDateToday]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: nepaliDatePickerWrapper,\n    className: `nepali-date-picker ${wrapperClassName || \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    ref: nepaliDatePickerInput,\n    className: className,\n    id: id,\n    name: name,\n    readOnly: disabled,\n    autoComplete: \"off\",\n    value: date,\n    onClick: () => setShowCalendar(() => !showCalendar),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ic-calendar\",\n    onClick: () => setShowCalendar(() => !showCalendar),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }), showCalendar && /*#__PURE__*/React.createElement(Calender, {\n    value: date,\n    events: datepickerEvents,\n    maxDate: maxDateLimit,\n    minDate: minDateLimit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }));\n};\n\n_s(NepaliDatePicker, \"0npaTGJtixqtIZcqR5dpDwfut3w=\");\n\n_c = NepaliDatePicker;\nexport default NepaliDatePicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"NepaliDatePicker\");","map":{"version":3,"sources":["C:/Users/S.K. COMPUTER/OneDrive/Desktop/react-project/src/components/React/Datepicker/Datepicker.tsx"],"names":["React","useCallback","useEffect","useLayoutEffect","useRef","useState","Calender","childOf","stitchDate","ADToBS","BSToAD","validateBsYear","validateBsMonth","validateBsDay","NepaliDatePicker","props","wrapperClassName","className","value","disabled","engDate","onChange","onSelect","options","closeOnSelect","maxDate","maxDateToday","minDate","minDateToday","id","name","nepaliDatePickerWrapper","nepaliDatePickerInput","date","setDate","showCalendar","setShowCalendar","year","month","day","split","RangeError","e","nepDate","Date","handleClickOutside","event","current","target","document","addEventListener","removeEventListener","nepaliDatePicker","getBoundingClientRect","screenHeight","window","innerHeight","calender","querySelector","setTimeout","calenderHeight","clientHeight","bottom","top","style","height","handleOnChange","changedDate","handleOnDaySelect","selectedDate","datepickerEvents","change","daySelect","todaySelect","yearSelect","monthSelect","previousMonthSelect","nextMonthSelect","maxDateLimit","setmaxDateLimit","maxDateMapped","minDateLimit","setminDateLimit","minDateMapped"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useLayoutEffect, useRef, useState } from \"react\"\r\n\r\nimport { Calender } from \"./Calender\"\r\nimport { INepaliDatePicker, NepaliDatepickerEvents, childOf, stitchDate, ADToBS, BSToAD, validateBsYear, validateBsMonth, validateBsDay } from \"./Datepickerutils\"\r\nimport \"./Datepicker.scss\"\r\n\r\n\r\nconst NepaliDatePicker = (props: INepaliDatePicker) => {\r\n    const { wrapperClassName, className = \"form-control\", value, disabled = false, engDate, onChange, onSelect, options = {}, closeOnSelect = true, maxDate, maxDateToday, minDate, minDateToday, id, name } = props;\r\n\r\n    // DatePicker references\r\n    const nepaliDatePickerWrapper = useRef<HTMLDivElement>(null)\r\n    const nepaliDatePickerInput = useRef<HTMLInputElement>(null)\r\n\r\n    const [date, setDate] = useState<string>(\"\")\r\n    const [showCalendar, setShowCalendar] = useState<boolean>(false)\r\n\r\n\r\n    useEffect(() => {\r\n        if (value) {\r\n            // If invalid date\r\n            try {\r\n                if (value) {\r\n                    const [year, month, day] = value.split(\"-\");\r\n\r\n                    if (!(year && month && day)) {\r\n                        throw new RangeError(\"Invalid BS date\")\r\n                    }\r\n\r\n                    validateBsYear(+year); //Throws Error if invalid\r\n                    validateBsMonth(+month); //Throws Error if invalid\r\n                    validateBsDay(+day); //Throws Error if invalid\r\n\r\n                    setDate(value || \"\");\r\n                }\r\n            }\r\n            catch (e) {\r\n                setDate(\"\");\r\n                onChange && onChange(\"\", \"\");\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    useEffect(() => {\r\n        if (engDate) {\r\n            let nepDate = ADToBS(new Date(engDate));\r\n            if (!value || value !== nepDate) {\r\n                onChange && onChange(nepDate, new Date(engDate));\r\n            }\r\n        }\r\n    }, [engDate])\r\n\r\n    const handleClickOutside = useCallback((event: any) => {\r\n        if (nepaliDatePickerWrapper.current && childOf(event.target, nepaliDatePickerWrapper.current)) {\r\n            return\r\n        }\r\n\r\n        setShowCalendar(false)\r\n    }, [])\r\n\r\n    useLayoutEffect(() => {\r\n        if (showCalendar) {\r\n            document.addEventListener(\"mousedown\", handleClickOutside)\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside)\r\n        }\r\n    }, [showCalendar])\r\n\r\n    useLayoutEffect(() => {\r\n        if (showCalendar && nepaliDatePickerWrapper.current) {\r\n            const nepaliDatePicker = nepaliDatePickerWrapper.current.getBoundingClientRect()\r\n            const screenHeight = window.innerHeight\r\n\r\n            const calender: HTMLDivElement | null = nepaliDatePickerWrapper.current.querySelector(\".calender\")\r\n            if (calender) {\r\n                setTimeout(() => {\r\n                    const calenderHeight = calender.clientHeight\r\n\r\n                    if (calenderHeight + nepaliDatePicker.bottom > screenHeight) {\r\n                        if (calenderHeight < nepaliDatePicker.top) {\r\n                            calender.style.bottom = `${nepaliDatePicker.height}px`\r\n                        }\r\n                    }\r\n                }, 0)\r\n            }\r\n        }\r\n    }, [showCalendar])\r\n\r\n    const handleOnChange = useCallback((changedDate: string) => {\r\n        setDate(changedDate)\r\n        if (onChange) {\r\n            onChange(changedDate, BSToAD(changedDate))\r\n        }\r\n    }, [])\r\n\r\n    const handleOnDaySelect = useCallback((selectedDate) => {\r\n        if (closeOnSelect) {\r\n            setShowCalendar(false)\r\n        }\r\n        if (onSelect) {\r\n            onSelect(stitchDate(selectedDate))\r\n        }\r\n    }, [])\r\n\r\n    const datepickerEvents: NepaliDatepickerEvents = {\r\n        change: handleOnChange,\r\n        daySelect: handleOnDaySelect,\r\n        todaySelect: handleOnDaySelect,\r\n\r\n        yearSelect: options.yearSelect,\r\n        monthSelect: options.monthSelect,\r\n        previousMonthSelect: options.previousMonthSelect,\r\n        nextMonthSelect: options.nextMonthSelect\r\n    }\r\n\r\n    const [maxDateLimit, setmaxDateLimit] = useState({ year: 0, month: 0, day: 0 });\r\n    useEffect(() => {\r\n        if (maxDate || maxDateToday) {\r\n            let maxDateMapped: any;\r\n            if (maxDate) {\r\n                maxDateMapped = maxDate?.split(\"-\");\r\n            }\r\n            else if (maxDateToday) {\r\n                maxDateMapped = ADToBS(new Date()).split(\"-\");\r\n            }\r\n            setmaxDateLimit({ year: +maxDateMapped[0], month: +maxDateMapped[1], day: +maxDateMapped[2] });\r\n        } else {\r\n            setmaxDateLimit({ year: 0, month: 0, day: 0 });\r\n        }\r\n    }, [maxDate, maxDateToday])\r\n\r\n    const [minDateLimit, setminDateLimit] = useState({ year: 0, month: 0, day: 0 });\r\n    useEffect(() => {\r\n        if (minDate || minDateToday) {\r\n            let minDateMapped: any;\r\n            if (minDate) {\r\n                minDateMapped = minDate?.split(\"-\");\r\n            }\r\n            else if (minDateToday) {\r\n                minDateMapped = ADToBS(new Date()).split(\"-\");\r\n            }\r\n            setminDateLimit({ year: +minDateMapped[0], month: +minDateMapped[1], day: +minDateMapped[2] });\r\n        } else {\r\n            setminDateLimit({ year: 0, month: 0, day: 0 });\r\n        }\r\n    }, [minDate, minDateToday])\r\n\r\n    return (\r\n        <div ref={nepaliDatePickerWrapper} className={`nepali-date-picker ${wrapperClassName || \"\"}`}>\r\n            <input\r\n                type='text'\r\n                ref={nepaliDatePickerInput}\r\n                className={className}\r\n                id={id}\r\n                name={name}\r\n                readOnly={disabled}\r\n                autoComplete=\"off\"\r\n                value={date}\r\n                onClick={() => setShowCalendar(() => !showCalendar)}\r\n            />\r\n            <i className=\"ic-calendar\" onClick={() => setShowCalendar(() => !showCalendar)}></i>\r\n            {showCalendar &&\r\n                <Calender\r\n                    value={date}\r\n                    events={datepickerEvents}\r\n                    maxDate={maxDateLimit}\r\n                    minDate={minDateLimit}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NepaliDatePicker;"]},"metadata":{},"sourceType":"module"}