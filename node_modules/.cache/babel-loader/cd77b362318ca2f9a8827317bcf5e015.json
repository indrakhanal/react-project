{"ast":null,"code":"import { apiList } from \"../../actionNames\";\nimport initDefaultAction from \"../../helper/default-action\";\nimport initDispatchTypes from \"../../helper/default-action-type\";\nimport initDefaultReducer from \"../../helper/default-reducer\";\nimport initialState from \"../../helper/default-state\";\nimport TokenService from \"../../../services/jwt-token/jwt-token\";\nconst initialLoginState = initialState;\nconst apiDetails = Object.freeze(apiList.oauth.login);\nexport default function loginReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialLoginState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const stateCopy = Object.assign({}, state);\n  const actionName = apiDetails.actionName;\n  return initDefaultReducer(actionName, action, stateCopy);\n}\nexport const loginUser = requestData => async dispatch => {\n  var _loginData$data, _loginData$data$token, _loginData$data2, _loginData$data2$toke;\n\n  const loginData = await initDefaultAction(apiDetails, dispatch, {\n    requestData,\n    disableSuccessToast: true\n  });\n\n  if (loginData && loginData.data && loginData !== null && loginData !== void 0 && (_loginData$data = loginData.data) !== null && _loginData$data !== void 0 && (_loginData$data$token = _loginData$data.tokens) !== null && _loginData$data$token !== void 0 && _loginData$data$token.access && typeof (loginData === null || loginData === void 0 ? void 0 : (_loginData$data2 = loginData.data) === null || _loginData$data2 === void 0 ? void 0 : (_loginData$data2$toke = _loginData$data2.tokens) === null || _loginData$data2$toke === void 0 ? void 0 : _loginData$data2$toke.access) === \"string\") {\n    const dispatchTypes = initDispatchTypes(apiDetails.actionName); // Override login dispatch to remove data except tokens.access\n\n    dispatch({\n      type: dispatchTypes.successDispatch,\n      payload: {\n        status: 1,\n        data: loginData.data.tokens.access\n      }\n    });\n    TokenService.setToken(loginData.data);\n  }\n\n  return loginData;\n};","map":{"version":3,"sources":["E:/Smart Tech Solution/React JS/react-project/src/store/modules/login/login.ts"],"names":["apiList","initDefaultAction","initDispatchTypes","initDefaultReducer","initialState","TokenService","initialLoginState","apiDetails","Object","freeze","oauth","login","loginReducer","state","action","stateCopy","assign","actionName","loginUser","requestData","dispatch","loginData","disableSuccessToast","data","tokens","access","dispatchTypes","type","successDispatch","payload","status","setToken"],"mappings":"AAGA,SAASA,OAAT,QAAwB,mBAAxB;AAEA,OAAOC,iBAAP,MAAqD,6BAArD;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AAaA,MAAMC,iBAAiB,GAAGF,YAA1B;AACA,MAAMG,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcT,OAAO,CAACU,KAAR,CAAcC,KAA5B,CAAnB;AAEA,eAAe,SAASC,YAAT,GAAqG;AAAA,MAA/EC,KAA+E,uEAAvEP,iBAAuE;AAAA,MAApDQ,MAAoD;AAChH,QAAMC,SAAS,GAAGP,MAAM,CAACQ,MAAP,CAAc,EAAd,EAAkBH,KAAlB,CAAlB;AACA,QAAMI,UAAU,GAAGV,UAAU,CAACU,UAA9B;AAEA,SAAOd,kBAAkB,CAACc,UAAD,EAAaH,MAAb,EAAqBC,SAArB,CAAzB;AACH;AAED,OAAO,MAAMG,SAAS,GAAIC,WAAD,IAA8E,MAAOC,QAAP,IAA8B;AAAA;;AACjI,QAAMC,SAAS,GAAG,MAAMpB,iBAAiB,CAACM,UAAD,EAAaa,QAAb,EAAuB;AAAED,IAAAA,WAAF;AAAeG,IAAAA,mBAAmB,EAAE;AAApC,GAAvB,CAAzC;;AAEA,MAAID,SAAS,IAAIA,SAAS,CAACE,IAAvB,IAA+BF,SAA/B,aAA+BA,SAA/B,kCAA+BA,SAAS,CAAEE,IAA1C,qEAA+B,gBAAiBC,MAAhD,kDAA+B,sBAAyBC,MAAxD,IAAkE,QAAOJ,SAAP,aAAOA,SAAP,2CAAOA,SAAS,CAAEE,IAAlB,8EAAO,iBAAiBC,MAAxB,0DAAO,sBAAyBC,MAAhC,MAA2C,QAAjH,EAA2H;AACvH,UAAMC,aAAa,GAAGxB,iBAAiB,CAACK,UAAU,CAACU,UAAZ,CAAvC,CADuH,CAEvH;;AACAG,IAAAA,QAAQ,CAAC;AAAEO,MAAAA,IAAI,EAAED,aAAa,CAACE,eAAtB;AAAuCC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,MAAM,EAAE,CAAV;AAAaP,QAAAA,IAAI,EAAEF,SAAS,CAACE,IAAV,CAAeC,MAAf,CAAsBC;AAAzC;AAAhD,KAAD,CAAR;AACApB,IAAAA,YAAY,CAAC0B,QAAb,CAAsBV,SAAS,CAACE,IAAhC;AACH;;AAED,SAAOF,SAAP;AACH,CAXM","sourcesContent":["import { Dispatch } from \"redux\";\r\n\r\nimport { AppThunk } from \"../..\";\r\nimport { apiList } from \"../../actionNames\";\r\nimport { UserCredentials } from \"../../../core/Public/Login/Login\";\r\nimport initDefaultAction, { APIResponseDetail } from \"../../helper/default-action\";\r\nimport initDispatchTypes from \"../../helper/default-action-type\";\r\nimport initDefaultReducer from \"../../helper/default-reducer\";\r\nimport initialState from \"../../helper/default-state\";\r\nimport TokenService from \"../../../services/jwt-token/jwt-token\";\r\n\r\ntype LoginResponse = { \r\n    data: {\r\n        \"tokens\": {\r\n            access: string\r\n            refresh: string\r\n        },\r\n        \"detail\": string,\r\n        \"error\": string,\r\n    }\r\n}\r\n\r\nconst initialLoginState = initialState;\r\nconst apiDetails = Object.freeze(apiList.oauth.login);\r\n\r\nexport default function loginReducer(state = initialLoginState, action: DefaultAction): DefaultState<LoginResponse> {\r\n    const stateCopy = Object.assign({}, state);\r\n    const actionName = apiDetails.actionName;\r\n\r\n    return initDefaultReducer(actionName, action, stateCopy);\r\n}\r\n\r\nexport const loginUser = (requestData: UserCredentials): AppThunk<APIResponseDetail<LoginResponse>> => async (dispatch: Dispatch) => {\r\n    const loginData = await initDefaultAction(apiDetails, dispatch, { requestData, disableSuccessToast: true });\r\n \r\n    if (loginData && loginData.data && loginData?.data?.tokens?.access && typeof loginData?.data?.tokens?.access === \"string\") {\r\n        const dispatchTypes = initDispatchTypes(apiDetails.actionName);\r\n        // Override login dispatch to remove data except tokens.access\r\n        dispatch({ type: dispatchTypes.successDispatch, payload: { status: 1, data: loginData.data.tokens.access } });\r\n        TokenService.setToken(loginData.data);\r\n    }\r\n\r\n    return loginData;\r\n};"]},"metadata":{},"sourceType":"module"}