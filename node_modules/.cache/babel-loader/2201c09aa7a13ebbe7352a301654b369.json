{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\S.K. COMPUTER\\\\OneDrive\\\\Desktop\\\\react-project\\\\src\\\\core\\\\Public\\\\Maintainance\\\\CostVisualization\\\\BarChart\\\\ChartThisYear.tsx\",\n    _s = $RefreshSig$();\n\nimport GeneralChart from \"components/UI/Charts/General\";\nimport CustomCheckBox from \"components/UI/CustomCheckbox\";\nimport { getFiscalYearData, getMonthByLanguageAndScheme, getNumberByLanguage } from \"i18n/i18n\";\nimport React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport DataTable from \"./DataTable\";\n\nconst BarChartThisYear = props => {\n  _s();\n\n  const {\n    selected,\n    setSelected\n  } = props;\n  const {\n    t\n  } = useTranslation();\n  const [chartData, setChartData] = useState();\n  const [seriesData, setSeriesData] = useState();\n  const [tableData, setTableData] = useState();\n  const options = [{\n    id: \"actual_unsegregated\",\n    name: `${t(\"home:actual\")} ${t(\"home:unsegregated\")}`,\n    color: \"#e5f1ff\"\n  }, {\n    id: \"actual_material\",\n    name: `${t(\"home:actual\")} ${t(\"home:consumable\")}`,\n    color: \"#69a7f1\"\n  }, {\n    id: \"actual_labor\",\n    name: `${t(\"home:actual\")} ${t(\"home:labour\")}`,\n    color: \"#2680eb\"\n  }, {\n    id: \"actual_replacement\",\n    name: `${t(\"home:actual\")} ${t(\"home:replacement\")}`,\n    color: \"#accef7\"\n  }, {\n    id: \"expected_unsegregated\",\n    name: `${t(\"home:expected\")} ${t(\"home:unsegregated\")}`,\n    color: \"#ffefdb\"\n  }, {\n    id: \"expected_material\",\n    name: `${t(\"home:expected\")} ${t(\"home:consumable\")}`,\n    color: \"#f1b369\"\n  }, {\n    id: \"expected_labor\",\n    name: `${t(\"home:expected\")} ${t(\"home:labour\")}`,\n    color: \"#eb9126\"\n  }, {\n    id: \"expected_replacement\",\n    name: `${t(\"home:expected\")} ${t(\"home:replacement\")}`,\n    color: \"#f7d5ac\"\n  }];\n  useEffect(() => {\n    if (props.maintainanceCost && props.intervalData) {\n      var _props$schemeDetails;\n\n      const fiscalYearArray = getFiscalYearData(props.intervalData, (_props$schemeDetails = props.schemeDetails) === null || _props$schemeDetails === void 0 ? void 0 : _props$schemeDetails.system_date_format);\n\n      const sortAndMapArray = (array, monthKey, key, color) => {\n        return fiscalYearArray === null || fiscalYearArray === void 0 ? void 0 : fiscalYearArray.map(item => {\n          const findElement = array === null || array === void 0 ? void 0 : array.find(inc => {\n            var _inc$monthKey, _inc$monthKey$toStrin;\n\n            console.log(inc, item, \"testaaaa\");\n            return +inc[monthKey] < 10 ? +((_inc$monthKey = inc[monthKey]) === null || _inc$monthKey === void 0 ? void 0 : (_inc$monthKey$toStrin = _inc$monthKey.toString()) === null || _inc$monthKey$toStrin === void 0 ? void 0 : _inc$monthKey$toStrin.replace(\"0\", \"\")) === +item : +inc[monthKey] === +item;\n          });\n          return {\n            value: findElement ? findElement[key] : 0,\n            itemStyle: {\n              color\n            }\n          };\n        });\n      };\n\n      const chartData = {\n        years: fiscalYearArray === null || fiscalYearArray === void 0 ? void 0 : fiscalYearArray.map(item => {\n          var _props$schemeDetails2;\n\n          return getMonthByLanguageAndScheme(item, (_props$schemeDetails2 = props.schemeDetails) === null || _props$schemeDetails2 === void 0 ? void 0 : _props$schemeDetails2.system_date_format);\n        }),\n        actual_unsegregated: sortAndMapArray(props.maintainanceCost.actual_cost, \"maintenance_date__month\", \"unsegregated_cost\", \"rgba(196,196,196,1)\"),\n        actual_material: sortAndMapArray(props.maintainanceCost.actual_cost, \"maintenance_date__month\", \"material_cost\", \"rgba(215,215,215,1)\"),\n        actual_labor: sortAndMapArray(props.maintainanceCost.actual_cost, \"maintenance_date__month\", \"labour_cost\", \"rgba(229,229,229,1)\"),\n        actual_replacement: sortAndMapArray(props.maintainanceCost.actual_cost, \"maintenance_date__month\", \"replacement_cost\", \"rgba(242,242,242,1)\"),\n        expected_unsegregated: sortAndMapArray(props.maintainanceCost.expected_cost, \"next_action__month\", \"unsegregated_cost\", \"rgba(38,128,235,1)\"),\n        expected_material: sortAndMapArray(props.maintainanceCost.expected_cost, \"next_action__month\", \"material_cost\", \"rgba(139,173,213,1)\"),\n        expected_labor: sortAndMapArray(props.maintainanceCost.expected_cost, \"next_action__month\", \"labour_cost\", \"rgba(189,213,242,1)\"),\n        expected_replacement: sortAndMapArray(props.maintainanceCost.expected_cost, \"next_action__month\", \"replacement_cost\", \"rgba(204,221,234,1)\"),\n        expected_total: props.maintainanceCost.expected_cost.map(item => ({\n          date: item.next_action__month,\n          value: item.actual_cost_total || 0\n        })),\n        actual_total: props.maintainanceCost.actual_cost.map(item => ({\n          date: item.next_action__month,\n          value: item.actual_cost_total || 0\n        }))\n      };\n      setChartData(chartData);\n    }\n  }, [props.language, props.maintainanceCost, props.intervalData]);\n\n  const handleSelect = name => {\n    if (selected !== null && selected !== void 0 && selected.includes(name)) {\n      const filteredData = selected.filter(item => item !== name);\n      setSelected(filteredData);\n    } else {\n      setSelected([...selected, name]);\n    }\n  };\n\n  useEffect(() => {\n    const selectedData = selected.map(item => {\n      var _options$find, _options$find2;\n\n      return {\n        name: (_options$find = options.find(opt => opt.id === item)) === null || _options$find === void 0 ? void 0 : _options$find.name,\n        type: \"bar\",\n        stack: item !== null && item !== void 0 && item.includes(\"expec\") ? \"expected\" : \"actual\",\n        areaStyle: {\n          color: (_options$find2 = options.find(opt => opt.id === item)) === null || _options$find2 === void 0 ? void 0 : _options$find2.color\n        },\n        data: chartData && chartData[item]\n      };\n    });\n    const tableData = selected.map(item => {\n      var _options$find3, _options$find4;\n\n      return {\n        name: ((_options$find3 = options.find(opt => opt.id === item)) === null || _options$find3 === void 0 ? void 0 : _options$find3.name) || \"\",\n        color: ((_options$find4 = options.find(opt => opt.id === item)) === null || _options$find4 === void 0 ? void 0 : _options$find4.color) || \"\",\n        data: chartData && chartData[item]\n      };\n    });\n    console.log(tableData, \"tableDatatableData\");\n    setSeriesData(selectedData);\n    setTableData(tableData);\n  }, [chartData, selected]);\n  const optionData = {\n    tooltip: {\n      trigger: \"axis\",\n      axisPointer: {\n        type: \"shadow\"\n      } // formatter: handleCustomTooltip,\n\n    },\n    legend: {\n      show: false\n    },\n    grid: {\n      left: \"3%\",\n      right: \"4%\",\n      bottom: \"3%\",\n      top: \"8%\",\n      containLabel: true\n    },\n    xAxis: {\n      type: \"category\",\n      data: chartData === null || chartData === void 0 ? void 0 : chartData.years,\n      axisLabel: {\n        formatter: function (data) {\n          return (data === null || data === void 0 ? void 0 : data.replace(\"Year\", \"\")) || \" \";\n        }\n      }\n    },\n    yAxis: {\n      type: \"value\",\n      axisLabel: {\n        formatter: function (name) {\n          return getNumberByLanguage(name);\n        }\n      }\n    },\n    series: seriesData\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GeneralChart, {\n    minHeight: 300,\n    options: optionData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }\n  }), (tableData === null || tableData === void 0 ? void 0 : tableData.length) > 0 && /*#__PURE__*/React.createElement(DataTable, {\n    months: true,\n    years: chartData === null || chartData === void 0 ? void 0 : chartData.years,\n    tableData: tableData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-3 chartOptions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }\n  }, \"Select\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }\n  }, \"Visualization Parameters\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }\n  }, options.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CustomCheckBox, {\n    id: \"\" + item.id,\n    label: item.name,\n    onChange: e => handleSelect(item.id),\n    checked: selected.includes(item.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 15\n    }\n  }))))));\n};\n\n_s(BarChartThisYear, \"jjiPfI2O0qjqui6f8kW3cEOEUvI=\", false, function () {\n  return [useTranslation];\n});\n\n_c = BarChartThisYear;\n\nconst mapStateToProps = state => ({\n  schemeDetails: state.waterSchemeData.waterSchemeDetailsData.data,\n  language: state.i18nextData.languageType,\n  maintainanceCost: state.reportData.maintainanceCostData.data,\n  intervalData: state.waterSchemeData.getYearIntervals.data\n});\n\nconst mapDispatchToProps = {};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(BarChartThisYear);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BarChartThisYear\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/S.K. COMPUTER/OneDrive/Desktop/react-project/src/core/Public/Maintainance/CostVisualization/BarChart/ChartThisYear.tsx"],"names":["GeneralChart","CustomCheckBox","getFiscalYearData","getMonthByLanguageAndScheme","getNumberByLanguage","React","useEffect","useState","useTranslation","connect","DataTable","BarChartThisYear","props","selected","setSelected","t","chartData","setChartData","seriesData","setSeriesData","tableData","setTableData","options","id","name","color","maintainanceCost","intervalData","fiscalYearArray","schemeDetails","system_date_format","sortAndMapArray","array","monthKey","key","map","item","findElement","find","inc","console","log","toString","replace","value","itemStyle","years","actual_unsegregated","actual_cost","actual_material","actual_labor","actual_replacement","expected_unsegregated","expected_cost","expected_material","expected_labor","expected_replacement","expected_total","date","next_action__month","actual_cost_total","actual_total","language","handleSelect","includes","filteredData","filter","selectedData","opt","type","stack","areaStyle","data","optionData","tooltip","trigger","axisPointer","legend","show","grid","left","right","bottom","top","containLabel","xAxis","axisLabel","formatter","yAxis","series","length","e","mapStateToProps","state","waterSchemeData","waterSchemeDetailsData","i18nextData","languageType","reportData","maintainanceCostData","getYearIntervals","mapDispatchToProps","connector"],"mappings":"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","sourcesContent":["import GeneralChart from \"components/UI/Charts/General\";\r\nimport CustomCheckBox from \"components/UI/CustomCheckbox\";\r\nimport { getFiscalYearData, getMonthByLanguageAndScheme, getNumberByLanguage } from \"i18n/i18n\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { MaintainanceCostSingleType } from \"store/modules/report/maintainanceCost\";\r\nimport { RootState } from \"store/root-reducer\";\r\nimport DataTable from \"./DataTable\";\r\n\r\ntype SeriesConfig = {\r\n  name: string | undefined;\r\n  type: string;\r\n  stack: string;\r\n  areaStyle: {\r\n    color: string | undefined;\r\n  };\r\n  data: number[];\r\n};\r\n\r\ninterface singleItemType {\r\n  value: any;\r\n  itemStyle: {\r\n    color: string;\r\n  };\r\n}\r\n\r\ninterface ChartDataType {\r\n  actual_unsegregated: singleItemType[];\r\n  actual_material: singleItemType[];\r\n  actual_labor: singleItemType[];\r\n  actual_replacement: singleItemType[];\r\n  expected_unsegregated: singleItemType[];\r\n  expected_material: singleItemType[];\r\n  expected_labor: singleItemType[];\r\n  expected_replacement: singleItemType[];\r\n  expected_total;\r\n  actual_total;\r\n  years: (string | number)[];\r\n}\r\n\r\ninterface Props extends PropsFromRedux {\r\n  selected: string[];\r\n  setSelected: any;\r\n}\r\n\r\nconst BarChartThisYear = (props: Props) => {\r\n  const { selected, setSelected } = props;\r\n\r\n  const { t } = useTranslation();\r\n\r\n  const [chartData, setChartData] = useState<ChartDataType>();\r\n\r\n  const [seriesData, setSeriesData] = useState<SeriesConfig[]>();\r\n\r\n  const [tableData, setTableData] = useState<any>();\r\n\r\n  const options = [\r\n    {\r\n      id: \"actual_unsegregated\",\r\n      name: `${t(\"home:actual\")} ${t(\"home:unsegregated\")}`,\r\n      color: \"#e5f1ff\",\r\n    },\r\n    {\r\n      id: \"actual_material\",\r\n      name: `${t(\"home:actual\")} ${t(\"home:consumable\")}`,\r\n      color: \"#69a7f1\",\r\n    },\r\n    {\r\n      id: \"actual_labor\",\r\n      name: `${t(\"home:actual\")} ${t(\"home:labour\")}`,\r\n      color: \"#2680eb\",\r\n    },\r\n    {\r\n      id: \"actual_replacement\",\r\n      name: `${t(\"home:actual\")} ${t(\"home:replacement\")}`,\r\n      color: \"#accef7\",\r\n    },\r\n    {\r\n      id: \"expected_unsegregated\",\r\n      name: `${t(\"home:expected\")} ${t(\"home:unsegregated\")}`,\r\n      color: \"#ffefdb\",\r\n    },\r\n    {\r\n      id: \"expected_material\",\r\n      name: `${t(\"home:expected\")} ${t(\"home:consumable\")}`,\r\n      color: \"#f1b369\",\r\n    },\r\n    {\r\n      id: \"expected_labor\",\r\n      name: `${t(\"home:expected\")} ${t(\"home:labour\")}`,\r\n      color: \"#eb9126\",\r\n    },\r\n    {\r\n      id: \"expected_replacement\",\r\n      name: `${t(\"home:expected\")} ${t(\"home:replacement\")}`,\r\n      color: \"#f7d5ac\",\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (props.maintainanceCost && props.intervalData) {\r\n      const fiscalYearArray = getFiscalYearData(\r\n        props.intervalData,\r\n        props.schemeDetails?.system_date_format\r\n      );\r\n\r\n      const sortAndMapArray = (\r\n        array: MaintainanceCostSingleType[],\r\n        monthKey: string,\r\n        key: string,\r\n        color: string\r\n      ) => {\r\n        return fiscalYearArray?.map((item) => {\r\n          const findElement = array?.find((inc) => {\r\n\r\n            console.log(inc, item , \"testaaaa\")\r\n            return +inc[monthKey] < 10\r\n              ? +inc[monthKey]?.toString()?.replace(\"0\", \"\") === +item\r\n              : +inc[monthKey] === +item;\r\n          });\r\n          return {\r\n            value: findElement ? findElement[key] : 0,\r\n            itemStyle: { color },\r\n          };\r\n        });\r\n      };\r\n\r\n      const chartData = {\r\n        years: fiscalYearArray?.map((item) => {\r\n          return getMonthByLanguageAndScheme(item, props.schemeDetails?.system_date_format);\r\n        }),\r\n        actual_unsegregated: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"maintenance_date__month\",\r\n          \"unsegregated_cost\",\r\n          \"rgba(196,196,196,1)\"\r\n        ),\r\n        actual_material: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"maintenance_date__month\",\r\n          \"material_cost\",\r\n          \"rgba(215,215,215,1)\"\r\n        ),\r\n        actual_labor: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"maintenance_date__month\",\r\n          \"labour_cost\",\r\n          \"rgba(229,229,229,1)\"\r\n        ),\r\n        actual_replacement: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"maintenance_date__month\",\r\n          \"replacement_cost\",\r\n          \"rgba(242,242,242,1)\"\r\n        ),\r\n        expected_unsegregated: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"next_action__month\",\r\n          \"unsegregated_cost\",\r\n          \"rgba(38,128,235,1)\"\r\n        ),\r\n        expected_material: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"next_action__month\",\r\n          \"material_cost\",\r\n          \"rgba(139,173,213,1)\"\r\n        ),\r\n        expected_labor: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"next_action__month\",\r\n          \"labour_cost\",\r\n          \"rgba(189,213,242,1)\"\r\n        ),\r\n        expected_replacement: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"next_action__month\",\r\n          \"replacement_cost\",\r\n          \"rgba(204,221,234,1)\"\r\n        ),\r\n        expected_total: props.maintainanceCost.expected_cost.map((item) => ({\r\n          date: item.next_action__month,\r\n          value: item.actual_cost_total || 0,\r\n        })),\r\n\r\n        actual_total: props.maintainanceCost.actual_cost.map((item) => ({\r\n          date: item.next_action__month,\r\n          value: item.actual_cost_total || 0,\r\n        })),\r\n      };\r\n\r\n      setChartData(chartData);\r\n    }\r\n  }, [props.language, props.maintainanceCost, props.intervalData]);\r\n\r\n  const handleSelect = (name: string) => {\r\n    if (selected?.includes(name)) {\r\n      const filteredData = selected.filter((item) => item !== name);\r\n      setSelected(filteredData);\r\n    } else {\r\n      setSelected([...selected, name]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const selectedData = selected.map((item) => ({\r\n      name: options.find((opt) => opt.id === item)?.name,\r\n      type: \"bar\",\r\n      stack: item?.includes(\"expec\") ? \"expected\" : \"actual\",\r\n      areaStyle: {\r\n        color: options.find((opt) => opt.id === item)?.color,\r\n      },\r\n      data: chartData && chartData[item],\r\n    }));\r\n\r\n    const tableData = selected.map((item) => ({\r\n      name: options.find((opt) => opt.id === item)?.name || \"\",\r\n      color: options.find((opt) => opt.id === item)?.color || \"\",\r\n      data: chartData && chartData[item],\r\n    }));\r\n\r\n    console.log(tableData, \"tableDatatableData\");\r\n\r\n    setSeriesData(selectedData);\r\n    setTableData(tableData);\r\n  }, [chartData, selected]);\r\n\r\n  const optionData = {\r\n    tooltip: {\r\n      trigger: \"axis\",\r\n      axisPointer: {\r\n        type: \"shadow\",\r\n      },\r\n      // formatter: handleCustomTooltip,\r\n    },\r\n    legend: {\r\n      show: false,\r\n    },\r\n    grid: {\r\n      left: \"3%\",\r\n      right: \"4%\",\r\n      bottom: \"3%\",\r\n      top: \"8%\",\r\n      containLabel: true,\r\n    },\r\n    xAxis: {\r\n      type: \"category\",\r\n      data: chartData?.years,\r\n      axisLabel: {\r\n        formatter: function (data) {\r\n          return data?.replace(\"Year\", \"\") || \" \";\r\n        },\r\n      },\r\n    },\r\n    yAxis: {\r\n      type: \"value\",\r\n      axisLabel: {\r\n        formatter: function (name) {\r\n          return getNumberByLanguage(name);\r\n        },\r\n      },\r\n    },\r\n    series: seriesData,\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-9\">\r\n        <GeneralChart minHeight={300} options={optionData} />\r\n        {tableData?.length > 0 && (\r\n          <DataTable months years={chartData?.years} tableData={tableData} />\r\n        )}\r\n      </div>\r\n      <div className=\"col-md-3 chartOptions\">\r\n        <h6>Select</h6>\r\n        <p>Visualization Parameters</p>\r\n\r\n        <ul>\r\n          {options.map((item) => (\r\n            <li key={item.id}>\r\n              <CustomCheckBox\r\n                id={\"\" + item.id}\r\n                label={item.name}\r\n                onChange={(e) => handleSelect(item.id)}\r\n                checked={selected.includes(item.id)}\r\n              />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  schemeDetails: state.waterSchemeData.waterSchemeDetailsData.data,\r\n  language: state.i18nextData.languageType,\r\n  maintainanceCost: state.reportData.maintainanceCostData.data,\r\n  intervalData: state.waterSchemeData.getYearIntervals.data,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(BarChartThisYear);\r\n"]},"metadata":{},"sourceType":"module"}