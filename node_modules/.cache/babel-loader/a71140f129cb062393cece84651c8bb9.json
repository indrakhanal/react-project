{"ast":null,"code":"var _jsxFileName = \"E:\\\\Smart Tech Solution\\\\React JS\\\\react-project\\\\src\\\\core\\\\Protected\\\\Finance\\\\CashBook\\\\Income\\\\IncomeForm.tsx\",\n    _s = $RefreshSig$();\n\nimport NepaliDatePicker from \"components/React/Datepicker/Datepicker\";\nimport EnglishDatePicker from \"components/React/EnglishDatepicker/EnglishDatepicker\";\nimport FormikValidationError from \"components/React/FormikValidationError/FormikValidationError\";\nimport StyledSelect from \"components/React/StyledSelect/StyledSelect\";\nimport toast from \"components/React/ToastNotifier/ToastNotifier\";\nimport Button from \"components/UI/Forms/Buttons\";\nimport { useFormik } from \"formik\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getIncomeAction } from \"store/modules/income/getIcome\";\nimport { getIncomeCategoryAction } from \"store/modules/income/getIncomeCategory\";\nimport { postIncomeAction } from \"store/modules/income/postIncome\";\nimport { updateIncomeAction } from \"store/modules/income/updateIncome\";\nimport * as Yup from \"yup\";\nimport { useTranslation } from \"react-i18next\";\nimport formatDate, { getDefaultDate } from \"utils/utilsFunction/date-converter\";\nimport { getPreviousIncomeTotalAction } from \"store/modules/income/getPreviousIncomeTotal\";\nconst validationScheme = Yup.object({\n  category: Yup.mixed().required(\"This field is required\"),\n  date: Yup.string().required(\"This field is required\"),\n  title: Yup.string().required(\"This field is required\"),\n  income_amount: Yup.string().required(\"This field is required\"),\n  water_supplied: Yup.string()\n});\n\nconst IncomeForm = props => {\n  _s();\n\n  var _props$scheme3, _values$category;\n\n  const {\n    t\n  } = useTranslation();\n  const [initialData, setInitialData] = React.useState({\n    category: null,\n    date: \"\",\n    title: \"\",\n    income_amount: \"\",\n    water_supplied: \"\"\n  });\n  const [categoryOption, setCategoryOptions] = React.useState();\n  React.useEffect(() => {\n    if (props.schemeSlug) {\n      getIncomeCategoryAction(props.schemeSlug);\n    }\n  }, [props.schemeSlug]);\n  React.useEffect(() => {\n    if (props.incomeCategories) {\n      var _props$incomeCategori;\n\n      const options = (_props$incomeCategori = props.incomeCategories) === null || _props$incomeCategori === void 0 ? void 0 : _props$incomeCategori.map(item => ({\n        label: item.name,\n        value: item.id,\n        e_name: item.e_name\n      }));\n      setCategoryOptions(options);\n    }\n  }, [props.incomeCategories]);\n  React.useEffect(() => {\n    if (props.editData) {\n      var _props$editData, _props$editData$categ, _props$editData2, _props$editData2$cate;\n\n      setInitialData({ ...props.editData,\n        category: {\n          label: (_props$editData = props.editData) === null || _props$editData === void 0 ? void 0 : (_props$editData$categ = _props$editData.category) === null || _props$editData$categ === void 0 ? void 0 : _props$editData$categ.name,\n          value: (_props$editData2 = props.editData) === null || _props$editData2 === void 0 ? void 0 : (_props$editData2$cate = _props$editData2.category) === null || _props$editData2$cate === void 0 ? void 0 : _props$editData2$cate.id\n        }\n      });\n    } else if (props.activeDate) {\n      setInitialData({ ...initialData,\n        date: props.activeDate\n      });\n    }\n  }, [props.editData, props.activeDate]);\n  const {\n    values,\n    errors,\n    setFieldTouched,\n    setFieldValue,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  } = useFormik({\n    enableReinitialize: true,\n    initialValues: initialData,\n    validationSchema: validationScheme,\n    onSubmit: async (submitValue, _ref) => {\n      var _submitValue$category;\n\n      let {\n        resetForm\n      } = _ref;\n      let requestData = { ...submitValue,\n        category: submitValue === null || submitValue === void 0 ? void 0 : (_submitValue$category = submitValue.category) === null || _submitValue$category === void 0 ? void 0 : _submitValue$category.value\n      };\n      if (!values.water_supplied) delete requestData.water_supplied;\n      let res;\n\n      if (props.editData) {\n        res = await props.updateIncomeAction(props.language, props.editData.id, requestData);\n      } else {\n        res = await props.postIncomeAction(props.language, requestData);\n      }\n\n      if (res.status === 201 || res.status === 200) {\n        var _props$activeDate, _getDefaultDate, _props$scheme, _props$activeDate2, _getDefaultDate2, _props$scheme2;\n\n        if (res.status === 201) {\n          resetForm();\n          toast.success(t(\"home:postSuccess\"));\n        } else {\n          setInitialData({\n            category: null,\n            date: \"\",\n            title: \"\",\n            income_amount: \"\",\n            water_supplied: \"\"\n          });\n          toast.success(t(\"home:updateSuccess\"));\n        }\n\n        props.toggle(false);\n        props.setEditData(null);\n        props.getIncomeAction(props.language, props.schemeSlug);\n        props.getIncomeCategoryAction(props.schemeSlug);\n        props.getPreviousIncomeTotalAction(props.language, props.schemeSlug, ((_props$activeDate = props.activeDate) === null || _props$activeDate === void 0 ? void 0 : _props$activeDate.split(\"-\")[0]) || ((_getDefaultDate = getDefaultDate((_props$scheme = props.scheme) === null || _props$scheme === void 0 ? void 0 : _props$scheme.system_date_format)) === null || _getDefaultDate === void 0 ? void 0 : _getDefaultDate.split(\"-\")[0]), ((_props$activeDate2 = props.activeDate) === null || _props$activeDate2 === void 0 ? void 0 : _props$activeDate2.split(\"-\")[1]) || ((_getDefaultDate2 = getDefaultDate((_props$scheme2 = props.scheme) === null || _props$scheme2 === void 0 ? void 0 : _props$scheme2.system_date_format)) === null || _getDefaultDate2 === void 0 ? void 0 : _getDefaultDate2.split(\"-\")[1]));\n      } else {\n        var _Object$values;\n\n        const errors = (_Object$values = Object.values(res.data)) === null || _Object$values === void 0 ? void 0 : _Object$values.map(item => {\n          toast.error(item[0]);\n        });\n      }\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      handleSubmit(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"\",\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 15\n    }\n  }, t(\"finance:category\"), \" \", \":\"), /*#__PURE__*/React.createElement(StyledSelect, {\n    name: \"category\",\n    value: values.category,\n    options: categoryOption,\n    onChange: _ref2 => {\n      let {\n        name,\n        value\n      } = _ref2;\n      setFieldValue(name, value);\n    },\n    onBlur: () => {\n      setFieldTouched(\"category\", true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormikValidationError, {\n    name: \"category\",\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"\",\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  }, t(\"finance:date\"), \" :\"), ((_props$scheme3 = props.scheme) === null || _props$scheme3 === void 0 ? void 0 : _props$scheme3.system_date_format) === \"nep\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NepaliDatePicker, {\n    value: values.date,\n    name: \"date\",\n    onChange: e => {\n      setFieldValue(\"date\", e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 19\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EnglishDatePicker, {\n    name: \"date\",\n    value: values.date,\n    handleChange: e => {\n      setFieldValue(\"date\", formatDate(e));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(FormikValidationError, {\n    name: \"date\",\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"\",\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 15\n    }\n  }, t(\"finance:title\"), \":\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form-control\",\n    name: \"title\",\n    value: values.title,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormikValidationError, {\n    name: \"title\",\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"\",\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 15\n    }\n  }, t(\"finance:amount\"), \":\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    className: \"form-control\",\n    name: \"income_amount\",\n    value: values.income_amount,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormikValidationError, {\n    name: \"income_amount\",\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 15\n    }\n  }))), (values === null || values === void 0 ? void 0 : (_values$category = values.category) === null || _values$category === void 0 ? void 0 : _values$category.e_name) === \"Water Sales\" && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"\",\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }\n  }, t(\"finance:waterSupplied\"), \" :\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    className: \"form-control\",\n    name: \"water_supplied\",\n    value: values.water_supplied,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormikValidationError, {\n    name: \"water_supplied\",\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12 text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn custom-btn  mr-3\",\n    text: \"Save\",\n    type: \"submit\",\n    disabled: props.postLoading || props.updateLoading,\n    loading: props.postLoading || props.updateLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(IncomeForm, \"aty9N5ewRhagq/UoG78P3AmX7/A=\", false, function () {\n  return [useTranslation, useFormik];\n});\n\n_c = IncomeForm;\n\nconst mapStateToProps = state => {\n  var _state$waterSchemeDat;\n\n  return {\n    language: state.i18nextData.languageType,\n    schemeSlug: (_state$waterSchemeDat = state.waterSchemeData.waterSchemeDetailsData.data) === null || _state$waterSchemeDat === void 0 ? void 0 : _state$waterSchemeDat.slug,\n    scheme: state.waterSchemeData.waterSchemeDetailsData.data,\n    incomeCategories: state.incomeData.getIncomeCategory.data,\n    postLoading: state.incomeData.postIncome.isFetching,\n    updateLoading: state.incomeData.updateIncome.isFetching\n  };\n};\n\nconst mapDispatchToProps = {\n  getIncomeAction,\n  updateIncomeAction,\n  postIncomeAction,\n  getIncomeCategoryAction,\n  getPreviousIncomeTotalAction\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(IncomeForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IncomeForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["E:/Smart Tech Solution/React JS/react-project/src/core/Protected/Finance/CashBook/Income/IncomeForm.tsx"],"names":["NepaliDatePicker","EnglishDatePicker","FormikValidationError","StyledSelect","toast","Button","useFormik","React","connect","getIncomeAction","getIncomeCategoryAction","postIncomeAction","updateIncomeAction","Yup","useTranslation","formatDate","getDefaultDate","getPreviousIncomeTotalAction","validationScheme","object","category","mixed","required","date","string","title","income_amount","water_supplied","IncomeForm","props","t","initialData","setInitialData","useState","categoryOption","setCategoryOptions","useEffect","schemeSlug","incomeCategories","options","map","item","label","name","value","id","e_name","editData","activeDate","values","errors","setFieldTouched","setFieldValue","touched","handleChange","handleBlur","handleSubmit","enableReinitialize","initialValues","validationSchema","onSubmit","submitValue","resetForm","requestData","res","language","status","success","toggle","setEditData","split","scheme","system_date_format","Object","data","error","e","preventDefault","postLoading","updateLoading","mapStateToProps","state","i18nextData","languageType","waterSchemeData","waterSchemeDetailsData","slug","incomeData","getIncomeCategory","postIncome","isFetching","updateIncome","mapDispatchToProps","connector"],"mappings":"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","sourcesContent":["import NepaliDatePicker from \"components/React/Datepicker/Datepicker\";\r\nimport EnglishDatePicker from \"components/React/EnglishDatepicker/EnglishDatepicker\";\r\nimport FormikValidationError from \"components/React/FormikValidationError/FormikValidationError\";\r\nimport StyledSelect from \"components/React/StyledSelect/StyledSelect\";\r\nimport toast from \"components/React/ToastNotifier/ToastNotifier\";\r\nimport Button from \"components/UI/Forms/Buttons\";\r\nimport { useFormik } from \"formik\";\r\nimport React from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { getIncomeAction } from \"store/modules/income/getIcome\";\r\nimport { getIncomeCategoryAction } from \"store/modules/income/getIncomeCategory\";\r\nimport { postIncomeAction } from \"store/modules/income/postIncome\";\r\nimport { updateIncomeAction } from \"store/modules/income/updateIncome\";\r\nimport { RootState } from \"store/root-reducer\";\r\nimport * as Yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport formatDate, { getDefaultDate } from \"utils/utilsFunction/date-converter\";\r\nimport { getPreviousIncomeTotalAction } from \"store/modules/income/getPreviousIncomeTotal\";\r\n\r\nconst validationScheme = Yup.object({\r\n  category: Yup.mixed().required(\"This field is required\"),\r\n  date: Yup.string().required(\"This field is required\"),\r\n  title: Yup.string().required(\"This field is required\"),\r\n  income_amount: Yup.string().required(\"This field is required\"),\r\n  water_supplied: Yup.string(),\r\n});\r\n\r\ninterface Props extends PropsFromRedux {\r\n  editData: any;\r\n  toggle: any;\r\n  setEditData: any;\r\n  activeDate?: string;\r\n}\r\n\r\nconst IncomeForm = (props: Props) => {\r\n  const { t } = useTranslation();\r\n  const [initialData, setInitialData] = React.useState({\r\n    category: null as any,\r\n    date: \"\",\r\n    title: \"\",\r\n    income_amount: \"\",\r\n    water_supplied: \"\",\r\n  });\r\n  const [categoryOption, setCategoryOptions] = React.useState<OptionType[]>();\r\n\r\n  React.useEffect(() => {\r\n    if (props.schemeSlug) {\r\n      getIncomeCategoryAction(props.schemeSlug);\r\n    }\r\n  }, [props.schemeSlug]);\r\n\r\n  React.useEffect(() => {\r\n    if (props.incomeCategories) {\r\n      const options = props.incomeCategories?.map((item: any) => ({\r\n        label: item.name,\r\n        value: item.id,\r\n        e_name: item.e_name,\r\n      }));\r\n      setCategoryOptions(options);\r\n    }\r\n  }, [props.incomeCategories]);\r\n\r\n  React.useEffect(() => {\r\n    if (props.editData) {\r\n      setInitialData({\r\n        ...props.editData,\r\n        category: { label: props.editData?.category?.name, value: props.editData?.category?.id },\r\n      });\r\n    } else if (props.activeDate) {\r\n      setInitialData({\r\n        ...initialData,\r\n        date: props.activeDate,\r\n      });\r\n    }\r\n  }, [props.editData, props.activeDate]);\r\n\r\n  const {\r\n    values,\r\n    errors,\r\n    setFieldTouched,\r\n    setFieldValue,\r\n    touched,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n  } = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: initialData,\r\n    validationSchema: validationScheme,\r\n    onSubmit: async (submitValue, { resetForm }) => {\r\n      let requestData: any = {\r\n        ...submitValue,\r\n        category: submitValue?.category?.value,\r\n      };\r\n      if (!values.water_supplied) delete requestData.water_supplied;\r\n      let res;\r\n      if (props.editData) {\r\n        res = await props.updateIncomeAction(props.language, props.editData.id, requestData);\r\n      } else {\r\n        res = await props.postIncomeAction(props.language, requestData);\r\n      }\r\n\r\n      if (res.status === 201 || res.status === 200) {\r\n        if (res.status === 201) {\r\n          resetForm();\r\n          toast.success(t(\"home:postSuccess\"));\r\n        } else {\r\n          setInitialData({\r\n            category: null,\r\n            date: \"\",\r\n            title: \"\",\r\n            income_amount: \"\",\r\n            water_supplied: \"\",\r\n          });\r\n          toast.success(t(\"home:updateSuccess\"));\r\n        }\r\n        props.toggle(false);\r\n        props.setEditData(null);\r\n        props.getIncomeAction(props.language, props.schemeSlug);\r\n\r\n        props.getIncomeCategoryAction(props.schemeSlug);\r\n        props.getPreviousIncomeTotalAction(\r\n          props.language,\r\n          props.schemeSlug,\r\n          props.activeDate?.split(\"-\")[0] ||\r\n            getDefaultDate(props.scheme?.system_date_format)?.split(\"-\")[0],\r\n          props.activeDate?.split(\"-\")[1] ||\r\n            getDefaultDate(props.scheme?.system_date_format)?.split(\"-\")[1]\r\n        );\r\n      } else {\r\n        const errors = Object.values(res.data)?.map((item: any) => {\r\n          toast.error(item[0]);\r\n        });\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        handleSubmit(e);\r\n      }}\r\n    >\r\n      <div className=\"row align-items-center\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"form-group \">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"\" className=\"mr-1\">\r\n                {t(\"finance:category\")} {}:\r\n              </label>\r\n\r\n              <StyledSelect\r\n                name=\"category\"\r\n                value={values.category}\r\n                options={categoryOption}\r\n                onChange={({ name, value }) => {\r\n                  setFieldValue(name, value);\r\n                }}\r\n                onBlur={() => {\r\n                  setFieldTouched(\"category\", true);\r\n                }}\r\n              />\r\n\r\n              <FormikValidationError name=\"category\" errors={errors} touched={touched} />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group \">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"\" className=\"mr-1\">\r\n                {t(\"finance:date\")} :\r\n              </label>\r\n\r\n              {props.scheme?.system_date_format === \"nep\" ? (\r\n                <>\r\n                  <NepaliDatePicker\r\n                    value={values.date}\r\n                    name=\"date\"\r\n                    onChange={(e) => {\r\n                      setFieldValue(\"date\", e);\r\n                    }}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <EnglishDatePicker\r\n                    name=\"date\"\r\n                    value={values.date}\r\n                    handleChange={(e) => {\r\n                      setFieldValue(\"date\", formatDate(e));\r\n                    }}\r\n                  />\r\n                </>\r\n              )}\r\n              <FormikValidationError name=\"date\" errors={errors} touched={touched} />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group \">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"\" className=\"mr-1\">\r\n                {t(\"finance:title\")}:\r\n              </label>\r\n\r\n              <input\r\n                className=\"form-control\"\r\n                name=\"title\"\r\n                value={values.title}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n              />\r\n              <FormikValidationError name=\"title\" errors={errors} touched={touched} />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group \">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"\" className=\"mr-1\">\r\n                {t(\"finance:amount\")}:\r\n              </label>\r\n\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                name=\"income_amount\"\r\n                value={values.income_amount}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n              />\r\n              <FormikValidationError name=\"income_amount\" errors={errors} touched={touched} />\r\n            </div>\r\n          </div> \r\n          {values?.category?.e_name === \"Water Sales\" && (\r\n            <div className=\"form-group \">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"\" className=\"mr-1\">\r\n                  {t(\"finance:waterSupplied\")} :\r\n                </label>\r\n\r\n                <input\r\n                  type=\"number\"\r\n                  className=\"form-control\"\r\n                  name=\"water_supplied\"\r\n                  value={values.water_supplied}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                />\r\n                <FormikValidationError name=\"water_supplied\" errors={errors} touched={touched} />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"col-md-12 text-right\">\r\n          <Button\r\n            className=\"btn custom-btn  mr-3\"\r\n            text={\"Save\"}\r\n            type=\"submit\"\r\n            disabled={props.postLoading || props.updateLoading}\r\n            loading={props.postLoading || props.updateLoading}\r\n          />\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  language: state.i18nextData.languageType,\r\n  schemeSlug: state.waterSchemeData.waterSchemeDetailsData.data?.slug,\r\n  scheme: state.waterSchemeData.waterSchemeDetailsData.data,\r\n  incomeCategories: state.incomeData.getIncomeCategory.data,\r\n  postLoading: state.incomeData.postIncome.isFetching,\r\n  updateLoading: state.incomeData.updateIncome.isFetching,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getIncomeAction,\r\n  updateIncomeAction,\r\n  postIncomeAction,\r\n  getIncomeCategoryAction,\r\n  getPreviousIncomeTotalAction,\r\n};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(IncomeForm);\r\n"]},"metadata":{},"sourceType":"module"}