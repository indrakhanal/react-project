{"ast":null,"code":"import { FailToast } from \"components/React/ToastNotifier/ToastNotifier\";\nimport { getTextByLanguage } from \"i18n/i18n\";\nconst [at, rt] = [btoa(btoa(\"access_token\")), btoa(btoa(\"refresh_token\"))];\n\nconst encodeToken = token => {\n  try {\n    const tokenWithBrowserData = JSON.stringify(token);\n    return tokenWithBrowserData;\n  } catch (e) {\n    console.log(\"Error encoding token\", e);\n    return token;\n  }\n};\n\nconst decodeToken = token => {\n  if (!token) return \"\";\n\n  try {\n    const tkams = JSON.parse(token);\n    return tkams;\n  } catch (e) {\n    console.log(\"Error decoding token\", e);\n    clearToken();\n    FailToast(getTextByLanguage(\"Your session has expired.\", \"तपाईको सत्रको समयावधि सकियो।\"));\n    return token;\n  }\n};\n\nfunction setToken(tokenObj) {\n  try {\n    localStorage.setItem(at, encodeToken(tokenObj));\n  } catch (e) {\n    console.log(\"Local Store error\", e);\n  }\n}\n\nfunction getAccessToken() {\n  let accessToken = \"\";\n\n  try {\n    accessToken = decodeToken(localStorage.getItem(at) || \"\");\n  } catch (e) {\n    console.log(\"Local Store error\", e);\n  }\n\n  return accessToken;\n}\n\nfunction getRefreshToken() {\n  let refreshToken = \"\";\n\n  try {\n    refreshToken = localStorage.getItem(rt) || \"\";\n  } catch (e) {\n    console.log(\"Local Store error\", e);\n  }\n\n  return refreshToken;\n}\n\nfunction clearToken() {\n  localStorage.removeItem(at);\n  localStorage.removeItem(rt);\n}\n\nconst TokenService = {\n  setToken: setToken,\n  getAccessToken: getAccessToken,\n  getRefreshToken: getRefreshToken,\n  clearToken: clearToken\n};\nexport default TokenService;","map":{"version":3,"sources":["C:/Users/S.K. COMPUTER/OneDrive/Desktop/react-project/src/services/jwt-token/jwt-token.ts"],"names":["FailToast","getTextByLanguage","at","rt","btoa","encodeToken","token","tokenWithBrowserData","JSON","stringify","e","console","log","decodeToken","tkams","parse","clearToken","setToken","tokenObj","localStorage","setItem","getAccessToken","accessToken","getItem","getRefreshToken","refreshToken","removeItem","TokenService"],"mappings":"AAAA,SAASA,SAAT,QAA0B,8CAA1B;AACA,SAASC,iBAAT,QAAkC,WAAlC;AAUA,MAAM,CAACC,EAAD,EAAKC,EAAL,IAAW,CAACC,IAAI,CAACA,IAAI,CAAC,cAAD,CAAL,CAAL,EAA6BA,IAAI,CAACA,IAAI,CAAC,eAAD,CAAL,CAAjC,CAAjB;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAmB;AACnC,MAAI;AACA,UAAMC,oBAAoB,GAAGC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAA7B;AACA,WAAOC,oBAAP;AAEH,GAJD,CAIE,OAAOG,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,CAApC;AACA,WAAOJ,KAAP;AACH;AACJ,CATD;;AAUA,MAAMO,WAAW,GAAIP,KAAD,IAAmB;AACnC,MAAI,CAACA,KAAL,EAAY,OAAO,EAAP;;AAGZ,MAAI;AACA,UAAMQ,KAAK,GAAGN,IAAI,CAACO,KAAL,CAAWT,KAAX,CAAd;AACA,WAAOQ,KAAP;AAEH,GAJD,CAIE,OAAOJ,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,CAApC;AAEAM,IAAAA,UAAU;AACVhB,IAAAA,SAAS,CAACC,iBAAiB,CAAC,2BAAD,EAA8B,8BAA9B,CAAlB,CAAT;AACA,WAAOK,KAAP;AACH;AACJ,CAfD;;AAkBA,SAASW,QAAT,CAAkBC,QAAlB,EAAiC;AAC7B,MAAI;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqBlB,EAArB,EAAyBG,WAAW,CAACa,QAAD,CAApC;AACH,GAFD,CAGA,OAAOR,CAAP,EAAU;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,CAAjC;AACH;AACJ;;AAED,SAASW,cAAT,GAAkC;AAC9B,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAI;AACAA,IAAAA,WAAW,GAAGT,WAAW,CAACM,YAAY,CAACI,OAAb,CAAqBrB,EAArB,KAA4B,EAA7B,CAAzB;AACH,GAFD,CAGA,OAAOQ,CAAP,EAAU;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,CAAjC;AACH;;AACD,SAAOY,WAAP;AACH;;AAED,SAASE,eAAT,GAAmC;AAC/B,MAAIC,YAAY,GAAG,EAAnB;;AACA,MAAI;AACAA,IAAAA,YAAY,GAAGN,YAAY,CAACI,OAAb,CAAqBpB,EAArB,KAA4B,EAA3C;AACH,GAFD,CAGA,OAAOO,CAAP,EAAU;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,CAAjC;AACH;;AACD,SAAOe,YAAP;AACH;;AAED,SAAST,UAAT,GAAsB;AAClBG,EAAAA,YAAY,CAACO,UAAb,CAAwBxB,EAAxB;AACAiB,EAAAA,YAAY,CAACO,UAAb,CAAwBvB,EAAxB;AACH;;AAED,MAAMwB,YAA8B,GAAG;AACnCV,EAAAA,QAAQ,EAAEA,QADyB;AAEnCI,EAAAA,cAAc,EAAEA,cAFmB;AAGnCG,EAAAA,eAAe,EAAEA,eAHkB;AAInCR,EAAAA,UAAU,EAAEA;AAJuB,CAAvC;AAMA,eAAeW,YAAf","sourcesContent":["import { FailToast } from \"components/React/ToastNotifier/ToastNotifier\";\r\nimport { getTextByLanguage } from \"i18n/i18n\";\r\n\r\ninterface AuthTokenService {\r\n    setToken: Function;\r\n    getAccessToken: Function;\r\n    getRefreshToken: Function;\r\n    clearToken: Function;\r\n}\r\n\r\n\r\nconst [at, rt] = [btoa(btoa(\"access_token\")), btoa(btoa(\"refresh_token\"))]\r\n\r\nconst encodeToken = (token: string) => {\r\n    try {\r\n        const tokenWithBrowserData = JSON.stringify(token);\r\n        return tokenWithBrowserData;\r\n\r\n    } catch (e) {\r\n        console.log(\"Error encoding token\", e);\r\n        return token;\r\n    }\r\n}\r\nconst decodeToken = (token: string) => {\r\n    if (!token) return \"\";\r\n\r\n\r\n    try { \r\n        const tkams = JSON.parse(token);\r\n        return tkams;\r\n\r\n    } catch (e) {\r\n        console.log(\"Error decoding token\", e);\r\n\r\n        clearToken();\r\n        FailToast(getTextByLanguage(\"Your session has expired.\", \"तपाईको सत्रको समयावधि सकियो।\"))\r\n        return token;\r\n    }\r\n}\r\n\r\n\r\nfunction setToken(tokenObj: any) {\r\n    try {\r\n        localStorage.setItem(at, encodeToken(tokenObj));\r\n    }\r\n    catch (e) {\r\n        console.log(\"Local Store error\", e);\r\n    }\r\n}\r\n\r\nfunction getAccessToken(): string {\r\n    let accessToken = \"\";\r\n    try {\r\n        accessToken = decodeToken(localStorage.getItem(at) || \"\");\r\n    }\r\n    catch (e) {\r\n        console.log(\"Local Store error\", e);\r\n    }\r\n    return accessToken;\r\n}\r\n\r\nfunction getRefreshToken(): string {\r\n    let refreshToken = \"\";\r\n    try {\r\n        refreshToken = localStorage.getItem(rt) || \"\";\r\n    }\r\n    catch (e) {\r\n        console.log(\"Local Store error\", e);\r\n    }\r\n    return refreshToken;\r\n}\r\n\r\nfunction clearToken() {\r\n    localStorage.removeItem(at);\r\n    localStorage.removeItem(rt);\r\n}\r\n\r\nconst TokenService: AuthTokenService = {\r\n    setToken: setToken,\r\n    getAccessToken: getAccessToken,\r\n    getRefreshToken: getRefreshToken,\r\n    clearToken: clearToken,\r\n};\r\nexport default TokenService;\r\n"]},"metadata":{},"sourceType":"module"}