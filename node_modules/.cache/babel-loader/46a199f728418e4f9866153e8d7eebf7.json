{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\S.K. COMPUTER\\\\OneDrive\\\\Desktop\\\\react-project\\\\src\\\\core\\\\Public\\\\Home\\\\Maintainance\\\\MaintainanceCostChart.tsx\",\n    _s = $RefreshSig$();\n\nimport GeneralChart from \"components/UI/Charts/General\";\nimport { getNumberByLanguage } from \"i18n/i18n\";\nimport React, { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { getYearFromDate } from \"utils/utilsFunction/date-converter\";\n\nconst MaintainanceCostChart = props => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [year, setYear] = useState();\n  const [actualCost, setActualCost] = useState(null);\n  const [expectedCost, setExpectedCost] = useState(null);\n\n  const sortAndMapArray = (array, key, color) => {\n    return array.map(item => ({\n      value: item[key] || 0,\n      itemStyle: {\n        color\n      }\n    }));\n  };\n\n  useEffect(() => {\n    if (props.maintainanceCost) {\n      const yearData = props.maintainanceCost.actual_cost.map((item, index) => `${t(\"home:year\")} ${getNumberByLanguage(index + 1)} -  ${getNumberByLanguage(getYearFromDate(item.date_from))} - ${getNumberByLanguage(getYearFromDate(item.date_to))}`);\n      const actualCost = {\n        unsegregated: sortAndMapArray(props.maintainanceCost.actual_cost, \"unsegregated_cost\", \"#e69f00\"),\n        material: sortAndMapArray(props.maintainanceCost.actual_cost, \"material_cost\", \"#56b4e9\"),\n        labor: sortAndMapArray(props.maintainanceCost.actual_cost, \"labour_cost\", \"#f0e442\"),\n        replacement: sortAndMapArray(props.maintainanceCost.actual_cost, \"replacement_cost\", \"#ea75b6\"),\n        total: props.maintainanceCost.actual_cost.map(item => ({\n          date: item.maintenance_date__year,\n          value: item.actual_cost_total || 0\n        }))\n      };\n      const expectedCost = {\n        unsegregated: sortAndMapArray(props.maintainanceCost.expected_cost, \"unsegregated_cost\", \"#009e73\"),\n        material: sortAndMapArray(props.maintainanceCost.expected_cost, \"material_cost\", \"#000000\"),\n        labor: sortAndMapArray(props.maintainanceCost.expected_cost, \"labour_cost\", \"#d55e00\"),\n        replacement: sortAndMapArray(props.maintainanceCost.expected_cost, \"replacement_cost\", \"#0072b2\"),\n        total: props.maintainanceCost.expected_cost.map(item => ({\n          date: item.maintenance_date__year,\n          value: item.actual_cost_total || 0\n        }))\n      };\n      setYear(yearData);\n      setActualCost(actualCost);\n      setExpectedCost(expectedCost);\n    }\n  }, [props.maintainanceCost]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GeneralChart, {\n    minHeight: 350,\n    options: {\n      tooltip: {\n        trigger: \"axis\",\n        axisPointer: {\n          type: \"shadow\"\n        } // formatter: handleCustomTooltip,\n\n      },\n      legend: {\n        show: false\n      },\n      grid: {\n        left: \"3%\",\n        right: \"4%\",\n        bottom: \"3%\",\n        top: \"8%\",\n        containLabel: true\n      },\n      xAxis: {\n        type: \"category\",\n        data: year,\n        axisLabel: {\n          formatter: function (name) {\n            var _name$split$;\n\n            return name === null || name === void 0 ? void 0 : (_name$split$ = name.split(\"-\")[0]) === null || _name$split$ === void 0 ? void 0 : _name$split$.replace(\"Year\", \"\");\n          }\n        }\n      },\n      yAxis: {\n        type: \"value\",\n        axisLabel: {\n          formatter: function (name) {\n            return getNumberByLanguage(name);\n          }\n        }\n      },\n      series: [{\n        name: `${t(\"home:expected\")} ${t(\"home:unsegregated\")}`,\n        type: \"bar\",\n        stack: \"bar\",\n        areaStyle: {\n          color: \"red\"\n        },\n        data: expectedCost === null || expectedCost === void 0 ? void 0 : expectedCost.unsegregated\n      }, {\n        name: `${t(\"home:expected\")} ${t(\"home:consumable\")}`,\n        type: \"bar\",\n        stack: \"bar\",\n        data: expectedCost === null || expectedCost === void 0 ? void 0 : expectedCost.material\n      }, {\n        name: `${t(\"home:expected\")} ${t(\"home:labour\")}`,\n        type: \"bar\",\n        stack: \"bar\",\n        data: expectedCost === null || expectedCost === void 0 ? void 0 : expectedCost.labor\n      }, {\n        name: `${t(\"home:expected\")} ${t(\"home:replacement\")}`,\n        type: \"bar\",\n        stack: \"bar\",\n        data: expectedCost === null || expectedCost === void 0 ? void 0 : expectedCost.replacement\n      }, {\n        name: `${t(\"home:actual\")}  ${t(\"home:unsegregated\")}`,\n        type: \"bar\",\n        stack: \"bar2\",\n        data: actualCost === null || actualCost === void 0 ? void 0 : actualCost.unsegregated\n      }, {\n        name: `${t(\"home:actual\")} ${t(\"home:consumable\")}`,\n        type: \"bar\",\n        stack: \"bar2\",\n        data: actualCost === null || actualCost === void 0 ? void 0 : actualCost.material\n      }, {\n        name: `${t(\"home:actual\")} ${t(\"home:labour\")}`,\n        type: \"bar\",\n        stack: \"bar2\",\n        data: actualCost === null || actualCost === void 0 ? void 0 : actualCost.labor\n      }, {\n        name: `${t(\"home:actual\")} ${t(\"home:replacement\")}`,\n        type: \"bar\",\n        stack: \"bar2\",\n        data: actualCost === null || actualCost === void 0 ? void 0 : actualCost.replacement\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cost-desc table-responsive mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    className: \"expected\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 15\n    }\n  }, t(\"home:expectedCost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"unseg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 17\n    }\n  }), t(\"home:unsegregated\"), \" \", t(\"home:cost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 17\n    }\n  }), t(\"home:maintainanceCost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"labour\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 17\n    }\n  }), t(\"home:labour\"), \" \", t(\"home:cost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"replacement\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }\n  }), t(\"home:replacement\"), \" \", t(\"home:cost\")))), /*#__PURE__*/React.createElement(\"tr\", {\n    className: \"actual\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 15\n    }\n  }, t(\"home:actualCost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"unseg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 17\n    }\n  }), t(\"home:unsegregated\"), \" \", t(\"home:cost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 17\n    }\n  }), t(\"home:maintainanceCost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"labour\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 17\n    }\n  }), t(\"home:labour\"), \" \", t(\"home:cost\"))), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"replacement\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 17\n    }\n  }), t(\"home:replacement\"), \" \", t(\"home:cost\")))))));\n};\n\n_s(MaintainanceCostChart, \"yTTYw6oJMObqFlCnjYnrYRBBWGI=\", false, function () {\n  return [useTranslation];\n});\n\n_c = MaintainanceCostChart;\n\nconst mapStateToProps = state => ({\n  language: state.i18nextData.languageType,\n  maintainanceCost: state.reportData.maintainanceCostData.data,\n  waterTarrifs: state.waterTarrifsData.waterTarrifData.data\n});\n\nconst mapDispatchToProps = {};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(MaintainanceCostChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MaintainanceCostChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/S.K. COMPUTER/OneDrive/Desktop/react-project/src/core/Public/Home/Maintainance/MaintainanceCostChart.tsx"],"names":["GeneralChart","getNumberByLanguage","React","useState","useEffect","useTranslation","connect","getYearFromDate","MaintainanceCostChart","props","t","year","setYear","actualCost","setActualCost","expectedCost","setExpectedCost","sortAndMapArray","array","key","color","map","item","value","itemStyle","maintainanceCost","yearData","actual_cost","index","date_from","date_to","unsegregated","material","labor","replacement","total","date","maintenance_date__year","actual_cost_total","expected_cost","tooltip","trigger","axisPointer","type","legend","show","grid","left","right","bottom","top","containLabel","xAxis","data","axisLabel","formatter","name","split","replace","yAxis","series","stack","areaStyle","mapStateToProps","state","language","i18nextData","languageType","reportData","maintainanceCostData","waterTarrifs","waterTarrifsData","waterTarrifData","mapDispatchToProps","connector"],"mappings":"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","sourcesContent":["import GeneralChart from \"components/UI/Charts/General\";\r\nimport { getNumberByLanguage } from \"i18n/i18n\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { MaintainanceCostSingleType } from \"store/modules/report/maintainanceCost\";\r\nimport { RootState } from \"store/root-reducer\";\r\nimport { getYearFromDate } from \"utils/utilsFunction/date-converter\";\r\n\r\nexport type TotalDataYear = {\r\n  date: number;\r\n  actualCost: number;\r\n  unsegregated: number;\r\n  material: number;\r\n  labour: number;\r\n  replacement: number;\r\n};\r\n\r\nexport type TotalYearType = {\r\n  date: number;\r\n  value: number | null;\r\n};\r\n\r\nexport type CustomSingleData = {\r\n  value: string | number;\r\n  itemStyle: { color: string };\r\n};\r\n\r\nexport type IncomeExpenseType = {\r\n  unsegregated: CustomSingleData[];\r\n  material: CustomSingleData[];\r\n  labor: CustomSingleData[];\r\n  replacement: CustomSingleData[];\r\n  total?: TotalYearType[];\r\n};\r\n\r\ninterface Props extends PropsFromRedux {}\r\n\r\nconst MaintainanceCostChart = (props: Props) => {\r\n  const { t } = useTranslation();\r\n  const [year, setYear] = useState<(string | number)[]>();\r\n  const [actualCost, setActualCost] = useState<IncomeExpenseType | null>(null);\r\n  const [expectedCost, setExpectedCost] = useState<IncomeExpenseType | null>(null);\r\n  \r\n  const sortAndMapArray = (array: MaintainanceCostSingleType[], key: string, color: string) => {\r\n    return array.map((item) => ({\r\n      value: item[key] || 0,\r\n      itemStyle: { color },\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.maintainanceCost) {\r\n      const yearData = props.maintainanceCost.actual_cost.map(\r\n        (item, index) =>\r\n          `${t(\"home:year\")} ${getNumberByLanguage(index + 1)} -  ${getNumberByLanguage(\r\n            getYearFromDate(item.date_from)\r\n          )} - ${getNumberByLanguage(getYearFromDate(item.date_to))}`\r\n      );\r\n\r\n      const actualCost = {\r\n        unsegregated: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"unsegregated_cost\",\r\n          \"#e69f00\"\r\n        ),\r\n        material: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"material_cost\",\r\n          \"#56b4e9\"\r\n        ),\r\n        labor: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"labour_cost\",\r\n          \"#f0e442\"\r\n        ),\r\n        replacement: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"replacement_cost\",\r\n          \"#ea75b6\"\r\n        ),\r\n\r\n        total: props.maintainanceCost.actual_cost.map((item) => ({\r\n          date: item.maintenance_date__year,\r\n          value: item.actual_cost_total || 0,\r\n        })),\r\n      };\r\n\r\n      const expectedCost = {\r\n        unsegregated: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"unsegregated_cost\",\r\n          \"#009e73\"\r\n        ),\r\n        material: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"material_cost\",\r\n          \"#000000\"\r\n        ),\r\n        labor: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"labour_cost\",\r\n          \"#d55e00\"\r\n        ),\r\n        replacement: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"replacement_cost\",\r\n          \"#0072b2\"\r\n        ),\r\n        total: props.maintainanceCost.expected_cost.map((item) => ({\r\n          date: item.maintenance_date__year,\r\n          value: item.actual_cost_total || 0,\r\n        })),\r\n      };\r\n\r\n      setYear(yearData);\r\n      setActualCost(actualCost);\r\n      setExpectedCost(expectedCost);\r\n    }\r\n  }, [props.maintainanceCost]);\r\n \r\n  return (\r\n    <>\r\n      <GeneralChart\r\n        minHeight={350}\r\n        options={{\r\n          tooltip: {\r\n            trigger: \"axis\",\r\n            axisPointer: {\r\n              type: \"shadow\",\r\n            },\r\n            // formatter: handleCustomTooltip,\r\n          },\r\n          legend: {\r\n            show: false,\r\n          },\r\n          grid: {\r\n            left: \"3%\",\r\n            right: \"4%\",\r\n            bottom: \"3%\",\r\n            top: \"8%\",\r\n            containLabel: true,\r\n          },\r\n          xAxis: {\r\n            type: \"category\",\r\n            data: year,\r\n            axisLabel: {\r\n              formatter: function (name) {\r\n                return name?.split(\"-\")[0]?.replace(\"Year\", \"\");\r\n              },\r\n            },\r\n          },\r\n          yAxis: {\r\n            type: \"value\",\r\n            axisLabel: {\r\n              formatter: function (name) {\r\n                return getNumberByLanguage(name);\r\n              },\r\n            },\r\n          },\r\n          series: [\r\n            {\r\n              name: `${t(\"home:expected\")} ${t(\"home:unsegregated\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar\",\r\n              areaStyle: {\r\n                color: \"red\",\r\n              },\r\n              data: expectedCost?.unsegregated,\r\n            },\r\n            {\r\n              name: `${t(\"home:expected\")} ${t(\"home:consumable\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar\",\r\n              data: expectedCost?.material,\r\n            },\r\n            {\r\n              name: `${t(\"home:expected\")} ${t(\"home:labour\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar\",\r\n              data: expectedCost?.labor,\r\n            },\r\n            {\r\n              name: `${t(\"home:expected\")} ${t(\"home:replacement\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar\",\r\n              data: expectedCost?.replacement,\r\n            },\r\n            {\r\n              name: `${t(\"home:actual\")}  ${t(\"home:unsegregated\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar2\",\r\n              data: actualCost?.unsegregated,\r\n            },\r\n            {\r\n              name: `${t(\"home:actual\")} ${t(\"home:consumable\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar2\",\r\n              data: actualCost?.material,\r\n            },\r\n            {\r\n              name: `${t(\"home:actual\")} ${t(\"home:labour\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar2\",\r\n              data: actualCost?.labor,\r\n            },\r\n            {\r\n              name: `${t(\"home:actual\")} ${t(\"home:replacement\")}`,\r\n              type: \"bar\",\r\n              stack: \"bar2\",\r\n              data: actualCost?.replacement,\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n\r\n      <div className=\"cost-desc table-responsive mt-4\">\r\n        <table>\r\n          <tr className=\"expected\">\r\n            <td>\r\n              <h5>{t(\"home:expectedCost\")}</h5>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"unseg\"></span>{t(\"home:unsegregated\")} {t(\"home:cost\")}\r\n              </h6>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"material\"></span>{t(\"home:maintainanceCost\")} \r\n              </h6>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"labour\"></span>{t(\"home:labour\")} {t(\"home:cost\")}\r\n              </h6>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"replacement\"></span>{t(\"home:replacement\")} {t(\"home:cost\")}\r\n              </h6>\r\n            </td>\r\n          </tr>\r\n          <tr className=\"actual\">\r\n            <td>\r\n              <h5>{t(\"home:actualCost\")}</h5>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"unseg\"></span>{t(\"home:unsegregated\")} {t(\"home:cost\")}\r\n              </h6>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"material\"></span>{t(\"home:maintainanceCost\")} \r\n              </h6>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"labour\"></span>{t(\"home:labour\")} {t(\"home:cost\")}\r\n              </h6>\r\n            </td>\r\n            <td>\r\n              <h6>\r\n                <span className=\"replacement\"></span>{t(\"home:replacement\")} {t(\"home:cost\")}\r\n              </h6>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  language: state.i18nextData.languageType,\r\n  maintainanceCost: state.reportData.maintainanceCostData.data,\r\n  waterTarrifs: state.waterTarrifsData.waterTarrifData.data,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(MaintainanceCostChart);\r\n"]},"metadata":{},"sourceType":"module"}