{"ast":null,"code":"import Axios from 'axios';\nimport initDispatchTypes from './default-action-type';\nimport initApiRequest from '../../services/api-request/api-request';\nimport { FailToast, SuccessToast } from '../../components/React/ToastNotifier/ToastNotifier';\nimport { requestTimeoutLanguage, noConnectionLanguage } from '../../i18n/i18n';\n/**\r\n * Request details for XMLHTTP request\r\n */\n\nlet timeoutLanguageCount = 0;\nlet noServerConnectionLanguageCount = 0;\nlet noConnectionLanguageCount = 0;\nconst axiosCancelSource = Axios.CancelToken.source();\n/**\r\n * Manages API call and updates reducer with success or failure\r\n * @param apiDetails redux action and api config\r\n * @param dispatch redux dispatch function\r\n * @param apiRequestDetails request details for XMLHTTP request\r\n */\n\nexport default async function initDefaultAction(apiDetails, dispatch) {\n  let apiRequestDetails = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    requestData,\n    requestMethod,\n    params,\n    cancelSource,\n    disableSuccessToast = false,\n    disableFailureToast,\n    pathVariables,\n    disableToast = false\n  } = apiRequestDetails; // Init Dispatch Types\n\n  const dispatchTypes = initDispatchTypes(apiDetails.actionName); // Progress Dispatch\n\n  dispatch({\n    type: dispatchTypes.progressDispatch,\n    payload: null\n  }); // Check for path variables in controllername\n\n  const sanitizedApiDetails = sanitizeController(apiDetails, pathVariables);\n  let responseData;\n\n  try {\n    responseData = await initApiRequest(sanitizedApiDetails, requestData, requestMethod || sanitizedApiDetails.requestMethod || \"GET\", params, cancelSource || axiosCancelSource);\n    console.log(responseData.data, \"responseData\"); // Success Dispatch\n\n    dispatch({\n      type: dispatchTypes.successDispatch,\n      payload: responseData.data\n    });\n\n    if (disableSuccessToast || disableToast) {// No work done\n    } else {\n      if (requestMethod !== \"GET\") {\n        var _responseData$data;\n\n        SuccessToast((_responseData$data = responseData.data) === null || _responseData$data === void 0 ? void 0 : _responseData$data.message);\n      }\n    }\n  } catch (customThrownError) {\n    responseData = customThrownError; // Failure Dispatch\n\n    dispatch({\n      type: dispatchTypes.failureDispatch,\n      payload: responseData.data\n    });\n\n    if (disableFailureToast || disableToast) {// No work done\n    } else {\n      var _responseData$data2;\n\n      ((_responseData$data2 = responseData.data) === null || _responseData$data2 === void 0 ? void 0 : _responseData$data2.message) && FailToast(responseData.data.message);\n    } // Axios Timeout\n\n\n    if (responseData.config.code === 'ECONNABORTED') {\n      if (!timeoutLanguageCount) {\n        timeoutLanguageCount++;\n        FailToast(requestTimeoutLanguage());\n      }\n    } // No Connection\n\n\n    if (responseData.noconnection) {\n      // No Server Connection\n      if (responseData.message === 'Server could not be reached') {\n        if (!noServerConnectionLanguageCount) {\n          noServerConnectionLanguageCount++;\n          FailToast(noConnectionLanguage());\n        }\n      } // No Connection\n      else if (responseData.config.code !== 'ECONNABORTED') {\n        if (!noConnectionLanguageCount) {\n          noConnectionLanguageCount++;\n          FailToast(noConnectionLanguage());\n        }\n      }\n    }\n  }\n\n  return responseData;\n}\n;\n\nfunction sanitizeController(apiDetail, pathVariables) {\n  return pathVariables && Object.keys(pathVariables).length ? { ...apiDetail,\n    controllerName: Object.entries(pathVariables).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return acc = acc.replace(`{${key}}`, value === null || value === void 0 ? void 0 : value.toString());\n    }, apiDetail.controllerName)\n  } : apiDetail;\n}","map":{"version":3,"sources":["E:/Smart Tech Solution/React JS/react-project/src/store/helper/default-action.ts"],"names":["Axios","initDispatchTypes","initApiRequest","FailToast","SuccessToast","requestTimeoutLanguage","noConnectionLanguage","timeoutLanguageCount","noServerConnectionLanguageCount","noConnectionLanguageCount","axiosCancelSource","CancelToken","source","initDefaultAction","apiDetails","dispatch","apiRequestDetails","requestData","requestMethod","params","cancelSource","disableSuccessToast","disableFailureToast","pathVariables","disableToast","dispatchTypes","actionName","type","progressDispatch","payload","sanitizedApiDetails","sanitizeController","responseData","console","log","data","successDispatch","message","customThrownError","failureDispatch","config","code","noconnection","apiDetail","Object","keys","length","controllerName","entries","reduce","acc","key","value","replace","toString"],"mappings":"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","sourcesContent":["import Axios, { AxiosRequestConfig, AxiosResponse, CancelTokenSource, Method } from 'axios';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport initDispatchTypes from './default-action-type';\r\nimport initApiRequest from '../../services/api-request/api-request';\r\nimport { apiDetailType } from '../actionNames';\r\nimport { FailToast, SuccessToast } from '../../components/React/ToastNotifier/ToastNotifier';\r\nimport { requestTimeoutLanguage, noConnectionLanguage } from '../../i18n/i18n';\r\n\r\n/**\r\n * Request details for XMLHTTP request\r\n */\r\ninterface APIRequestDetail {\r\n    /**Request data for the API */\r\n    requestData?: any;\r\n    /**REST API Method */\r\n    requestMethod?: Method;\r\n    /**Path variables present in controller\r\n     *\r\n     * Provided pathVariables -> {id: 1, type: 'test'}\r\n     * Converts controller-url/{id}/{type} -> controller-url/1/test\r\n     */\r\n    pathVariables?: { [key: string]: Primitive };\r\n    /**Request params\r\n     *\r\n     * Provided params -> {id: 1, type: 'test'}\r\n     * Converts controller-url -> controller-url?id=1&type=test\r\n     */\r\n    params?: { [key: string]: Primitive };\r\n    /**Axios cancel token source */\r\n    cancelSource?: CancelTokenSource;\r\n    /**Disable Success Toast */\r\n    disableSuccessToast?: boolean;\r\n    /**Disable Failure Toast */\r\n    disableFailureToast?: boolean;\r\n\r\n    disableToast?: boolean;\r\n}\r\n\r\ninterface CustomResponse<TData = any> extends AxiosResponse {\r\n    message: string;\r\n    data: TData | null;\r\n    status: number;\r\n    noconnection: boolean;\r\n    config: AxiosRequestConfig;\r\n    isAxiosError: boolean;\r\n}\r\n\r\nexport type APIResponseDetail<TData = any> = Promise<CustomResponse<TData>>\r\n\r\nlet timeoutLanguageCount = 0;\r\nlet noServerConnectionLanguageCount = 0;\r\nlet noConnectionLanguageCount = 0;\r\nconst axiosCancelSource = Axios.CancelToken.source();\r\n\r\n/**\r\n * Manages API call and updates reducer with success or failure\r\n * @param apiDetails redux action and api config\r\n * @param dispatch redux dispatch function\r\n * @param apiRequestDetails request details for XMLHTTP request\r\n */\r\nexport default async function initDefaultAction(apiDetails: apiDetailType, dispatch: Dispatch, apiRequestDetails: APIRequestDetail = {}) {\r\n    const { requestData, requestMethod, params, cancelSource, disableSuccessToast = false, disableFailureToast, pathVariables, disableToast = false } = apiRequestDetails;\r\n\r\n    // Init Dispatch Types\r\n    const dispatchTypes = initDispatchTypes(apiDetails.actionName);\r\n\r\n    // Progress Dispatch\r\n    dispatch({ type: dispatchTypes.progressDispatch, payload: null });\r\n\r\n\r\n    // Check for path variables in controllername\r\n    const sanitizedApiDetails = sanitizeController(apiDetails, pathVariables);\r\n\r\n\r\n    let responseData;\r\n    try {\r\n        responseData = await initApiRequest(sanitizedApiDetails, requestData, requestMethod || sanitizedApiDetails.requestMethod || \"GET\", params, cancelSource || axiosCancelSource);\r\n\r\n        console.log(responseData.data, \"responseData\")\r\n        // Success Dispatch\r\n        dispatch({ type: dispatchTypes.successDispatch, payload: responseData.data });\r\n\r\n        if (disableSuccessToast || disableToast) {\r\n            // No work done\r\n        } else { \r\n            if (requestMethod !== \"GET\") {\r\n                SuccessToast(responseData.data?.message)\r\n            }\r\n        }\r\n\r\n    } catch (customThrownError) {\r\n        responseData = customThrownError;\r\n\r\n        // Failure Dispatch\r\n        dispatch({ type: dispatchTypes.failureDispatch, payload: responseData.data });\r\n        if (disableFailureToast || disableToast) {\r\n            // No work done\r\n        } else {\r\n            responseData.data?.message && FailToast(responseData.data.message);\r\n        }\r\n\r\n        // Axios Timeout\r\n        if (responseData.config.code === 'ECONNABORTED') {\r\n            if (!timeoutLanguageCount) {\r\n                timeoutLanguageCount++;\r\n                FailToast(requestTimeoutLanguage());\r\n            }\r\n        }\r\n\r\n        // No Connection\r\n        if (responseData.noconnection) {\r\n            // No Server Connection\r\n            if (responseData.message === 'Server could not be reached') {\r\n                if (!noServerConnectionLanguageCount) {\r\n                    noServerConnectionLanguageCount++;\r\n                    FailToast(noConnectionLanguage());\r\n                }\r\n            }\r\n            // No Connection\r\n            else if (responseData.config.code !== 'ECONNABORTED') {\r\n                if (!noConnectionLanguageCount) {\r\n                    noConnectionLanguageCount++;\r\n                    FailToast(noConnectionLanguage());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return responseData as APIResponseDetail | Promise<any>;\r\n};\r\n\r\n\r\nfunction sanitizeController(\r\n    apiDetail: apiDetailType,\r\n    pathVariables?: { [key: string]: Primitive }\r\n) {\r\n    return pathVariables && Object.keys(pathVariables).length\r\n        ? {\r\n            ...apiDetail,\r\n            controllerName: Object.entries(pathVariables).reduce(\r\n                (acc, [key, value]) =>\r\n                    (acc = acc.replace(`{${key}}`, value?.toString())),\r\n                apiDetail.controllerName\r\n            ),\r\n        }\r\n        : apiDetail;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}