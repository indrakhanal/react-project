{"ast":null,"code":"import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\"; // English translation files\n\nimport enCommon from './locale/common/en.json';\nimport enLogin from './locale/login/en.json';\nimport enRegister from './locale/register/en.json';\nimport enSidebar from './locale/sidebar/en.json';\nimport enUserapproval from './locale/userapproval/en.json';\nimport enCashbook from './locale/cashbook/en.json';\nimport enFinance from './locale/Finance/en.json';\nimport enMaintain from './locale/maintainance/en.json'; // Nepali translation files\n\nimport neCommmon from './locale/common/ne.json';\nimport neLogin from './locale/login/ne.json';\nimport neRegister from './locale/register/ne.json';\nimport neSidebar from './locale/sidebar/ne.json';\nimport neUserapproval from './locale/userapproval/ne.json';\nimport neHome from './locale/Home/np.json';\nimport enHome from './locale/Home/en.json';\nimport neCashbook from './locale/cashbook/ne.json';\nimport neFinance from './locale/Finance/np.json';\nimport neMaintain from './locale/maintainance/nep.json';\nimport { ENG_NEP_NUMBERS, ENG_MONTHS_IN_ENG, ENG_MONTHS_IN_NEP, NEP_MONTHS_IN_NEP, NEP_MONTHS_IN_ENG, NEP_ENG_NUMBERS } from \"constants/constants\";\nimport { BSToAD } from \"components/React/Datepicker/Datepickerutils\";\nexport const i18nLanguages = [\"en\", \"nep\"]; // Translation resources\n\nconst resources = {\n  en: {\n    common: enCommon,\n    login: enLogin,\n    register: enRegister,\n    sidebar: enSidebar,\n    userapproval: enUserapproval,\n    home: enHome,\n    cashbook: enCashbook,\n    finance: enFinance,\n    maintainance: enMaintain\n  },\n  nep: {\n    common: neCommmon,\n    login: neLogin,\n    register: neRegister,\n    sidebar: neSidebar,\n    userapproval: neUserapproval,\n    home: neHome,\n    cashbook: neCashbook,\n    finance: neFinance,\n    maintainance: neMaintain\n  }\n};\ni18n // .use(Backend)\n.use(initReactI18next) // passes i18n down to react-i18next\n.init({\n  lng: 'nep',\n  fallbackLng: 'nep',\n  whitelist: ['nep', 'en'],\n  resources,\n  ns: ['common'],\n  defaultNS: \"common\",\n  fallbackNS: \"common\",\n  // backend: {\n  //     loadPath: process.env.REACT_APP_ENDPOINT + '/config/i18n/res/{{lng}}/{{ns}}',\n  //     crossDomain: true\n  // },\n  keySeparator: \".\",\n  // we use keys in form {t('messages.welcome')}\n  interpolation: {\n    escapeValue: false // react already safes from xss\n\n  }\n});\n/**\r\n * Returns data in selected language\r\n * @param dataEn any data containing english language\r\n * @param dataNe any data containing nepali language\r\n */\n\nexport const getTextByLanguage = (dataEn, dataNe) => {\n  switch (i18n.language) {\n    case 'nep':\n      return dataNe;\n\n    default:\n      return dataEn;\n  }\n};\n/**\r\n * API request time out message in selected language\r\n */\n\nexport const requestTimeoutLanguage = () => {\n  switch (i18n.language) {\n    case 'nep':\n      return \"सर्भरले प्रतिक्रिया दिन धेरै लामो समय लिइरहेको छ, कृपया केहि बेरमा पुन: प्रयास गर्नुहोस्!\";\n\n    default:\n      return \"Server is taking too long to respond, please try again in sometime!\";\n  }\n};\n/**\r\n * When no internet or no conection to server message in selected language\r\n */\n\nexport const noConnectionLanguage = () => {\n  switch (i18n.language) {\n    case 'nep':\n      return \"सर्भरले प्रतिक्रिया दिन धेरै लामो समय लिईरहेको छ, यो कम कनेक्टिभटी वा हाम्रो सर्भरहरूको साथ त्रुटि द्वारा हुन सक्छ। कृपया केहि बेरमा पुन: प्रयास गर्नुहोस्!\";\n\n    default:\n      return \"Server is taking too long to respond, this can be caused by either poor connectivity or an error with our servers. Please try again in a while!\";\n  }\n};\nconst nepaliCount = ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९'];\n/**\r\n * Converts 123456 to 1,23,456\r\n * @param enNumber Number to convert into Nepali comma separated text\r\n */\n\nexport const nepaliNumeralFormat = enNumber => {\n  let [integer, decimal] = enNumber.toString().split(\".\");\n  let integerBeforeLastThreeDigits = integer.slice(0, integer.length - 3);\n  const integerOfLastThreeDigits = integer.slice(integer.length - 3);\n\n  if (integerBeforeLastThreeDigits.length > 2) {\n    integerBeforeLastThreeDigits = integerBeforeLastThreeDigits.replace(/(\\d)(?=(\\d{2})+$)/g, '$1,') + \",\";\n  }\n\n  integer = integerBeforeLastThreeDigits + integerOfLastThreeDigits;\n\n  switch (i18n.language) {\n    case 'nep':\n      return integer + decimal;\n\n    default:\n      return integer + decimal;\n  }\n};\n/**\r\n * Converts english number to nepali number as string\r\n * @param numberEn number in english\r\n */\n\nexport const convertEngToNepNumber = numberEn => {\n  return numberEn.toString().split(\"\").map(number => nepaliCount[+number] ? nepaliCount[+number] : number).join(\"\");\n};\n/**\r\n * Converts nepali number to english number as string\r\n * @param numberEn number text in nepali\r\n */\n\nexport const convertNepToEngNumber = numberNe => {\n  return numberNe.split(\"\").map(number => nepaliCount.indexOf(number) > -1 ? nepaliCount.indexOf(number) : number).join(\"\");\n};\nexport const getMonthByLanguage = month => {\n  switch (i18n.language) {\n    case 'nep':\n      return ENG_MONTHS_IN_NEP[+month];\n\n    default:\n      return ENG_MONTHS_IN_ENG[+month];\n  }\n};\nexport const getNumberByLanguage = number => {\n  if (number || number === 0) {\n    let transformedString = \"\";\n\n    if (i18n.language === \"nep\") {\n      // const parsedNumber = number?.toString()?.includes(\".\") ? Number(number)?.toFixed(2) : number\n      const parsedNumber = number;\n\n      if (parsedNumber) {\n        const originalData = number.toString() || \"\";\n        [...originalData].forEach(c => {\n          transformedString = transformedString + ENG_NEP_NUMBERS[c];\n        });\n      } else {\n        return number;\n      }\n    } else {\n      transformedString = number === null || number === void 0 ? void 0 : number.toString();\n    }\n\n    return transformedString;\n  }\n\n  return \"\";\n};\nexport const getEnglishNumberFromNepali = number => {\n  if (number) {\n    let transformedString = \"\";\n    const parsedNumber = number;\n\n    if (parsedNumber) {\n      if (i18n.language === \"nep\") {\n        const originalData = number.toString() || \"\";\n        [...originalData].forEach(c => {\n          transformedString = transformedString + NEP_ENG_NUMBERS[c];\n        });\n      } else {\n        transformedString = number;\n      }\n    } else {\n      return number;\n    }\n\n    return transformedString;\n  }\n\n  return \"\";\n};\nexport const getMonthByLanguageAndScheme = (month, language) => {\n  if (month) {\n    var _month$toString;\n\n    const reqMonth = +month < 10 ? month === null || month === void 0 ? void 0 : (_month$toString = month.toString()) === null || _month$toString === void 0 ? void 0 : _month$toString.replace(\"0\", \"\") : +month;\n\n    if (language === \"nep\") {\n      if (i18n.language === \"nep\") {\n        return NEP_MONTHS_IN_NEP[+reqMonth - 1];\n      } else {\n        return NEP_MONTHS_IN_ENG[+reqMonth - 1];\n      }\n    } else {\n      if (i18n.language === \"nep\") {\n        return ENG_MONTHS_IN_NEP[+reqMonth - 1];\n      } else {\n        return ENG_MONTHS_IN_ENG[+reqMonth - 1];\n      }\n    }\n  }\n};\nexport const getFiscalYearData = (intervals, language) => {\n  console.log(intervals, language, \"{}{}{}{}{}}}{}\");\n\n  if (language === \"nep\") {\n    var _currentFiscalyear, _currentFiscalyear$st;\n\n    const currentDate = new Date();\n    let currentFiscalyear = null;\n    intervals.forEach(item => {\n      if (new Date(BSToAD(item.end_date)).getTime() > new Date(currentDate).getTime() && new Date(BSToAD(item.start_date)).getTime() < new Date(currentDate).getTime()) {\n        currentFiscalyear = item;\n      }\n    });\n    const startMonth = (_currentFiscalyear = currentFiscalyear) === null || _currentFiscalyear === void 0 ? void 0 : (_currentFiscalyear$st = _currentFiscalyear.start_date) === null || _currentFiscalyear$st === void 0 ? void 0 : _currentFiscalyear$st.split(\"-\")[1];\n    const fiscalYearMonth = [];\n\n    for (let i = startMonth; i <= 12; i++) {\n      var _i, _i$toString;\n\n      fiscalYearMonth.push(i < 10 ? +((_i = i) === null || _i === void 0 ? void 0 : (_i$toString = _i.toString()) === null || _i$toString === void 0 ? void 0 : _i$toString.replace(\"0\", \"\")) : i);\n    }\n\n    for (let i = 1; i < startMonth; i++) {\n      var _i2, _i2$toString;\n\n      fiscalYearMonth.push(i < 10 ? +((_i2 = i) === null || _i2 === void 0 ? void 0 : (_i2$toString = _i2.toString()) === null || _i2$toString === void 0 ? void 0 : _i2$toString.replace(\"0\", \"\")) : i);\n    }\n\n    return fiscalYearMonth;\n  } else {\n    var _currentFiscalyear2, _currentFiscalyear2$s;\n\n    const currentDate = new Date();\n    let currentFiscalyear = null;\n    intervals.forEach(item => {\n      if (new Date(item.end_date).getTime() > currentDate.getTime() && new Date(item.start_date).getTime() < currentDate.getTime()) {\n        currentFiscalyear = item;\n      }\n    });\n    const startMonth = (_currentFiscalyear2 = currentFiscalyear) === null || _currentFiscalyear2 === void 0 ? void 0 : (_currentFiscalyear2$s = _currentFiscalyear2.start_date) === null || _currentFiscalyear2$s === void 0 ? void 0 : _currentFiscalyear2$s.split(\"-\")[1];\n    const fiscalYearMonth = [];\n\n    for (let i = startMonth; i <= 12; i++) {\n      var _i3, _i3$toString;\n\n      fiscalYearMonth.push(i < 10 ? +((_i3 = i) === null || _i3 === void 0 ? void 0 : (_i3$toString = _i3.toString()) === null || _i3$toString === void 0 ? void 0 : _i3$toString.replace(\"0\", \"\")) : i);\n    }\n\n    for (let i = 1; i < startMonth; i++) {\n      var _i4, _i4$toString;\n\n      fiscalYearMonth.push(i < 10 ? +((_i4 = i) === null || _i4 === void 0 ? void 0 : (_i4$toString = _i4.toString()) === null || _i4$toString === void 0 ? void 0 : _i4$toString.replace(\"0\", \"\")) : i);\n    }\n\n    return fiscalYearMonth;\n  }\n};\nexport const confirmationMessage = () => {\n  switch (i18n.language) {\n    case 'nep':\n      return \"के तपाइँ मेटाउन निश्चित हुनुहुन्छ?\";\n\n    default:\n      return \"Are you sure you want to delete ?\";\n  }\n};\nexport default i18n;","map":{"version":3,"sources":["E:/Smart Tech Solution/React JS/react-project/src/i18n/i18n.ts"],"names":["i18n","initReactI18next","enCommon","enLogin","enRegister","enSidebar","enUserapproval","enCashbook","enFinance","enMaintain","neCommmon","neLogin","neRegister","neSidebar","neUserapproval","neHome","enHome","neCashbook","neFinance","neMaintain","ENG_NEP_NUMBERS","ENG_MONTHS_IN_ENG","ENG_MONTHS_IN_NEP","NEP_MONTHS_IN_NEP","NEP_MONTHS_IN_ENG","NEP_ENG_NUMBERS","BSToAD","i18nLanguages","resources","en","common","login","register","sidebar","userapproval","home","cashbook","finance","maintainance","nep","use","init","lng","fallbackLng","whitelist","ns","defaultNS","fallbackNS","keySeparator","interpolation","escapeValue","getTextByLanguage","dataEn","dataNe","language","requestTimeoutLanguage","noConnectionLanguage","nepaliCount","nepaliNumeralFormat","enNumber","integer","decimal","toString","split","integerBeforeLastThreeDigits","slice","length","integerOfLastThreeDigits","replace","convertEngToNepNumber","numberEn","map","number","join","convertNepToEngNumber","numberNe","indexOf","getMonthByLanguage","month","getNumberByLanguage","transformedString","parsedNumber","originalData","forEach","c","getEnglishNumberFromNepali","getMonthByLanguageAndScheme","reqMonth","getFiscalYearData","intervals","console","log","currentDate","Date","currentFiscalyear","item","end_date","getTime","start_date","startMonth","fiscalYearMonth","i","push","confirmationMessage"],"mappings":"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","sourcesContent":["import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\n// English translation files\r\nimport enCommon from './locale/common/en.json';\r\nimport enLogin from './locale/login/en.json';\r\nimport enRegister from './locale/register/en.json';\r\nimport enSidebar from './locale/sidebar/en.json';\r\nimport enUserapproval from './locale/userapproval/en.json';\r\nimport enCashbook from './locale/cashbook/en.json';\r\nimport enFinance from './locale/Finance/en.json';\r\nimport enMaintain from './locale/maintainance/en.json';\r\n\r\n// Nepali translation files\r\nimport neCommmon from './locale/common/ne.json';\r\nimport neLogin from './locale/login/ne.json';\r\nimport neRegister from './locale/register/ne.json';\r\nimport neSidebar from './locale/sidebar/ne.json';\r\nimport neUserapproval from './locale/userapproval/ne.json';\r\nimport neHome from './locale/Home/np.json';\r\nimport enHome from './locale/Home/en.json';\r\nimport neCashbook from './locale/cashbook/ne.json';\r\nimport neFinance from './locale/Finance/np.json';\r\nimport neMaintain from './locale/maintainance/nep.json';\r\n\r\n\r\n\r\nimport { ENG_NEP_NUMBERS, ENG_MONTHS_IN_ENG, ENG_MONTHS_IN_NEP, NEP_MONTHS_IN_NEP, NEP_MONTHS_IN_ENG, NEP_ENG_NUMBERS } from \"constants/constants\";\r\nimport { ADToBS, BSToAD } from \"components/React/Datepicker/Datepickerutils\";\r\n\r\n\r\nexport const i18nLanguages = [\"en\", \"nep\"];\r\n\r\n// Translation resources\r\nconst resources = {\r\n    en: {\r\n        common: enCommon,\r\n        login: enLogin,\r\n        register: enRegister,\r\n        sidebar: enSidebar,\r\n        userapproval: enUserapproval,\r\n        home: enHome,\r\n        cashbook: enCashbook,\r\n        finance: enFinance,\r\n        maintainance: enMaintain\r\n    },\r\n    nep: {\r\n        common: neCommmon,\r\n        login: neLogin,\r\n        register: neRegister,\r\n        sidebar: neSidebar,\r\n        userapproval: neUserapproval,\r\n        home: neHome,\r\n        cashbook: neCashbook,\r\n        finance: neFinance,\r\n        maintainance: neMaintain\r\n    }\r\n};\r\n\r\ni18n\r\n    // .use(Backend)\r\n    .use(initReactI18next) // passes i18n down to react-i18next\r\n    .init({\r\n        lng: 'nep',\r\n        fallbackLng: 'nep',\r\n        whitelist: ['nep', 'en'],\r\n        resources,\r\n        ns: ['common'],\r\n        defaultNS: \"common\",\r\n        fallbackNS: \"common\",\r\n        // backend: {\r\n        //     loadPath: process.env.REACT_APP_ENDPOINT + '/config/i18n/res/{{lng}}/{{ns}}',\r\n        //     crossDomain: true\r\n        // },\r\n        keySeparator: \".\", // we use keys in form {t('messages.welcome')}\r\n        interpolation: {\r\n            escapeValue: false // react already safes from xss\r\n        }\r\n    });\r\n\r\n/**\r\n * Returns data in selected language\r\n * @param dataEn any data containing english language\r\n * @param dataNe any data containing nepali language\r\n */\r\nexport const getTextByLanguage = (dataEn: any, dataNe: any) => {\r\n    switch (i18n.language) {\r\n        case 'nep': return dataNe;\r\n        default: return dataEn;\r\n    }\r\n}\r\n\r\n/**\r\n * API request time out message in selected language\r\n */\r\nexport const requestTimeoutLanguage = () => {\r\n    switch (i18n.language) {\r\n        case 'nep': return \"सर्भरले प्रतिक्रिया दिन धेरै लामो समय लिइरहेको छ, कृपया केहि बेरमा पुन: प्रयास गर्नुहोस्!\";\r\n        default: return \"Server is taking too long to respond, please try again in sometime!\";\r\n    }\r\n}\r\n\r\n/**\r\n * When no internet or no conection to server message in selected language\r\n */\r\nexport const noConnectionLanguage = () => {\r\n    switch (i18n.language) {\r\n        case 'nep': return \"सर्भरले प्रतिक्रिया दिन धेरै लामो समय लिईरहेको छ, यो कम कनेक्टिभटी वा हाम्रो सर्भरहरूको साथ त्रुटि द्वारा हुन सक्छ। कृपया केहि बेरमा पुन: प्रयास गर्नुहोस्!\";\r\n        default: return \"Server is taking too long to respond, this can be caused by either poor connectivity or an error with our servers. Please try again in a while!\";\r\n    }\r\n}\r\n\r\nconst nepaliCount = ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९'];\r\n/**\r\n * Converts 123456 to 1,23,456\r\n * @param enNumber Number to convert into Nepali comma separated text\r\n */\r\nexport const nepaliNumeralFormat = (enNumber: number) => {\r\n    let [integer, decimal] = enNumber.toString().split(\".\");\r\n\r\n    let integerBeforeLastThreeDigits = integer.slice(0, integer.length - 3);\r\n    const integerOfLastThreeDigits = integer.slice(integer.length - 3);\r\n    if (integerBeforeLastThreeDigits.length > 2) {\r\n        integerBeforeLastThreeDigits = integerBeforeLastThreeDigits.replace(/(\\d)(?=(\\d{2})+$)/g, '$1,') + \",\";\r\n    }\r\n\r\n    integer = integerBeforeLastThreeDigits + integerOfLastThreeDigits;\r\n\r\n    switch (i18n.language) {\r\n        case 'nep': return integer + decimal;\r\n        default: return integer + decimal;\r\n    }\r\n}\r\n\r\n/**\r\n * Converts english number to nepali number as string\r\n * @param numberEn number in english\r\n */\r\nexport const convertEngToNepNumber = (numberEn: number) => {\r\n    return numberEn.toString().split(\"\").map((number) => nepaliCount[+number] ? nepaliCount[+number] : number).join(\"\");\r\n}\r\n\r\n/**\r\n * Converts nepali number to english number as string\r\n * @param numberEn number text in nepali\r\n */\r\nexport const convertNepToEngNumber = (numberNe: string) => {\r\n    return numberNe.split(\"\").map((number: string) => nepaliCount.indexOf(number) > -1 ? nepaliCount.indexOf(number) : number).join(\"\");\r\n}\r\n\r\n\r\nexport const getMonthByLanguage = (month: number | string) => {\r\n    switch (i18n.language) {\r\n        case 'nep': return ENG_MONTHS_IN_NEP[+month];\r\n        default: return ENG_MONTHS_IN_ENG[+month];\r\n    }\r\n}\r\n\r\nexport const getNumberByLanguage = (number) => {\r\n    if (number || number === 0) {\r\n        let transformedString = \"\"\r\n        if (i18n.language === \"nep\") {\r\n            // const parsedNumber = number?.toString()?.includes(\".\") ? Number(number)?.toFixed(2) : number\r\n            const parsedNumber = number\r\n            if (parsedNumber) {\r\n                const originalData = number.toString() || \"\";\r\n                [...originalData].forEach(c => {\r\n                    transformedString = transformedString + ENG_NEP_NUMBERS[c]\r\n                })\r\n            } else {\r\n                return number\r\n            }\r\n        } else {\r\n            transformedString = number?.toString()\r\n        }\r\n        return transformedString;\r\n    }\r\n    return \"\"\r\n}\r\n\r\nexport const getEnglishNumberFromNepali = (number) => {\r\n    if (number) {\r\n        let transformedString = \"\"\r\n        const parsedNumber = number\r\n        if (parsedNumber) {\r\n            if (i18n.language === \"nep\") {\r\n                const originalData = number.toString() || \"\";\r\n\r\n                [...originalData].forEach(c => {\r\n                    transformedString = transformedString + NEP_ENG_NUMBERS[c]\r\n                })\r\n            }else{\r\n                transformedString = number\r\n            }\r\n        } else {\r\n            return number\r\n        }\r\n        return transformedString;\r\n    }\r\n    return \"\"\r\n}\r\n\r\n\r\nexport const getMonthByLanguageAndScheme = (month: number | string, language: string) => {\r\n    if (month) {\r\n        const reqMonth = +month < 10 ? month?.toString()?.replace(\"0\", \"\") : +month\r\n\r\n        if (language === \"nep\") {\r\n            if (i18n.language === \"nep\") {\r\n                return NEP_MONTHS_IN_NEP[+reqMonth - 1]\r\n            } else {\r\n                return NEP_MONTHS_IN_ENG[+reqMonth - 1]\r\n            }\r\n        } else {\r\n            if (i18n.language === \"nep\") {\r\n                return ENG_MONTHS_IN_NEP[+reqMonth - 1]\r\n            } else {\r\n                return ENG_MONTHS_IN_ENG[+reqMonth - 1]\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const getFiscalYearData = (intervals: any, language: string) => {\r\n    console.log(intervals, language, \"{}{}{}{}{}}}{}\");\r\n\r\n\r\n    if (language === \"nep\") {\r\n        const currentDate = new Date()\r\n\r\n        let currentFiscalyear: any = null\r\n\r\n        intervals.forEach(item => {\r\n            if (new Date(BSToAD(item.end_date)).getTime() > new Date(currentDate).getTime() && new Date(BSToAD(item.start_date)).getTime() < new Date(currentDate).getTime()) {\r\n                currentFiscalyear = item\r\n            }\r\n        })\r\n        const startMonth = currentFiscalyear?.start_date?.split(\"-\")[1]\r\n\r\n        const fiscalYearMonth: any = []\r\n\r\n        for (let i = startMonth; i <= 12; i++) {\r\n            fiscalYearMonth.push(i < 10 ? +i?.toString()?.replace(\"0\", \"\") : i)\r\n        }\r\n        for (let i = 1; i < startMonth; i++) {\r\n            fiscalYearMonth.push(i < 10 ? +i?.toString()?.replace(\"0\", \"\") : i)\r\n        }\r\n        return fiscalYearMonth\r\n\r\n    } else {\r\n        const currentDate = new Date()\r\n\r\n        let currentFiscalyear: any = null\r\n\r\n        intervals.forEach(item => {\r\n            if (new Date(item.end_date).getTime() > currentDate.getTime() && new Date(item.start_date).getTime() < currentDate.getTime()) {\r\n                currentFiscalyear = item\r\n            }\r\n        })\r\n\r\n        const startMonth = currentFiscalyear?.start_date?.split(\"-\")[1]\r\n\r\n        const fiscalYearMonth: any = []\r\n\r\n        for (let i = startMonth; i <= 12; i++) {\r\n            fiscalYearMonth.push(i < 10 ? +i?.toString()?.replace(\"0\", \"\") : i)\r\n        }\r\n        for (let i = 1; i < startMonth; i++) {\r\n            fiscalYearMonth.push(i < 10 ? +i?.toString()?.replace(\"0\", \"\") : i)\r\n        }\r\n        return fiscalYearMonth\r\n    }\r\n}\r\n\r\n\r\nexport const confirmationMessage = () => {\r\n    switch (i18n.language) {\r\n        case 'nep': return \"के तपाइँ मेटाउन निश्चित हुनुहुन्छ?\";\r\n        default: return \"Are you sure you want to delete ?\";\r\n    }\r\n}\r\n\r\nexport default i18n;\r\n\r\n"]},"metadata":{},"sourceType":"module"}