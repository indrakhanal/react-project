{"ast":null,"code":"var _jsxFileName = \"E:\\\\Smart Tech Solution\\\\React JS\\\\react-project\\\\src\\\\core\\\\Protected\\\\Maintainance\\\\ManageCategories\\\\ManageComponent\\\\Form.tsx\",\n    _s = $RefreshSig$();\n\nimport FormikValidationError from \"components/React/FormikValidationError/FormikValidationError\";\nimport { useFormik } from \"formik\";\nimport React from \"react\";\nimport Button from \"components/UI/Forms/Buttons\";\nimport { connect } from \"react-redux\";\nimport toast from \"components/React/ToastNotifier/ToastNotifier\";\nimport * as Yup from \"yup\";\nimport StyledSelect from \"components/React/StyledSelect/StyledSelect\";\nimport { postComponentAction } from \"store/modules/component/postComponent\";\nimport { updateComponentAction } from \"store/modules/component/updateComponent\";\nimport { getComponentAction } from \"store/modules/component/getComponent\";\nimport { useTranslation } from \"react-i18next\";\nconst validationSchema = Yup.object({\n  name: Yup.string().required(\"This field is required\"),\n  category: Yup.mixed().required(\"This field is required\")\n});\n\nconst ComponentForm = props => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [initialData, setInitialData] = React.useState({\n    name: \"\",\n    category: null\n  });\n  const [options, setOptions] = React.useState();\n  React.useEffect(() => {\n    if (props.componentCategories) {\n      const newOpt = props.componentCategories.map(item => ({\n        label: \"\" + item.name,\n        value: \"\" + item.id\n      }));\n      setOptions(newOpt);\n    }\n  }, [props.componentCategories]);\n  const {\n    values,\n    errors,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  } = useFormik({\n    enableReinitialize: true,\n    initialValues: initialData,\n    validationSchema: validationSchema,\n    onSubmit: async (values, _ref) => {\n      let {\n        resetForm\n      } = _ref;\n      let response;\n\n      if (props.editData) {\n        var _values$category;\n\n        response = await props.updateComponentAction(props.editData.id, { ...values,\n          category: (_values$category = values.category) === null || _values$category === void 0 ? void 0 : _values$category.value\n        });\n      } else {\n        var _values$category2;\n\n        response = await props.postComponentAction({ ...values,\n          category: (_values$category2 = values.category) === null || _values$category2 === void 0 ? void 0 : _values$category2.value\n        });\n      }\n\n      if (response.status === 201 || response.status === 200) {\n        if (response.status === 201) {\n          resetForm();\n          toast.success(t(\"home:postSuccess\"));\n          props.getComponentAction();\n        } else {\n          setInitialData({\n            name: \"\",\n            category: null\n          });\n          props.getComponentAction();\n          toast.success(t(\"home:updateSuccess\"));\n        }\n\n        props.setEditData(null);\n      }\n    }\n  });\n  React.useEffect(() => {\n    if (props.editData) {\n      var _props$editData, _props$editData$categ, _props$editData2, _props$editData2$cate;\n\n      setInitialData({ ...props.editData,\n        category: {\n          label: (_props$editData = props.editData) === null || _props$editData === void 0 ? void 0 : (_props$editData$categ = _props$editData.category) === null || _props$editData$categ === void 0 ? void 0 : _props$editData$categ.name,\n          value: (_props$editData2 = props.editData) === null || _props$editData2 === void 0 ? void 0 : (_props$editData2$cate = _props$editData2.category) === null || _props$editData2$cate === void 0 ? void 0 : _props$editData2$cate.id\n        }\n      });\n    }\n  }, [props.editData]);\n  console.log(props.editData, \"props.editData\");\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      handleSubmit(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row rate_form align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"\",\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, t(\"maintainance:category\"), \":\"), /*#__PURE__*/React.createElement(StyledSelect, {\n    name: \"category\",\n    options: options,\n    value: values.category,\n    onChange: _ref2 => {\n      let {\n        name,\n        value\n      } = _ref2;\n      setFieldValue(name, value);\n    },\n    onBlur: () => {\n      setFieldTouched(\"category\", true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormikValidationError, {\n    name: \"category\",\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"\",\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, t(\"home:name\"), \" :\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"form-control\",\n    name: \"name\",\n    value: values.name,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormikValidationError, {\n    name: \"name\",\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12 mt-2 text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn custom-btn\",\n    text: t(\"home:save\"),\n    type: \"submit\",\n    disabled: props.postLoading || props.updateLoading,\n    loading: props.postLoading || props.updateLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(ComponentForm, \"EphwEBE14uxSDVjqoQ5XyXrmf0w=\", false, function () {\n  return [useTranslation, useFormik];\n});\n\n_c = ComponentForm;\n\nconst mapStateToProps = state => ({\n  language: state.i18nextData.languageType,\n  componentCategories: state.componentCategories.getComponentCategories.data,\n  postLoading: state.component.postComponent.isFetching,\n  updateLoading: state.component.updateComponent.isFetching\n});\n\nconst mapDispatchToProps = {\n  postComponentAction: postComponentAction,\n  updateComponentAction: updateComponentAction,\n  getComponentAction: getComponentAction\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(ComponentForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ComponentForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["E:/Smart Tech Solution/React JS/react-project/src/core/Protected/Maintainance/ManageCategories/ManageComponent/Form.tsx"],"names":["FormikValidationError","useFormik","React","Button","connect","toast","Yup","StyledSelect","postComponentAction","updateComponentAction","getComponentAction","useTranslation","validationSchema","object","name","string","required","category","mixed","ComponentForm","props","t","initialData","setInitialData","useState","options","setOptions","useEffect","componentCategories","newOpt","map","item","label","value","id","values","errors","touched","setFieldTouched","setFieldValue","handleChange","handleBlur","handleSubmit","enableReinitialize","initialValues","onSubmit","resetForm","response","editData","status","success","setEditData","console","log","e","preventDefault","postLoading","updateLoading","mapStateToProps","state","language","i18nextData","languageType","getComponentCategories","data","component","postComponent","isFetching","updateComponent","mapDispatchToProps","connector"],"mappings":"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","sourcesContent":["import FormikValidationError from \"components/React/FormikValidationError/FormikValidationError\";\r\nimport { Form, useFormik } from \"formik\";\r\nimport React from \"react\";\r\nimport Button from \"components/UI/Forms/Buttons\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { RootState } from \"store/root-reducer\";\r\nimport toast from \"components/React/ToastNotifier/ToastNotifier\";\r\nimport * as Yup from \"yup\";\r\nimport StyledSelect from \"components/React/StyledSelect/StyledSelect\";\r\nimport { postComponentAction } from \"store/modules/component/postComponent\";\r\nimport { updateComponentAction } from \"store/modules/component/updateComponent\";\r\nimport { getComponentAction } from \"store/modules/component/getComponent\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string().required(\"This field is required\"),\r\n  category: Yup.mixed().required(\"This field is required\"),\r\n});\r\n\r\ninterface Props extends PropsFromRedux {\r\n  editData: any;\r\n  setEditData: any\r\n}\r\n\r\nconst ComponentForm = (props: Props) => {\r\n  const { t } = useTranslation();\r\n  const [initialData, setInitialData] = React.useState({\r\n    name: \"\",\r\n    category: null as null | OptionType,\r\n  });\r\n\r\n  const [options, setOptions] = React.useState<OptionType[]>();\r\n\r\n  React.useEffect(() => {\r\n    if (props.componentCategories) {\r\n      const newOpt = props.componentCategories.map((item) => ({\r\n        label: \"\" + item.name,\r\n        value: \"\" + item.id,\r\n      }));\r\n      setOptions(newOpt);\r\n    }\r\n  }, [props.componentCategories]);\r\n\r\n  const {\r\n    values,\r\n    errors,\r\n    touched,\r\n    setFieldTouched,\r\n    setFieldValue,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n  } = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: initialData,\r\n    validationSchema: validationSchema,\r\n    onSubmit: async (values, { resetForm }) => {\r\n      let response;\r\n\r\n      if (props.editData) {\r\n        response = await props.updateComponentAction(props.editData.id, {\r\n          ...values,\r\n          category: values.category?.value,\r\n        });\r\n      } else {\r\n        response = await props.postComponentAction({ ...values, category: values.category?.value });\r\n      }\r\n\r\n      if (response.status === 201 || response.status === 200) {\r\n        if (response.status === 201) {\r\n          resetForm();\r\n          toast.success(t(\"home:postSuccess\"));\r\n          props.getComponentAction();\r\n        } else {\r\n          setInitialData({\r\n            name: \"\",\r\n            category: null,\r\n          });\r\n          props.getComponentAction();\r\n           toast.success(t(\"home:updateSuccess\"));\r\n        }\r\n        props.setEditData(null)\r\n      }\r\n    },\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (props.editData) {\r\n      setInitialData({\r\n        ...props.editData,\r\n        category: {label: props.editData?.category?.name, value: props.editData?.category?.id }\r\n      });\r\n    }\r\n  }, [props.editData]);\r\n\r\n  console.log(props.editData, \"props.editData\")\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        handleSubmit(e);\r\n      }}\r\n    >\r\n      <div className=\"row rate_form align-items-center\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"form-group\">\r\n           \r\n                <label htmlFor=\"\" className=\"mr-1\">\r\n                  {t(\"maintainance:category\")}:\r\n                </label>\r\n             \r\n                <StyledSelect\r\n                  name=\"category\"\r\n                  options={options}\r\n                  value={values.category}\r\n                  onChange={({ name, value }) => {\r\n                    setFieldValue(name, value);\r\n                  }}\r\n                  onBlur={() => {\r\n                    setFieldTouched(\"category\", true);\r\n                  }}\r\n                />\r\n                <FormikValidationError name=\"category\" errors={errors} touched={touched} />\r\n              \r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-12\">\r\n          <div className=\"form-group \">\r\n           \r\n                <label htmlFor=\"\" className=\"mr-1\">\r\n                  {t(\"home:name\")} :\r\n                </label>\r\n             \r\n                <textarea\r\n                  className=\"form-control\"\r\n                  name=\"name\"\r\n                  value={values.name}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                />\r\n                <FormikValidationError name=\"name\" errors={errors} touched={touched} />\r\n              \r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col-md-12 mt-2 text-right\">\r\n          <Button\r\n            className=\"btn custom-btn\"\r\n            text={t(\"home:save\")}\r\n            type=\"submit\"\r\n            disabled={props.postLoading || props.updateLoading}\r\n            loading={props.postLoading || props.updateLoading}\r\n          />\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  language: state.i18nextData.languageType,\r\n  componentCategories: state.componentCategories.getComponentCategories.data,\r\n  postLoading: state.component.postComponent.isFetching,\r\n  updateLoading: state.component.updateComponent.isFetching,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  postComponentAction: postComponentAction,\r\n  updateComponentAction: updateComponentAction,\r\n  getComponentAction: getComponentAction,\r\n};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(ComponentForm);\r\n"]},"metadata":{},"sourceType":"module"}