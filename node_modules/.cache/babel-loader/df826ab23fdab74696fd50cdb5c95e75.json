{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\S.K. COMPUTER\\\\OneDrive\\\\Desktop\\\\react-project\\\\src\\\\core\\\\Public\\\\Maintainance\\\\CostVisualization\\\\BarChart\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport GeneralChart from \"components/UI/Charts/General\";\nimport CustomCheckBox from \"components/UI/CustomCheckbox\";\nimport { getNumberByLanguage } from \"i18n/i18n\";\nimport React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { getYearFromDate } from \"utils/utilsFunction/date-converter\";\nimport DataTable from \"./DataTable\";\n\nconst BarChart = props => {\n  _s();\n\n  const {\n    selected,\n    setSelected\n  } = props;\n  const {\n    t\n  } = useTranslation();\n  const [chartData, setChartData] = useState();\n  const [seriesData, setSeriesData] = useState();\n  const [tableData, setTableData] = useState();\n  const options = [{\n    id: \"actual_unsegregated\",\n    name: `${t(\"home:actual\")} ${t(\"home:unsegregated\")}`,\n    color: \"#e69f00\"\n  }, {\n    id: \"actual_material\",\n    name: `${t(\"home:actual\")} ${t(\"home:consumable\")}`,\n    color: \"#56b4e9\"\n  }, {\n    id: \"actual_labor\",\n    name: `${t(\"home:actual\")} ${t(\"home:labour\")}`,\n    color: \"#f0e442\"\n  }, {\n    id: \"actual_replacement\",\n    name: `${t(\"home:actual\")} ${t(\"home:replacement\")}`,\n    color: \"#ea75b6\"\n  }, {\n    id: \"expected_unsegregated\",\n    name: `${t(\"home:expected\")} ${t(\"home:unsegregated\")}`,\n    color: \"#009e73\"\n  }, {\n    id: \"expected_material\",\n    name: `${t(\"home:expected\")} ${t(\"home:consumable\")}`,\n    color: \"#000000\"\n  }, {\n    id: \"expected_labor\",\n    name: `${t(\"home:expected\")} ${t(\"home:labour\")}`,\n    color: \"#d55e00\"\n  }, {\n    id: \"expected_replacement\",\n    name: `${t(\"home:expected\")} ${t(\"home:replacement\")}`,\n    color: \"#0072b2\"\n  }];\n  useEffect(() => {\n    if (props.maintainanceCost) {\n      var _props$maintainanceCo;\n\n      const sortAndMapArray = (array, key, color) => {\n        return array.map(item => ({\n          value: item[key] || 0,\n          itemStyle: {\n            color\n          }\n        }));\n      };\n\n      const chartData = {\n        years: (_props$maintainanceCo = props.maintainanceCost) === null || _props$maintainanceCo === void 0 ? void 0 : _props$maintainanceCo.expected_cost.map((item, index) => `${t(\"home:year\")} ${getNumberByLanguage(index + 1)} -  ${getNumberByLanguage(getYearFromDate(item.date_from))} - ${getNumberByLanguage(getYearFromDate(item.date_to))}`),\n        actual_unsegregated: sortAndMapArray(props.maintainanceCost.actual_cost, \"unsegregated_cost\", \"#e69f00\"),\n        actual_material: sortAndMapArray(props.maintainanceCost.actual_cost, \"material_cost\", \"#56b4e9\"),\n        actual_labor: sortAndMapArray(props.maintainanceCost.actual_cost, \"labour_cost\", \"#f0e442\"),\n        actual_replacement: sortAndMapArray(props.maintainanceCost.actual_cost, \"replacement_cost\", \"#ea75b6\"),\n        expected_unsegregated: sortAndMapArray(props.maintainanceCost.expected_cost, \"unsegregated_cost\", \"#009e73\"),\n        expected_material: sortAndMapArray(props.maintainanceCost.expected_cost, \"material_cost\", \"#000000\"),\n        expected_labor: sortAndMapArray(props.maintainanceCost.expected_cost, \"labour_cost\", \"#d55e00\"),\n        expected_replacement: sortAndMapArray(props.maintainanceCost.expected_cost, \"replacement_cost\", \"#0072b2\"),\n        expected_total: props.maintainanceCost.expected_cost.map(item => ({\n          date: item.maintenance_date__year,\n          value: item.actual_cost_total || 0\n        })),\n        actual_total: props.maintainanceCost.actual_cost.map(item => ({\n          date: item.maintenance_date__year,\n          value: item.actual_cost_total || 0\n        }))\n      };\n      setChartData(chartData);\n    }\n  }, [props.language, props.maintainanceCost]);\n\n  const handleSelect = name => {\n    if (selected !== null && selected !== void 0 && selected.includes(name)) {\n      const filteredData = selected.filter(item => item !== name);\n      setSelected(filteredData);\n    } else {\n      setSelected([...selected, name]);\n    }\n  };\n\n  useEffect(() => {\n    const selectedData = selected.map((item, index) => {\n      var _options$find, _options$find2;\n\n      return {\n        name: (_options$find = options.find(opt => opt.id === item)) === null || _options$find === void 0 ? void 0 : _options$find.name,\n        type: \"bar\",\n        stack: item !== null && item !== void 0 && item.includes(\"expec\") ? \"expected\" : \"actual\",\n        areaStyle: {\n          color: (_options$find2 = options.find(opt => opt.id === item)) === null || _options$find2 === void 0 ? void 0 : _options$find2.color\n        },\n        data: chartData && chartData[item]\n      };\n    });\n    const tableData = selected.map(item => {\n      var _options$find3, _options$find4;\n\n      return {\n        name: ((_options$find3 = options.find(opt => opt.id === item)) === null || _options$find3 === void 0 ? void 0 : _options$find3.name) || \"\",\n        color: ((_options$find4 = options.find(opt => opt.id === item)) === null || _options$find4 === void 0 ? void 0 : _options$find4.color) || \"\",\n        data: chartData && chartData[item]\n      };\n    });\n    setSeriesData(selectedData);\n    setTableData(tableData);\n  }, [chartData, selected]);\n  const optionData = {\n    tooltip: {\n      trigger: \"axis\",\n      axisPointer: {\n        type: \"shadow\"\n      } // formatter: handleCustomTooltip,\n\n    },\n    legend: {\n      show: false\n    },\n    grid: {\n      left: \"3%\",\n      right: \"4%\",\n      bottom: \"3%\",\n      top: \"8%\",\n      containLabel: true\n    },\n    xAxis: {\n      type: \"category\",\n      data: chartData === null || chartData === void 0 ? void 0 : chartData.years,\n      axisLabel: {\n        formatter: function (name) {\n          var _name$split$;\n\n          return name === null || name === void 0 ? void 0 : (_name$split$ = name.split(\"-\")[0]) === null || _name$split$ === void 0 ? void 0 : _name$split$.replace(\"Year\", \"\");\n        }\n      }\n    },\n    yAxis: {\n      type: \"value\",\n      axisLabel: {\n        formatter: function (name) {\n          return getNumberByLanguage(name);\n        }\n      }\n    },\n    series: seriesData\n  };\n  console.log(seriesData, \"->>>> asdadad\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GeneralChart, {\n    minHeight: 300,\n    options: optionData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }\n  }), (tableData === null || tableData === void 0 ? void 0 : tableData.length) > 0 && /*#__PURE__*/React.createElement(DataTable, {\n    years: chartData === null || chartData === void 0 ? void 0 : chartData.years,\n    tableData: tableData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 35\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-3 chartOptions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  }, \"Select\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  }, \"Visualization Parameters\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }\n  }, options.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CustomCheckBox, {\n    id: \"\" + item.id,\n    label: item.name,\n    onChange: e => handleSelect(item.id),\n    checked: selected.includes(item.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 15\n    }\n  }))))));\n};\n\n_s(BarChart, \"jjiPfI2O0qjqui6f8kW3cEOEUvI=\", false, function () {\n  return [useTranslation];\n});\n\n_c = BarChart;\n\nconst mapStateToProps = state => ({\n  language: state.i18nextData.languageType,\n  maintainanceCost: state.reportData.maintainanceCostData.data\n});\n\nconst mapDispatchToProps = {};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(BarChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BarChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/S.K. COMPUTER/OneDrive/Desktop/react-project/src/core/Public/Maintainance/CostVisualization/BarChart/index.tsx"],"names":["GeneralChart","CustomCheckBox","getNumberByLanguage","React","useEffect","useState","useTranslation","connect","getYearFromDate","DataTable","BarChart","props","selected","setSelected","t","chartData","setChartData","seriesData","setSeriesData","tableData","setTableData","options","id","name","color","maintainanceCost","sortAndMapArray","array","key","map","item","value","itemStyle","years","expected_cost","index","date_from","date_to","actual_unsegregated","actual_cost","actual_material","actual_labor","actual_replacement","expected_unsegregated","expected_material","expected_labor","expected_replacement","expected_total","date","maintenance_date__year","actual_cost_total","actual_total","language","handleSelect","includes","filteredData","filter","selectedData","find","opt","type","stack","areaStyle","data","optionData","tooltip","trigger","axisPointer","legend","show","grid","left","right","bottom","top","containLabel","xAxis","axisLabel","formatter","split","replace","yAxis","series","console","log","length","e","mapStateToProps","state","i18nextData","languageType","reportData","maintainanceCostData","mapDispatchToProps","connector"],"mappings":"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","sourcesContent":["import GeneralChart from \"components/UI/Charts/General\";\r\nimport CustomCheckBox from \"components/UI/CustomCheckbox\";\r\nimport { getNumberByLanguage } from \"i18n/i18n\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { MaintainanceCostSingleType } from \"store/modules/report/maintainanceCost\";\r\nimport { RootState } from \"store/root-reducer\";\r\nimport { getYearFromDate } from \"utils/utilsFunction/date-converter\";\r\nimport DataTable from \"./DataTable\";\r\n\r\ntype SeriesConfig = {\r\n  name: string | undefined;\r\n  type: string;\r\n  stack: string;\r\n  areaStyle: {\r\n    color: string | undefined;\r\n  };\r\n  data: number[];\r\n};\r\n\r\ninterface singleItemType {\r\n  value: any;\r\n  itemStyle: {\r\n    color: string;\r\n  };\r\n}\r\n\r\ninterface ChartDataType {\r\n  actual_unsegregated: singleItemType[];\r\n  actual_material: singleItemType[];\r\n  actual_labor: singleItemType[];\r\n  actual_replacement: singleItemType[];\r\n  expected_unsegregated: singleItemType[];\r\n  expected_material: singleItemType[];\r\n  expected_labor: singleItemType[];\r\n  expected_replacement: singleItemType[];\r\n  expected_total;\r\n  actual_total;\r\n  years: (string | number)[];\r\n}\r\n\r\ninterface Props extends PropsFromRedux {\r\n  selected: string[];\r\n  setSelected: any;\r\n}\r\n\r\nconst BarChart = (props: Props) => {\r\n  const { selected, setSelected } = props;\r\n\r\n  const { t } = useTranslation();\r\n  const [chartData, setChartData] = useState<ChartDataType>();\r\n\r\n  const [seriesData, setSeriesData] = useState<SeriesConfig[]>();\r\n\r\n  const [tableData, setTableData] = useState<any>();\r\n\r\n  const options = [\r\n    {\r\n      id: \"actual_unsegregated\",\r\n      name: `${t(\"home:actual\")} ${t(\"home:unsegregated\")}`,\r\n      color: \"#e69f00\",\r\n    },\r\n    {\r\n      id: \"actual_material\",\r\n      name: `${t(\"home:actual\")} ${t(\"home:consumable\")}`,\r\n      color: \"#56b4e9\",\r\n    },\r\n    {\r\n      id: \"actual_labor\",\r\n      name: `${t(\"home:actual\")} ${t(\"home:labour\")}`,\r\n      color: \"#f0e442\",\r\n    },\r\n    {\r\n      id: \"actual_replacement\",\r\n      name: `${t(\"home:actual\")} ${t(\"home:replacement\")}`,\r\n      color: \"#ea75b6\",\r\n    },\r\n    {\r\n      id: \"expected_unsegregated\",\r\n      name: `${t(\"home:expected\")} ${t(\"home:unsegregated\")}`,\r\n      color: \"#009e73\",\r\n    },\r\n    {\r\n      id: \"expected_material\",\r\n      name: `${t(\"home:expected\")} ${t(\"home:consumable\")}`,\r\n      color: \"#000000\",\r\n    },\r\n    {\r\n      id: \"expected_labor\",\r\n      name: `${t(\"home:expected\")} ${t(\"home:labour\")}`,\r\n      color: \"#d55e00\",\r\n    },\r\n    {\r\n      id: \"expected_replacement\",\r\n      name: `${t(\"home:expected\")} ${t(\"home:replacement\")}`,\r\n      color: \"#0072b2\",\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (props.maintainanceCost) {\r\n      const sortAndMapArray = (array: MaintainanceCostSingleType[], key: string, color: string) => {\r\n        return array.map((item) => ({\r\n          value: item[key] || 0,\r\n          itemStyle: { color },\r\n        }));\r\n      };\r\n\r\n      const chartData = {\r\n        years: props.maintainanceCost?.expected_cost.map(\r\n          (item, index) =>\r\n            `${t(\"home:year\")} ${getNumberByLanguage(index + 1)} -  ${getNumberByLanguage(\r\n              getYearFromDate(item.date_from)\r\n            )} - ${getNumberByLanguage(getYearFromDate(item.date_to))}`\r\n        ),\r\n        actual_unsegregated: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"unsegregated_cost\",\r\n          \"#e69f00\"\r\n        ),\r\n        actual_material: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"material_cost\",\r\n          \"#56b4e9\"\r\n        ),\r\n        actual_labor: sortAndMapArray(props.maintainanceCost.actual_cost, \"labour_cost\", \"#f0e442\"),\r\n        actual_replacement: sortAndMapArray(\r\n          props.maintainanceCost.actual_cost,\r\n          \"replacement_cost\",\r\n          \"#ea75b6\"\r\n        ),\r\n        expected_unsegregated: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"unsegregated_cost\",\r\n          \"#009e73\"\r\n        ),\r\n        expected_material: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"material_cost\",\r\n          \"#000000\"\r\n        ),\r\n        expected_labor: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"labour_cost\",\r\n          \"#d55e00\"\r\n        ),\r\n        expected_replacement: sortAndMapArray(\r\n          props.maintainanceCost.expected_cost,\r\n          \"replacement_cost\",\r\n          \"#0072b2\"\r\n        ),\r\n        expected_total: props.maintainanceCost.expected_cost.map((item) => ({\r\n          date: item.maintenance_date__year,\r\n          value: item.actual_cost_total || 0,\r\n        })),\r\n\r\n        actual_total: props.maintainanceCost.actual_cost.map((item) => ({\r\n          date: item.maintenance_date__year,\r\n          value: item.actual_cost_total || 0,\r\n        })),\r\n      };\r\n\r\n      setChartData(chartData);\r\n    }\r\n  }, [props.language, props.maintainanceCost]);\r\n\r\n  const handleSelect = (name: string) => {\r\n    if (selected?.includes(name)) {\r\n      const filteredData = selected.filter((item) => item !== name);\r\n      setSelected(filteredData);\r\n    } else {\r\n      setSelected([...selected, name]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const selectedData = selected.map((item, index) => ({\r\n      name: options.find((opt) => opt.id === item)?.name,\r\n      type: \"bar\",\r\n      stack: item?.includes(\"expec\") ? \"expected\" : \"actual\",\r\n      areaStyle: {\r\n        color: options.find((opt) => opt.id === item)?.color,\r\n      },\r\n      data: chartData && chartData[item],\r\n    }));\r\n\r\n    const tableData = selected.map((item) => ({\r\n      name: options.find((opt) => opt.id === item)?.name || \"\",\r\n      color: options.find((opt) => opt.id === item)?.color || \"\",\r\n      data: chartData && chartData[item],\r\n    }));\r\n\r\n    setSeriesData(selectedData);\r\n    setTableData(tableData);\r\n  }, [chartData, selected]);\r\n\r\n  const optionData = {\r\n    tooltip: {\r\n      trigger: \"axis\",\r\n      axisPointer: {\r\n        type: \"shadow\",\r\n      },\r\n      // formatter: handleCustomTooltip,\r\n    },\r\n    legend: {\r\n      show: false,\r\n    },\r\n    grid: {\r\n      left: \"3%\",\r\n      right: \"4%\",\r\n      bottom: \"3%\",\r\n      top: \"8%\",\r\n      containLabel: true,\r\n    },\r\n    xAxis: {\r\n      type: \"category\",\r\n      data: chartData?.years,\r\n      axisLabel: {\r\n        formatter: function (name) {\r\n          return name?.split(\"-\")[0]?.replace(\"Year\", \"\");\r\n        },\r\n      },\r\n    },\r\n    yAxis: {\r\n      type: \"value\",\r\n      axisLabel: {\r\n        formatter: function (name) {\r\n          return getNumberByLanguage(name);\r\n        },\r\n      },\r\n    },\r\n    series: seriesData,\r\n  };\r\n\r\n  console.log(seriesData, \"->>>> asdadad\");\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-9\">\r\n        <GeneralChart minHeight={300} options={optionData} />\r\n        {tableData?.length > 0 && <DataTable years={chartData?.years} tableData={tableData} />}\r\n      </div>\r\n      <div className=\"col-md-3 chartOptions\">\r\n        <h6>Select</h6>\r\n        <p>Visualization Parameters</p>\r\n\r\n        <ul>\r\n          {options.map((item) => (\r\n            <li key={item.id}>\r\n              <CustomCheckBox\r\n                id={\"\" + item.id}\r\n                label={item.name}\r\n                onChange={(e) => handleSelect(item.id)}\r\n                checked={selected.includes(item.id)}\r\n              />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  language: state.i18nextData.languageType,\r\n  maintainanceCost: state.reportData.maintainanceCostData.data,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(BarChart);\r\n"]},"metadata":{},"sourceType":"module"}