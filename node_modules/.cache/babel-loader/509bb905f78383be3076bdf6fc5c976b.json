{"ast":null,"code":"import { apiList } from \"../../actionNames\";\nimport initDefaultAction from \"../../helper/default-action\";\nimport initDefaultReducer from \"../../helper/default-reducer\";\nimport initialState from \"../../helper/default-state\";\nconst apiDetails = Object.freeze(apiList.testParameters.getTestParameters);\nexport default function getTestParametersReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const stateCopy = Object.assign({}, state);\n  const actionName = apiDetails.actionName;\n  return initDefaultReducer(actionName, action, stateCopy);\n}\nexport const getTestParametersAction = water_scheme_slug => async dispatch => {\n  const updatedDetails = { ...apiDetails\n  };\n  if (water_scheme_slug) updatedDetails['params'] = {\n    water_scheme_slug\n  };\n  return await initDefaultAction(apiDetails, dispatch, updatedDetails);\n};","map":{"version":3,"sources":["E:/Smart Tech Solution/React JS/react-project/src/store/modules/testParamters/getTestParameters.ts"],"names":["apiList","initDefaultAction","initDefaultReducer","initialState","apiDetails","Object","freeze","testParameters","getTestParameters","getTestParametersReducer","state","action","stateCopy","assign","actionName","getTestParametersAction","water_scheme_slug","dispatch","updatedDetails"],"mappings":"AAGA,SAASA,OAAT,QAAwB,mBAAxB;AACA,OAAOC,iBAAP,MAAqD,6BAArD;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAYA,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcN,OAAO,CAACO,cAAR,CAAuBC,iBAArC,CAAnB;AAEA,eAAe,SAASC,wBAAT,GAAiH;AAAA,MAA/EC,KAA+E,uEAAvEP,YAAuE;AAAA,MAAzDQ,MAAyD;AAC5H,QAAMC,SAAS,GAAGP,MAAM,CAACQ,MAAP,CAAc,EAAd,EAAkBH,KAAlB,CAAlB;AACA,QAAMI,UAAU,GAAGV,UAAU,CAACU,UAA9B;AAEA,SAAOZ,kBAAkB,CAACY,UAAD,EAAaH,MAAb,EAAqBC,SAArB,CAAzB;AACH;AAED,OAAO,MAAMG,uBAAuB,GAAIC,iBAAD,IAAiF,MAAOC,QAAP,IAA8B;AAClJ,QAAMC,cAAc,GAAG,EAAE,GAAGd;AAAL,GAAvB;AACA,MAAIY,iBAAJ,EAAuBE,cAAc,CAAC,QAAD,CAAd,GAA2B;AAAEF,IAAAA;AAAF,GAA3B;AAEvB,SAAO,MAAMf,iBAAiB,CAACG,UAAD,EAAaa,QAAb,EAAuBC,cAAvB,CAA9B;AACH,CALM","sourcesContent":["import { Dispatch } from \"redux\";\r\nimport { AppThunk } from \"../..\";\r\n\r\nimport { apiList } from \"../../actionNames\";\r\nimport initDefaultAction, { APIResponseDetail } from \"../../helper/default-action\";\r\nimport initDefaultReducer from \"../../helper/default-reducer\";\r\nimport initialState from \"../../helper/default-state\";\r\n\r\n\r\nexport type TestParametersType = {\r\n    id: number,\r\n    parameter_name: string\r\n    unit: string\r\n    types: string\r\n    NDWQS_standard: string\r\n\r\n}[]\r\n\r\nconst apiDetails = Object.freeze(apiList.testParameters.getTestParameters);\r\n\r\nexport default function getTestParametersReducer(state = initialState, action: DefaultAction): DefaultState<TestParametersType> {\r\n    const stateCopy = Object.assign({}, state);\r\n    const actionName = apiDetails.actionName;\r\n\r\n    return initDefaultReducer(actionName, action, stateCopy);\r\n}\r\n\r\nexport const getTestParametersAction = (water_scheme_slug?: string): AppThunk<APIResponseDetail<TestParametersType>> => async (dispatch: Dispatch) => {\r\n    const updatedDetails = { ...apiDetails }\r\n    if (water_scheme_slug) updatedDetails['params'] = { water_scheme_slug }\r\n\r\n    return await initDefaultAction(apiDetails, dispatch, updatedDetails);\r\n};"]},"metadata":{},"sourceType":"module"}